// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: npool/notif/mgr/v1/notif/txnotifstate/txnotifstate.proto

package txnotiftstate

import (
	npool "github.com/NpoolPlatform/message/npool"
	_ "github.com/NpoolPlatform/message/npool/notif/mgr/v1/channel"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TxState int32

const (
	TxState_DefaultNotifState TxState = 0
	TxState_WaitTxSuccess     TxState = 10
	TxState_WaitSend          TxState = 20
	TxState_AlreadySend       TxState = 30
)

// Enum value maps for TxState.
var (
	TxState_name = map[int32]string{
		0:  "DefaultNotifState",
		10: "WaitTxSuccess",
		20: "WaitSend",
		30: "AlreadySend",
	}
	TxState_value = map[string]int32{
		"DefaultNotifState": 0,
		"WaitTxSuccess":     10,
		"WaitSend":          20,
		"AlreadySend":       30,
	}
)

func (x TxState) Enum() *TxState {
	p := new(TxState)
	*p = x
	return p
}

func (x TxState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TxState) Descriptor() protoreflect.EnumDescriptor {
	return file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_enumTypes[0].Descriptor()
}

func (TxState) Type() protoreflect.EnumType {
	return &file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_enumTypes[0]
}

func (x TxState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TxState.Descriptor instead.
func (TxState) EnumDescriptor() ([]byte, []int) {
	return file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_rawDescGZIP(), []int{0}
}

type TxType int32

const (
	TxType_DefaultType TxType = 0
	TxType_Withdraw    TxType = 10
)

// Enum value maps for TxType.
var (
	TxType_name = map[int32]string{
		0:  "DefaultType",
		10: "Withdraw",
	}
	TxType_value = map[string]int32{
		"DefaultType": 0,
		"Withdraw":    10,
	}
)

func (x TxType) Enum() *TxType {
	p := new(TxType)
	*p = x
	return p
}

func (x TxType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TxType) Descriptor() protoreflect.EnumDescriptor {
	return file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_enumTypes[1].Descriptor()
}

func (TxType) Type() protoreflect.EnumType {
	return &file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_enumTypes[1]
}

func (x TxType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TxType.Descriptor instead.
func (TxType) EnumDescriptor() ([]byte, []int) {
	return file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_rawDescGZIP(), []int{1}
}

type TxNotifStateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         *string  `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	TxID       *string  `protobuf:"bytes,20,opt,name=TxID,proto3,oneof" json:"TxID,omitempty"`
	NotifState *TxState `protobuf:"varint,30,opt,name=NotifState,proto3,enum=notif.manager.notif.txnotiftstate.v1.TxState,oneof" json:"NotifState,omitempty"`
	NotifType  *TxType  `protobuf:"varint,40,opt,name=NotifType,proto3,enum=notif.manager.notif.txnotiftstate.v1.TxType,oneof" json:"NotifType,omitempty"`
}

func (x *TxNotifStateReq) Reset() {
	*x = TxNotifStateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxNotifStateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxNotifStateReq) ProtoMessage() {}

func (x *TxNotifStateReq) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxNotifStateReq.ProtoReflect.Descriptor instead.
func (*TxNotifStateReq) Descriptor() ([]byte, []int) {
	return file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_rawDescGZIP(), []int{0}
}

func (x *TxNotifStateReq) GetID() string {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return ""
}

func (x *TxNotifStateReq) GetTxID() string {
	if x != nil && x.TxID != nil {
		return *x.TxID
	}
	return ""
}

func (x *TxNotifStateReq) GetNotifState() TxState {
	if x != nil && x.NotifState != nil {
		return *x.NotifState
	}
	return TxState_DefaultNotifState
}

func (x *TxNotifStateReq) GetNotifType() TxType {
	if x != nil && x.NotifType != nil {
		return *x.NotifType
	}
	return TxType_DefaultType
}

type TxNotifState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         string  `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	TxID       string  `protobuf:"bytes,20,opt,name=TxID,proto3" json:"TxID,omitempty"`
	NotifState TxState `protobuf:"varint,30,opt,name=NotifState,proto3,enum=notif.manager.notif.txnotiftstate.v1.TxState" json:"NotifState,omitempty"`
	NotifType  TxType  `protobuf:"varint,40,opt,name=NotifType,proto3,enum=notif.manager.notif.txnotiftstate.v1.TxType" json:"NotifType,omitempty"`
	CreatedAt  uint32  `protobuf:"varint,50,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt  uint32  `protobuf:"varint,60,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
}

func (x *TxNotifState) Reset() {
	*x = TxNotifState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxNotifState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxNotifState) ProtoMessage() {}

func (x *TxNotifState) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxNotifState.ProtoReflect.Descriptor instead.
func (*TxNotifState) Descriptor() ([]byte, []int) {
	return file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_rawDescGZIP(), []int{1}
}

func (x *TxNotifState) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *TxNotifState) GetTxID() string {
	if x != nil {
		return x.TxID
	}
	return ""
}

func (x *TxNotifState) GetNotifState() TxState {
	if x != nil {
		return x.NotifState
	}
	return TxState_DefaultNotifState
}

func (x *TxNotifState) GetNotifType() TxType {
	if x != nil {
		return x.NotifType
	}
	return TxType_DefaultType
}

func (x *TxNotifState) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *TxNotifState) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         *npool.StringVal `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	TxID       *npool.StringVal `protobuf:"bytes,20,opt,name=TxID,proto3,oneof" json:"TxID,omitempty"`
	NotifState *npool.Uint32Val `protobuf:"bytes,30,opt,name=NotifState,proto3,oneof" json:"NotifState,omitempty"`
	NotifType  *npool.Uint32Val `protobuf:"bytes,40,opt,name=NotifType,proto3,oneof" json:"NotifType,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *npool.StringVal {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetTxID() *npool.StringVal {
	if x != nil {
		return x.TxID
	}
	return nil
}

func (x *Conds) GetNotifState() *npool.Uint32Val {
	if x != nil {
		return x.NotifState
	}
	return nil
}

func (x *Conds) GetNotifType() *npool.Uint32Val {
	if x != nil {
		return x.NotifType
	}
	return nil
}

type CreateTxNotifStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *TxNotifStateReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateTxNotifStateRequest) Reset() {
	*x = CreateTxNotifStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTxNotifStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTxNotifStateRequest) ProtoMessage() {}

func (x *CreateTxNotifStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTxNotifStateRequest.ProtoReflect.Descriptor instead.
func (*CreateTxNotifStateRequest) Descriptor() ([]byte, []int) {
	return file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_rawDescGZIP(), []int{3}
}

func (x *CreateTxNotifStateRequest) GetInfo() *TxNotifStateReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateTxNotifStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *TxNotifState `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateTxNotifStateResponse) Reset() {
	*x = CreateTxNotifStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTxNotifStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTxNotifStateResponse) ProtoMessage() {}

func (x *CreateTxNotifStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTxNotifStateResponse.ProtoReflect.Descriptor instead.
func (*CreateTxNotifStateResponse) Descriptor() ([]byte, []int) {
	return file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_rawDescGZIP(), []int{4}
}

func (x *CreateTxNotifStateResponse) GetInfo() *TxNotifState {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateTxNotifStatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*TxNotifStateReq `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateTxNotifStatesRequest) Reset() {
	*x = CreateTxNotifStatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTxNotifStatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTxNotifStatesRequest) ProtoMessage() {}

func (x *CreateTxNotifStatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTxNotifStatesRequest.ProtoReflect.Descriptor instead.
func (*CreateTxNotifStatesRequest) Descriptor() ([]byte, []int) {
	return file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_rawDescGZIP(), []int{5}
}

func (x *CreateTxNotifStatesRequest) GetInfos() []*TxNotifStateReq {
	if x != nil {
		return x.Infos
	}
	return nil
}

type CreateTxNotifStatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*TxNotifState `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateTxNotifStatesResponse) Reset() {
	*x = CreateTxNotifStatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTxNotifStatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTxNotifStatesResponse) ProtoMessage() {}

func (x *CreateTxNotifStatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTxNotifStatesResponse.ProtoReflect.Descriptor instead.
func (*CreateTxNotifStatesResponse) Descriptor() ([]byte, []int) {
	return file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_rawDescGZIP(), []int{6}
}

func (x *CreateTxNotifStatesResponse) GetInfos() []*TxNotifState {
	if x != nil {
		return x.Infos
	}
	return nil
}

type UpdateTxNotifStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *TxNotifStateReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateTxNotifStateRequest) Reset() {
	*x = UpdateTxNotifStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTxNotifStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTxNotifStateRequest) ProtoMessage() {}

func (x *UpdateTxNotifStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTxNotifStateRequest.ProtoReflect.Descriptor instead.
func (*UpdateTxNotifStateRequest) Descriptor() ([]byte, []int) {
	return file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateTxNotifStateRequest) GetInfo() *TxNotifStateReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateTxNotifStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *TxNotifState `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateTxNotifStateResponse) Reset() {
	*x = UpdateTxNotifStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTxNotifStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTxNotifStateResponse) ProtoMessage() {}

func (x *UpdateTxNotifStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTxNotifStateResponse.ProtoReflect.Descriptor instead.
func (*UpdateTxNotifStateResponse) Descriptor() ([]byte, []int) {
	return file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateTxNotifStateResponse) GetInfo() *TxNotifState {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetTxNotifStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetTxNotifStateRequest) Reset() {
	*x = GetTxNotifStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTxNotifStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTxNotifStateRequest) ProtoMessage() {}

func (x *GetTxNotifStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTxNotifStateRequest.ProtoReflect.Descriptor instead.
func (*GetTxNotifStateRequest) Descriptor() ([]byte, []int) {
	return file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_rawDescGZIP(), []int{9}
}

func (x *GetTxNotifStateRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetTxNotifStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *TxNotifState `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetTxNotifStateResponse) Reset() {
	*x = GetTxNotifStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTxNotifStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTxNotifStateResponse) ProtoMessage() {}

func (x *GetTxNotifStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTxNotifStateResponse.ProtoReflect.Descriptor instead.
func (*GetTxNotifStateResponse) Descriptor() ([]byte, []int) {
	return file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_rawDescGZIP(), []int{10}
}

func (x *GetTxNotifStateResponse) GetInfo() *TxNotifState {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetTxNotifStatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetTxNotifStatesRequest) Reset() {
	*x = GetTxNotifStatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTxNotifStatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTxNotifStatesRequest) ProtoMessage() {}

func (x *GetTxNotifStatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTxNotifStatesRequest.ProtoReflect.Descriptor instead.
func (*GetTxNotifStatesRequest) Descriptor() ([]byte, []int) {
	return file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_rawDescGZIP(), []int{11}
}

func (x *GetTxNotifStatesRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetTxNotifStatesRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetTxNotifStatesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetTxNotifStatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*TxNotifState `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32          `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetTxNotifStatesResponse) Reset() {
	*x = GetTxNotifStatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTxNotifStatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTxNotifStatesResponse) ProtoMessage() {}

func (x *GetTxNotifStatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTxNotifStatesResponse.ProtoReflect.Descriptor instead.
func (*GetTxNotifStatesResponse) Descriptor() ([]byte, []int) {
	return file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_rawDescGZIP(), []int{12}
}

func (x *GetTxNotifStatesResponse) GetInfos() []*TxNotifState {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetTxNotifStatesResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetTxNotifStateOnlyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *GetTxNotifStateOnlyRequest) Reset() {
	*x = GetTxNotifStateOnlyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTxNotifStateOnlyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTxNotifStateOnlyRequest) ProtoMessage() {}

func (x *GetTxNotifStateOnlyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTxNotifStateOnlyRequest.ProtoReflect.Descriptor instead.
func (*GetTxNotifStateOnlyRequest) Descriptor() ([]byte, []int) {
	return file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_rawDescGZIP(), []int{13}
}

func (x *GetTxNotifStateOnlyRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type GetTxNotifStateOnlyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *TxNotifState `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetTxNotifStateOnlyResponse) Reset() {
	*x = GetTxNotifStateOnlyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTxNotifStateOnlyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTxNotifStateOnlyResponse) ProtoMessage() {}

func (x *GetTxNotifStateOnlyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTxNotifStateOnlyResponse.ProtoReflect.Descriptor instead.
func (*GetTxNotifStateOnlyResponse) Descriptor() ([]byte, []int) {
	return file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_rawDescGZIP(), []int{14}
}

func (x *GetTxNotifStateOnlyResponse) GetInfo() *TxNotifState {
	if x != nil {
		return x.Info
	}
	return nil
}

type ExistTxNotifStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ExistTxNotifStateRequest) Reset() {
	*x = ExistTxNotifStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistTxNotifStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistTxNotifStateRequest) ProtoMessage() {}

func (x *ExistTxNotifStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistTxNotifStateRequest.ProtoReflect.Descriptor instead.
func (*ExistTxNotifStateRequest) Descriptor() ([]byte, []int) {
	return file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_rawDescGZIP(), []int{15}
}

func (x *ExistTxNotifStateRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ExistTxNotifStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistTxNotifStateResponse) Reset() {
	*x = ExistTxNotifStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistTxNotifStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistTxNotifStateResponse) ProtoMessage() {}

func (x *ExistTxNotifStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistTxNotifStateResponse.ProtoReflect.Descriptor instead.
func (*ExistTxNotifStateResponse) Descriptor() ([]byte, []int) {
	return file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_rawDescGZIP(), []int{16}
}

func (x *ExistTxNotifStateResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type ExistTxNotifStateCondsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *ExistTxNotifStateCondsRequest) Reset() {
	*x = ExistTxNotifStateCondsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistTxNotifStateCondsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistTxNotifStateCondsRequest) ProtoMessage() {}

func (x *ExistTxNotifStateCondsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistTxNotifStateCondsRequest.ProtoReflect.Descriptor instead.
func (*ExistTxNotifStateCondsRequest) Descriptor() ([]byte, []int) {
	return file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_rawDescGZIP(), []int{17}
}

func (x *ExistTxNotifStateCondsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type ExistTxNotifStateCondsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistTxNotifStateCondsResponse) Reset() {
	*x = ExistTxNotifStateCondsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistTxNotifStateCondsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistTxNotifStateCondsResponse) ProtoMessage() {}

func (x *ExistTxNotifStateCondsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistTxNotifStateCondsResponse.ProtoReflect.Descriptor instead.
func (*ExistTxNotifStateCondsResponse) Descriptor() ([]byte, []int) {
	return file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_rawDescGZIP(), []int{18}
}

func (x *ExistTxNotifStateCondsResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type CountTxNotifStatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *CountTxNotifStatesRequest) Reset() {
	*x = CountTxNotifStatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountTxNotifStatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountTxNotifStatesRequest) ProtoMessage() {}

func (x *CountTxNotifStatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountTxNotifStatesRequest.ProtoReflect.Descriptor instead.
func (*CountTxNotifStatesRequest) Descriptor() ([]byte, []int) {
	return file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_rawDescGZIP(), []int{19}
}

func (x *CountTxNotifStatesRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type CountTxNotifStatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info uint32 `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CountTxNotifStatesResponse) Reset() {
	*x = CountTxNotifStatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountTxNotifStatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountTxNotifStatesResponse) ProtoMessage() {}

func (x *CountTxNotifStatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountTxNotifStatesResponse.ProtoReflect.Descriptor instead.
func (*CountTxNotifStatesResponse) Descriptor() ([]byte, []int) {
	return file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_rawDescGZIP(), []int{20}
}

func (x *CountTxNotifStatesResponse) GetInfo() uint32 {
	if x != nil {
		return x.Info
	}
	return 0
}

type DeleteTxNotifStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *DeleteTxNotifStateRequest) Reset() {
	*x = DeleteTxNotifStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTxNotifStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTxNotifStateRequest) ProtoMessage() {}

func (x *DeleteTxNotifStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTxNotifStateRequest.ProtoReflect.Descriptor instead.
func (*DeleteTxNotifStateRequest) Descriptor() ([]byte, []int) {
	return file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteTxNotifStateRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type DeleteTxNotifStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *TxNotifState `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteTxNotifStateResponse) Reset() {
	*x = DeleteTxNotifStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTxNotifStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTxNotifStateResponse) ProtoMessage() {}

func (x *DeleteTxNotifStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTxNotifStateResponse.ProtoReflect.Descriptor instead.
func (*DeleteTxNotifStateResponse) Descriptor() ([]byte, []int) {
	return file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteTxNotifStateResponse) GetInfo() *TxNotifState {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto protoreflect.FileDescriptor

var file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_rawDesc = []byte{
	0x0a, 0x38, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2f, 0x6d, 0x67,
	0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2f, 0x74, 0x78, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x78, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e,
	0x74, 0x78, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31,
	0x1a, 0x28, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2f, 0x6d, 0x67,
	0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x6e, 0x70, 0x6f, 0x6f,
	0x6c, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x91, 0x02,
	0x0a, 0x0f, 0x54, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x13, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x54, 0x78, 0x49, 0x44, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x54, 0x78, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12,
	0x52, 0x0a, 0x0a, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x74, 0x78, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x78, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x48, 0x02, 0x52, 0x0a, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x09, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x74, 0x78, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x78,
	0x54, 0x79, 0x70, 0x65, 0x48, 0x03, 0x52, 0x09, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x54, 0x78, 0x49, 0x44, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x89, 0x02, 0x0a, 0x0c, 0x54, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x78, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x54, 0x78, 0x49, 0x44, 0x12, 0x4d, 0x0a, 0x0a, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x2e, 0x74, 0x78, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x78, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x09, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x74,
	0x78, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x3c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xfe, 0x01,
	0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01,
	0x01, 0x12, 0x2c, 0x0a, 0x04, 0x54, 0x78, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x48, 0x01, 0x52, 0x04, 0x54, 0x78, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12,
	0x38, 0x0a, 0x0a, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x02, 0x52, 0x0a, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x09, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x54, 0x79, 0x70, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x48, 0x03, 0x52, 0x09, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x54, 0x78, 0x49,
	0x44, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x54, 0x79, 0x70, 0x65, 0x22, 0x66,
	0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e,
	0x74, 0x78, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x64, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x74, 0x78, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x78, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x69, 0x0a, 0x1a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x05, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e,
	0x74, 0x78, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x67, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x74, 0x78, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x78, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x22, 0x66, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x78, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x2e, 0x74, 0x78, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x64, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x74, 0x78, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x78, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x28,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x61, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x54,
	0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x74, 0x78, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x74,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x8a, 0x01, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x54, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x74, 0x78, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x7a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x54,
	0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x74, 0x78, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x78, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x22, 0x5f, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x54, 0x78, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x41, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x74, 0x78, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x74,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05,
	0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x65, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x54, 0x78, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x74, 0x78, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x78, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2a, 0x0a, 0x18,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x54, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x2f, 0x0a, 0x19, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x54, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x62, 0x0a, 0x1d, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x54, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x05, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e,
	0x74, 0x78, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x34, 0x0a,
	0x1e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x54, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x5e, 0x0a, 0x19, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x78, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x41, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x74, 0x78, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x74, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x22, 0x30, 0x0a, 0x1a, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x78, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2b, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x44, 0x22, 0x64, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x78, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x46, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x2e, 0x74, 0x78, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x74, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x2a, 0x52, 0x0a, 0x07, 0x54, 0x78, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x57, 0x61,
	0x69, 0x74, 0x54, 0x78, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x0a, 0x12, 0x0c, 0x0a,
	0x08, 0x57, 0x61, 0x69, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x10, 0x14, 0x12, 0x0f, 0x0a, 0x0b, 0x41,
	0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x53, 0x65, 0x6e, 0x64, 0x10, 0x1e, 0x2a, 0x27, 0x0a, 0x06,
	0x54, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x10, 0x0a, 0x32, 0xa1, 0x0c, 0x0a, 0x07, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x12, 0x99, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x78, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x74,
	0x78, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e,
	0x74, 0x78, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9c, 0x01,
	0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x40, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x74, 0x78, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x74, 0x78,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x99, 0x01, 0x0a,
	0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x3f, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x74, 0x78, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x74, 0x78, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x90, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x54, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x2e, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x2e, 0x74, 0x78, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x2e, 0x74, 0x78, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9c, 0x01, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x54, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f,
	0x6e, 0x6c, 0x79, 0x12, 0x40, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x74, 0x78, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x78,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x74, 0x78, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x6c, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x93, 0x01, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x54, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12,
	0x3d, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x74, 0x78, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x74, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x78, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e,
	0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x2e, 0x74, 0x78, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x74, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x96, 0x01, 0x0a, 0x11, 0x45, 0x78, 0x69, 0x73, 0x74, 0x54, 0x78, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x74, 0x78, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x54, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x74, 0x78, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x54, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa5, 0x01, 0x0a, 0x16, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x54, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x43, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x74, 0x78, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x54, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e,
	0x74, 0x78, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x54, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x99, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x78, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x3f, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x74,
	0x78, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e,
	0x74, 0x78, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x99, 0x01,
	0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x74, 0x78, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x74, 0x78, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x74, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x49, 0x5a, 0x47, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70,
	0x6f, 0x6f, 0x6c, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2f, 0x6d, 0x67, 0x72, 0x2f, 0x76, 0x31,
	0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2f, 0x74, 0x78, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x74, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_rawDescOnce sync.Once
	file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_rawDescData = file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_rawDesc
)

func file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_rawDescGZIP() []byte {
	file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_rawDescOnce.Do(func() {
		file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_rawDescData)
	})
	return file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_rawDescData
}

var file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_goTypes = []interface{}{
	(TxState)(0),                           // 0: notif.manager.notif.txnotiftstate.v1.TxState
	(TxType)(0),                            // 1: notif.manager.notif.txnotiftstate.v1.TxType
	(*TxNotifStateReq)(nil),                // 2: notif.manager.notif.txnotiftstate.v1.TxNotifStateReq
	(*TxNotifState)(nil),                   // 3: notif.manager.notif.txnotiftstate.v1.TxNotifState
	(*Conds)(nil),                          // 4: notif.manager.notif.txnotiftstate.v1.Conds
	(*CreateTxNotifStateRequest)(nil),      // 5: notif.manager.notif.txnotiftstate.v1.CreateTxNotifStateRequest
	(*CreateTxNotifStateResponse)(nil),     // 6: notif.manager.notif.txnotiftstate.v1.CreateTxNotifStateResponse
	(*CreateTxNotifStatesRequest)(nil),     // 7: notif.manager.notif.txnotiftstate.v1.CreateTxNotifStatesRequest
	(*CreateTxNotifStatesResponse)(nil),    // 8: notif.manager.notif.txnotiftstate.v1.CreateTxNotifStatesResponse
	(*UpdateTxNotifStateRequest)(nil),      // 9: notif.manager.notif.txnotiftstate.v1.UpdateTxNotifStateRequest
	(*UpdateTxNotifStateResponse)(nil),     // 10: notif.manager.notif.txnotiftstate.v1.UpdateTxNotifStateResponse
	(*GetTxNotifStateRequest)(nil),         // 11: notif.manager.notif.txnotiftstate.v1.GetTxNotifStateRequest
	(*GetTxNotifStateResponse)(nil),        // 12: notif.manager.notif.txnotiftstate.v1.GetTxNotifStateResponse
	(*GetTxNotifStatesRequest)(nil),        // 13: notif.manager.notif.txnotiftstate.v1.GetTxNotifStatesRequest
	(*GetTxNotifStatesResponse)(nil),       // 14: notif.manager.notif.txnotiftstate.v1.GetTxNotifStatesResponse
	(*GetTxNotifStateOnlyRequest)(nil),     // 15: notif.manager.notif.txnotiftstate.v1.GetTxNotifStateOnlyRequest
	(*GetTxNotifStateOnlyResponse)(nil),    // 16: notif.manager.notif.txnotiftstate.v1.GetTxNotifStateOnlyResponse
	(*ExistTxNotifStateRequest)(nil),       // 17: notif.manager.notif.txnotiftstate.v1.ExistTxNotifStateRequest
	(*ExistTxNotifStateResponse)(nil),      // 18: notif.manager.notif.txnotiftstate.v1.ExistTxNotifStateResponse
	(*ExistTxNotifStateCondsRequest)(nil),  // 19: notif.manager.notif.txnotiftstate.v1.ExistTxNotifStateCondsRequest
	(*ExistTxNotifStateCondsResponse)(nil), // 20: notif.manager.notif.txnotiftstate.v1.ExistTxNotifStateCondsResponse
	(*CountTxNotifStatesRequest)(nil),      // 21: notif.manager.notif.txnotiftstate.v1.CountTxNotifStatesRequest
	(*CountTxNotifStatesResponse)(nil),     // 22: notif.manager.notif.txnotiftstate.v1.CountTxNotifStatesResponse
	(*DeleteTxNotifStateRequest)(nil),      // 23: notif.manager.notif.txnotiftstate.v1.DeleteTxNotifStateRequest
	(*DeleteTxNotifStateResponse)(nil),     // 24: notif.manager.notif.txnotiftstate.v1.DeleteTxNotifStateResponse
	(*npool.StringVal)(nil),                // 25: npool.v1.StringVal
	(*npool.Uint32Val)(nil),                // 26: npool.v1.Uint32Val
}
var file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_depIdxs = []int32{
	0,  // 0: notif.manager.notif.txnotiftstate.v1.TxNotifStateReq.NotifState:type_name -> notif.manager.notif.txnotiftstate.v1.TxState
	1,  // 1: notif.manager.notif.txnotiftstate.v1.TxNotifStateReq.NotifType:type_name -> notif.manager.notif.txnotiftstate.v1.TxType
	0,  // 2: notif.manager.notif.txnotiftstate.v1.TxNotifState.NotifState:type_name -> notif.manager.notif.txnotiftstate.v1.TxState
	1,  // 3: notif.manager.notif.txnotiftstate.v1.TxNotifState.NotifType:type_name -> notif.manager.notif.txnotiftstate.v1.TxType
	25, // 4: notif.manager.notif.txnotiftstate.v1.Conds.ID:type_name -> npool.v1.StringVal
	25, // 5: notif.manager.notif.txnotiftstate.v1.Conds.TxID:type_name -> npool.v1.StringVal
	26, // 6: notif.manager.notif.txnotiftstate.v1.Conds.NotifState:type_name -> npool.v1.Uint32Val
	26, // 7: notif.manager.notif.txnotiftstate.v1.Conds.NotifType:type_name -> npool.v1.Uint32Val
	2,  // 8: notif.manager.notif.txnotiftstate.v1.CreateTxNotifStateRequest.Info:type_name -> notif.manager.notif.txnotiftstate.v1.TxNotifStateReq
	3,  // 9: notif.manager.notif.txnotiftstate.v1.CreateTxNotifStateResponse.Info:type_name -> notif.manager.notif.txnotiftstate.v1.TxNotifState
	2,  // 10: notif.manager.notif.txnotiftstate.v1.CreateTxNotifStatesRequest.Infos:type_name -> notif.manager.notif.txnotiftstate.v1.TxNotifStateReq
	3,  // 11: notif.manager.notif.txnotiftstate.v1.CreateTxNotifStatesResponse.Infos:type_name -> notif.manager.notif.txnotiftstate.v1.TxNotifState
	2,  // 12: notif.manager.notif.txnotiftstate.v1.UpdateTxNotifStateRequest.Info:type_name -> notif.manager.notif.txnotiftstate.v1.TxNotifStateReq
	3,  // 13: notif.manager.notif.txnotiftstate.v1.UpdateTxNotifStateResponse.Info:type_name -> notif.manager.notif.txnotiftstate.v1.TxNotifState
	3,  // 14: notif.manager.notif.txnotiftstate.v1.GetTxNotifStateResponse.Info:type_name -> notif.manager.notif.txnotiftstate.v1.TxNotifState
	4,  // 15: notif.manager.notif.txnotiftstate.v1.GetTxNotifStatesRequest.Conds:type_name -> notif.manager.notif.txnotiftstate.v1.Conds
	3,  // 16: notif.manager.notif.txnotiftstate.v1.GetTxNotifStatesResponse.Infos:type_name -> notif.manager.notif.txnotiftstate.v1.TxNotifState
	4,  // 17: notif.manager.notif.txnotiftstate.v1.GetTxNotifStateOnlyRequest.Conds:type_name -> notif.manager.notif.txnotiftstate.v1.Conds
	3,  // 18: notif.manager.notif.txnotiftstate.v1.GetTxNotifStateOnlyResponse.Info:type_name -> notif.manager.notif.txnotiftstate.v1.TxNotifState
	4,  // 19: notif.manager.notif.txnotiftstate.v1.ExistTxNotifStateCondsRequest.Conds:type_name -> notif.manager.notif.txnotiftstate.v1.Conds
	4,  // 20: notif.manager.notif.txnotiftstate.v1.CountTxNotifStatesRequest.Conds:type_name -> notif.manager.notif.txnotiftstate.v1.Conds
	3,  // 21: notif.manager.notif.txnotiftstate.v1.DeleteTxNotifStateResponse.Info:type_name -> notif.manager.notif.txnotiftstate.v1.TxNotifState
	5,  // 22: notif.manager.notif.txnotiftstate.v1.Manager.CreateTxNotifState:input_type -> notif.manager.notif.txnotiftstate.v1.CreateTxNotifStateRequest
	7,  // 23: notif.manager.notif.txnotiftstate.v1.Manager.CreateTxNotifStates:input_type -> notif.manager.notif.txnotiftstate.v1.CreateTxNotifStatesRequest
	9,  // 24: notif.manager.notif.txnotiftstate.v1.Manager.UpdateTxNotifState:input_type -> notif.manager.notif.txnotiftstate.v1.UpdateTxNotifStateRequest
	11, // 25: notif.manager.notif.txnotiftstate.v1.Manager.GetTxNotifState:input_type -> notif.manager.notif.txnotiftstate.v1.GetTxNotifStateRequest
	15, // 26: notif.manager.notif.txnotiftstate.v1.Manager.GetTxNotifStateOnly:input_type -> notif.manager.notif.txnotiftstate.v1.GetTxNotifStateOnlyRequest
	13, // 27: notif.manager.notif.txnotiftstate.v1.Manager.GetTxNotifStates:input_type -> notif.manager.notif.txnotiftstate.v1.GetTxNotifStatesRequest
	17, // 28: notif.manager.notif.txnotiftstate.v1.Manager.ExistTxNotifState:input_type -> notif.manager.notif.txnotiftstate.v1.ExistTxNotifStateRequest
	19, // 29: notif.manager.notif.txnotiftstate.v1.Manager.ExistTxNotifStateConds:input_type -> notif.manager.notif.txnotiftstate.v1.ExistTxNotifStateCondsRequest
	21, // 30: notif.manager.notif.txnotiftstate.v1.Manager.CountTxNotifStates:input_type -> notif.manager.notif.txnotiftstate.v1.CountTxNotifStatesRequest
	23, // 31: notif.manager.notif.txnotiftstate.v1.Manager.DeleteTxNotifState:input_type -> notif.manager.notif.txnotiftstate.v1.DeleteTxNotifStateRequest
	6,  // 32: notif.manager.notif.txnotiftstate.v1.Manager.CreateTxNotifState:output_type -> notif.manager.notif.txnotiftstate.v1.CreateTxNotifStateResponse
	8,  // 33: notif.manager.notif.txnotiftstate.v1.Manager.CreateTxNotifStates:output_type -> notif.manager.notif.txnotiftstate.v1.CreateTxNotifStatesResponse
	10, // 34: notif.manager.notif.txnotiftstate.v1.Manager.UpdateTxNotifState:output_type -> notif.manager.notif.txnotiftstate.v1.UpdateTxNotifStateResponse
	12, // 35: notif.manager.notif.txnotiftstate.v1.Manager.GetTxNotifState:output_type -> notif.manager.notif.txnotiftstate.v1.GetTxNotifStateResponse
	16, // 36: notif.manager.notif.txnotiftstate.v1.Manager.GetTxNotifStateOnly:output_type -> notif.manager.notif.txnotiftstate.v1.GetTxNotifStateOnlyResponse
	14, // 37: notif.manager.notif.txnotiftstate.v1.Manager.GetTxNotifStates:output_type -> notif.manager.notif.txnotiftstate.v1.GetTxNotifStatesResponse
	18, // 38: notif.manager.notif.txnotiftstate.v1.Manager.ExistTxNotifState:output_type -> notif.manager.notif.txnotiftstate.v1.ExistTxNotifStateResponse
	20, // 39: notif.manager.notif.txnotiftstate.v1.Manager.ExistTxNotifStateConds:output_type -> notif.manager.notif.txnotiftstate.v1.ExistTxNotifStateCondsResponse
	22, // 40: notif.manager.notif.txnotiftstate.v1.Manager.CountTxNotifStates:output_type -> notif.manager.notif.txnotiftstate.v1.CountTxNotifStatesResponse
	24, // 41: notif.manager.notif.txnotiftstate.v1.Manager.DeleteTxNotifState:output_type -> notif.manager.notif.txnotiftstate.v1.DeleteTxNotifStateResponse
	32, // [32:42] is the sub-list for method output_type
	22, // [22:32] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_init() }
func file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_init() {
	if File_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxNotifStateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxNotifState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTxNotifStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTxNotifStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTxNotifStatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTxNotifStatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTxNotifStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTxNotifStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTxNotifStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTxNotifStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTxNotifStatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTxNotifStatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTxNotifStateOnlyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTxNotifStateOnlyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistTxNotifStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistTxNotifStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistTxNotifStateCondsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistTxNotifStateCondsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountTxNotifStatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountTxNotifStatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTxNotifStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTxNotifStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_goTypes,
		DependencyIndexes: file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_depIdxs,
		EnumInfos:         file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_enumTypes,
		MessageInfos:      file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_msgTypes,
	}.Build()
	File_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto = out.File
	file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_rawDesc = nil
	file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_goTypes = nil
	file_npool_notif_mgr_v1_notif_txnotifstate_txnotifstate_proto_depIdxs = nil
}
