// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/notif/mgr/v1/notif/notif.proto

package notif

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Manager_CreateNotif_FullMethodName     = "/notif.manager.notif1.v1.Manager/CreateNotif"
	Manager_CreateNotifs_FullMethodName    = "/notif.manager.notif1.v1.Manager/CreateNotifs"
	Manager_UpdateNotif_FullMethodName     = "/notif.manager.notif1.v1.Manager/UpdateNotif"
	Manager_GetNotif_FullMethodName        = "/notif.manager.notif1.v1.Manager/GetNotif"
	Manager_GetNotifOnly_FullMethodName    = "/notif.manager.notif1.v1.Manager/GetNotifOnly"
	Manager_GetNotifs_FullMethodName       = "/notif.manager.notif1.v1.Manager/GetNotifs"
	Manager_ExistNotif_FullMethodName      = "/notif.manager.notif1.v1.Manager/ExistNotif"
	Manager_ExistNotifConds_FullMethodName = "/notif.manager.notif1.v1.Manager/ExistNotifConds"
	Manager_CountNotifs_FullMethodName     = "/notif.manager.notif1.v1.Manager/CountNotifs"
	Manager_DeleteNotif_FullMethodName     = "/notif.manager.notif1.v1.Manager/DeleteNotif"
)

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateNotif(ctx context.Context, in *CreateNotifRequest, opts ...grpc.CallOption) (*CreateNotifResponse, error)
	CreateNotifs(ctx context.Context, in *CreateNotifsRequest, opts ...grpc.CallOption) (*CreateNotifsResponse, error)
	UpdateNotif(ctx context.Context, in *UpdateNotifRequest, opts ...grpc.CallOption) (*UpdateNotifResponse, error)
	GetNotif(ctx context.Context, in *GetNotifRequest, opts ...grpc.CallOption) (*GetNotifResponse, error)
	GetNotifOnly(ctx context.Context, in *GetNotifOnlyRequest, opts ...grpc.CallOption) (*GetNotifOnlyResponse, error)
	GetNotifs(ctx context.Context, in *GetNotifsRequest, opts ...grpc.CallOption) (*GetNotifsResponse, error)
	ExistNotif(ctx context.Context, in *ExistNotifRequest, opts ...grpc.CallOption) (*ExistNotifResponse, error)
	ExistNotifConds(ctx context.Context, in *ExistNotifCondsRequest, opts ...grpc.CallOption) (*ExistNotifCondsResponse, error)
	CountNotifs(ctx context.Context, in *CountNotifsRequest, opts ...grpc.CallOption) (*CountNotifsResponse, error)
	DeleteNotif(ctx context.Context, in *DeleteNotifRequest, opts ...grpc.CallOption) (*DeleteNotifResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateNotif(ctx context.Context, in *CreateNotifRequest, opts ...grpc.CallOption) (*CreateNotifResponse, error) {
	out := new(CreateNotifResponse)
	err := c.cc.Invoke(ctx, Manager_CreateNotif_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateNotifs(ctx context.Context, in *CreateNotifsRequest, opts ...grpc.CallOption) (*CreateNotifsResponse, error) {
	out := new(CreateNotifsResponse)
	err := c.cc.Invoke(ctx, Manager_CreateNotifs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateNotif(ctx context.Context, in *UpdateNotifRequest, opts ...grpc.CallOption) (*UpdateNotifResponse, error) {
	out := new(UpdateNotifResponse)
	err := c.cc.Invoke(ctx, Manager_UpdateNotif_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetNotif(ctx context.Context, in *GetNotifRequest, opts ...grpc.CallOption) (*GetNotifResponse, error) {
	out := new(GetNotifResponse)
	err := c.cc.Invoke(ctx, Manager_GetNotif_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetNotifOnly(ctx context.Context, in *GetNotifOnlyRequest, opts ...grpc.CallOption) (*GetNotifOnlyResponse, error) {
	out := new(GetNotifOnlyResponse)
	err := c.cc.Invoke(ctx, Manager_GetNotifOnly_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetNotifs(ctx context.Context, in *GetNotifsRequest, opts ...grpc.CallOption) (*GetNotifsResponse, error) {
	out := new(GetNotifsResponse)
	err := c.cc.Invoke(ctx, Manager_GetNotifs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistNotif(ctx context.Context, in *ExistNotifRequest, opts ...grpc.CallOption) (*ExistNotifResponse, error) {
	out := new(ExistNotifResponse)
	err := c.cc.Invoke(ctx, Manager_ExistNotif_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistNotifConds(ctx context.Context, in *ExistNotifCondsRequest, opts ...grpc.CallOption) (*ExistNotifCondsResponse, error) {
	out := new(ExistNotifCondsResponse)
	err := c.cc.Invoke(ctx, Manager_ExistNotifConds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CountNotifs(ctx context.Context, in *CountNotifsRequest, opts ...grpc.CallOption) (*CountNotifsResponse, error) {
	out := new(CountNotifsResponse)
	err := c.cc.Invoke(ctx, Manager_CountNotifs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteNotif(ctx context.Context, in *DeleteNotifRequest, opts ...grpc.CallOption) (*DeleteNotifResponse, error) {
	out := new(DeleteNotifResponse)
	err := c.cc.Invoke(ctx, Manager_DeleteNotif_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateNotif(context.Context, *CreateNotifRequest) (*CreateNotifResponse, error)
	CreateNotifs(context.Context, *CreateNotifsRequest) (*CreateNotifsResponse, error)
	UpdateNotif(context.Context, *UpdateNotifRequest) (*UpdateNotifResponse, error)
	GetNotif(context.Context, *GetNotifRequest) (*GetNotifResponse, error)
	GetNotifOnly(context.Context, *GetNotifOnlyRequest) (*GetNotifOnlyResponse, error)
	GetNotifs(context.Context, *GetNotifsRequest) (*GetNotifsResponse, error)
	ExistNotif(context.Context, *ExistNotifRequest) (*ExistNotifResponse, error)
	ExistNotifConds(context.Context, *ExistNotifCondsRequest) (*ExistNotifCondsResponse, error)
	CountNotifs(context.Context, *CountNotifsRequest) (*CountNotifsResponse, error)
	DeleteNotif(context.Context, *DeleteNotifRequest) (*DeleteNotifResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateNotif(context.Context, *CreateNotifRequest) (*CreateNotifResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotif not implemented")
}
func (UnimplementedManagerServer) CreateNotifs(context.Context, *CreateNotifsRequest) (*CreateNotifsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotifs not implemented")
}
func (UnimplementedManagerServer) UpdateNotif(context.Context, *UpdateNotifRequest) (*UpdateNotifResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotif not implemented")
}
func (UnimplementedManagerServer) GetNotif(context.Context, *GetNotifRequest) (*GetNotifResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotif not implemented")
}
func (UnimplementedManagerServer) GetNotifOnly(context.Context, *GetNotifOnlyRequest) (*GetNotifOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotifOnly not implemented")
}
func (UnimplementedManagerServer) GetNotifs(context.Context, *GetNotifsRequest) (*GetNotifsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotifs not implemented")
}
func (UnimplementedManagerServer) ExistNotif(context.Context, *ExistNotifRequest) (*ExistNotifResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistNotif not implemented")
}
func (UnimplementedManagerServer) ExistNotifConds(context.Context, *ExistNotifCondsRequest) (*ExistNotifCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistNotifConds not implemented")
}
func (UnimplementedManagerServer) CountNotifs(context.Context, *CountNotifsRequest) (*CountNotifsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountNotifs not implemented")
}
func (UnimplementedManagerServer) DeleteNotif(context.Context, *DeleteNotifRequest) (*DeleteNotifResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNotif not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateNotif_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNotifRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateNotif(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_CreateNotif_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateNotif(ctx, req.(*CreateNotifRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateNotifs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNotifsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateNotifs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_CreateNotifs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateNotifs(ctx, req.(*CreateNotifsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateNotif_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNotifRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateNotif(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_UpdateNotif_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateNotif(ctx, req.(*UpdateNotifRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetNotif_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotifRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetNotif(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetNotif_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetNotif(ctx, req.(*GetNotifRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetNotifOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotifOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetNotifOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetNotifOnly_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetNotifOnly(ctx, req.(*GetNotifOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetNotifs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotifsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetNotifs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetNotifs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetNotifs(ctx, req.(*GetNotifsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistNotif_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistNotifRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistNotif(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_ExistNotif_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistNotif(ctx, req.(*ExistNotifRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistNotifConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistNotifCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistNotifConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_ExistNotifConds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistNotifConds(ctx, req.(*ExistNotifCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CountNotifs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountNotifsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CountNotifs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_CountNotifs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CountNotifs(ctx, req.(*CountNotifsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteNotif_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNotifRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteNotif(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_DeleteNotif_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteNotif(ctx, req.(*DeleteNotifRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notif.manager.notif1.v1.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNotif",
			Handler:    _Manager_CreateNotif_Handler,
		},
		{
			MethodName: "CreateNotifs",
			Handler:    _Manager_CreateNotifs_Handler,
		},
		{
			MethodName: "UpdateNotif",
			Handler:    _Manager_UpdateNotif_Handler,
		},
		{
			MethodName: "GetNotif",
			Handler:    _Manager_GetNotif_Handler,
		},
		{
			MethodName: "GetNotifOnly",
			Handler:    _Manager_GetNotifOnly_Handler,
		},
		{
			MethodName: "GetNotifs",
			Handler:    _Manager_GetNotifs_Handler,
		},
		{
			MethodName: "ExistNotif",
			Handler:    _Manager_ExistNotif_Handler,
		},
		{
			MethodName: "ExistNotifConds",
			Handler:    _Manager_ExistNotifConds_Handler,
		},
		{
			MethodName: "CountNotifs",
			Handler:    _Manager_CountNotifs_Handler,
		},
		{
			MethodName: "DeleteNotif",
			Handler:    _Manager_DeleteNotif_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/notif/mgr/v1/notif/notif.proto",
}
