// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: npool/notif/mgr/v1/notif/notifchannel/notifchannel.proto

package notifchannel

import (
	npool "github.com/NpoolPlatform/message/npool"
	channel "github.com/NpoolPlatform/message/npool/notif/mgr/v1/channel"
	usedfor "github.com/NpoolPlatform/message/npool/third/mgr/v1/usedfor"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NotifChannelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        *string               `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	AppID     *string               `protobuf:"bytes,20,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	EventType *usedfor.UsedFor      `protobuf:"varint,40,opt,name=EventType,proto3,enum=third.manager.usedfor.v1.UsedFor,oneof" json:"EventType,omitempty"`
	Channel   *channel.NotifChannel `protobuf:"varint,50,opt,name=Channel,proto3,enum=notif.manager.channel.v1.NotifChannel,oneof" json:"Channel,omitempty"`
}

func (x *NotifChannelReq) Reset() {
	*x = NotifChannelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifChannelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifChannelReq) ProtoMessage() {}

func (x *NotifChannelReq) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifChannelReq.ProtoReflect.Descriptor instead.
func (*NotifChannelReq) Descriptor() ([]byte, []int) {
	return file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_rawDescGZIP(), []int{0}
}

func (x *NotifChannelReq) GetID() string {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return ""
}

func (x *NotifChannelReq) GetAppID() string {
	if x != nil && x.AppID != nil {
		return *x.AppID
	}
	return ""
}

func (x *NotifChannelReq) GetEventType() usedfor.UsedFor {
	if x != nil && x.EventType != nil {
		return *x.EventType
	}
	return usedfor.UsedFor(0)
}

func (x *NotifChannelReq) GetChannel() channel.NotifChannel {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return channel.NotifChannel(0)
}

type NotifChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        string               `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	AppID     string               `protobuf:"bytes,20,opt,name=AppID,proto3" json:"AppID,omitempty"`
	EventType usedfor.UsedFor      `protobuf:"varint,30,opt,name=EventType,proto3,enum=third.manager.usedfor.v1.UsedFor" json:"EventType,omitempty"`
	Channel   channel.NotifChannel `protobuf:"varint,40,opt,name=Channel,proto3,enum=notif.manager.channel.v1.NotifChannel" json:"Channel,omitempty"`
	CreatedAt uint32               `protobuf:"varint,50,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt uint32               `protobuf:"varint,60,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
}

func (x *NotifChannel) Reset() {
	*x = NotifChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifChannel) ProtoMessage() {}

func (x *NotifChannel) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifChannel.ProtoReflect.Descriptor instead.
func (*NotifChannel) Descriptor() ([]byte, []int) {
	return file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_rawDescGZIP(), []int{1}
}

func (x *NotifChannel) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *NotifChannel) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *NotifChannel) GetEventType() usedfor.UsedFor {
	if x != nil {
		return x.EventType
	}
	return usedfor.UsedFor(0)
}

func (x *NotifChannel) GetChannel() channel.NotifChannel {
	if x != nil {
		return x.Channel
	}
	return channel.NotifChannel(0)
}

func (x *NotifChannel) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *NotifChannel) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        *npool.StringVal `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	AppID     *npool.StringVal `protobuf:"bytes,20,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	EventType *npool.Uint32Val `protobuf:"bytes,30,opt,name=EventType,proto3,oneof" json:"EventType,omitempty"`
	Channel   *npool.Uint32Val `protobuf:"bytes,40,opt,name=Channel,proto3,oneof" json:"Channel,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *npool.StringVal {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetAppID() *npool.StringVal {
	if x != nil {
		return x.AppID
	}
	return nil
}

func (x *Conds) GetEventType() *npool.Uint32Val {
	if x != nil {
		return x.EventType
	}
	return nil
}

func (x *Conds) GetChannel() *npool.Uint32Val {
	if x != nil {
		return x.Channel
	}
	return nil
}

type CreateNotifChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *NotifChannelReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateNotifChannelRequest) Reset() {
	*x = CreateNotifChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNotifChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNotifChannelRequest) ProtoMessage() {}

func (x *CreateNotifChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNotifChannelRequest.ProtoReflect.Descriptor instead.
func (*CreateNotifChannelRequest) Descriptor() ([]byte, []int) {
	return file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_rawDescGZIP(), []int{3}
}

func (x *CreateNotifChannelRequest) GetInfo() *NotifChannelReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateNotifChannelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *NotifChannel `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateNotifChannelResponse) Reset() {
	*x = CreateNotifChannelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNotifChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNotifChannelResponse) ProtoMessage() {}

func (x *CreateNotifChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNotifChannelResponse.ProtoReflect.Descriptor instead.
func (*CreateNotifChannelResponse) Descriptor() ([]byte, []int) {
	return file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_rawDescGZIP(), []int{4}
}

func (x *CreateNotifChannelResponse) GetInfo() *NotifChannel {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateNotifChannelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*NotifChannelReq `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateNotifChannelsRequest) Reset() {
	*x = CreateNotifChannelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNotifChannelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNotifChannelsRequest) ProtoMessage() {}

func (x *CreateNotifChannelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNotifChannelsRequest.ProtoReflect.Descriptor instead.
func (*CreateNotifChannelsRequest) Descriptor() ([]byte, []int) {
	return file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_rawDescGZIP(), []int{5}
}

func (x *CreateNotifChannelsRequest) GetInfos() []*NotifChannelReq {
	if x != nil {
		return x.Infos
	}
	return nil
}

type CreateNotifChannelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*NotifChannel `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateNotifChannelsResponse) Reset() {
	*x = CreateNotifChannelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNotifChannelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNotifChannelsResponse) ProtoMessage() {}

func (x *CreateNotifChannelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNotifChannelsResponse.ProtoReflect.Descriptor instead.
func (*CreateNotifChannelsResponse) Descriptor() ([]byte, []int) {
	return file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_rawDescGZIP(), []int{6}
}

func (x *CreateNotifChannelsResponse) GetInfos() []*NotifChannel {
	if x != nil {
		return x.Infos
	}
	return nil
}

type UpdateNotifChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *NotifChannelReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateNotifChannelRequest) Reset() {
	*x = UpdateNotifChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNotifChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNotifChannelRequest) ProtoMessage() {}

func (x *UpdateNotifChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNotifChannelRequest.ProtoReflect.Descriptor instead.
func (*UpdateNotifChannelRequest) Descriptor() ([]byte, []int) {
	return file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateNotifChannelRequest) GetInfo() *NotifChannelReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateNotifChannelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *NotifChannel `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateNotifChannelResponse) Reset() {
	*x = UpdateNotifChannelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNotifChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNotifChannelResponse) ProtoMessage() {}

func (x *UpdateNotifChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNotifChannelResponse.ProtoReflect.Descriptor instead.
func (*UpdateNotifChannelResponse) Descriptor() ([]byte, []int) {
	return file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateNotifChannelResponse) GetInfo() *NotifChannel {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetNotifChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetNotifChannelRequest) Reset() {
	*x = GetNotifChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNotifChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNotifChannelRequest) ProtoMessage() {}

func (x *GetNotifChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNotifChannelRequest.ProtoReflect.Descriptor instead.
func (*GetNotifChannelRequest) Descriptor() ([]byte, []int) {
	return file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_rawDescGZIP(), []int{9}
}

func (x *GetNotifChannelRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetNotifChannelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *NotifChannel `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetNotifChannelResponse) Reset() {
	*x = GetNotifChannelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNotifChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNotifChannelResponse) ProtoMessage() {}

func (x *GetNotifChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNotifChannelResponse.ProtoReflect.Descriptor instead.
func (*GetNotifChannelResponse) Descriptor() ([]byte, []int) {
	return file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_rawDescGZIP(), []int{10}
}

func (x *GetNotifChannelResponse) GetInfo() *NotifChannel {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetNotifChannelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetNotifChannelsRequest) Reset() {
	*x = GetNotifChannelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNotifChannelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNotifChannelsRequest) ProtoMessage() {}

func (x *GetNotifChannelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNotifChannelsRequest.ProtoReflect.Descriptor instead.
func (*GetNotifChannelsRequest) Descriptor() ([]byte, []int) {
	return file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_rawDescGZIP(), []int{11}
}

func (x *GetNotifChannelsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetNotifChannelsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetNotifChannelsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetNotifChannelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*NotifChannel `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32          `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetNotifChannelsResponse) Reset() {
	*x = GetNotifChannelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNotifChannelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNotifChannelsResponse) ProtoMessage() {}

func (x *GetNotifChannelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNotifChannelsResponse.ProtoReflect.Descriptor instead.
func (*GetNotifChannelsResponse) Descriptor() ([]byte, []int) {
	return file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_rawDescGZIP(), []int{12}
}

func (x *GetNotifChannelsResponse) GetInfos() []*NotifChannel {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetNotifChannelsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetNotifChannelOnlyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *GetNotifChannelOnlyRequest) Reset() {
	*x = GetNotifChannelOnlyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNotifChannelOnlyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNotifChannelOnlyRequest) ProtoMessage() {}

func (x *GetNotifChannelOnlyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNotifChannelOnlyRequest.ProtoReflect.Descriptor instead.
func (*GetNotifChannelOnlyRequest) Descriptor() ([]byte, []int) {
	return file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_rawDescGZIP(), []int{13}
}

func (x *GetNotifChannelOnlyRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type GetNotifChannelOnlyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *NotifChannel `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetNotifChannelOnlyResponse) Reset() {
	*x = GetNotifChannelOnlyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNotifChannelOnlyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNotifChannelOnlyResponse) ProtoMessage() {}

func (x *GetNotifChannelOnlyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNotifChannelOnlyResponse.ProtoReflect.Descriptor instead.
func (*GetNotifChannelOnlyResponse) Descriptor() ([]byte, []int) {
	return file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_rawDescGZIP(), []int{14}
}

func (x *GetNotifChannelOnlyResponse) GetInfo() *NotifChannel {
	if x != nil {
		return x.Info
	}
	return nil
}

type ExistNotifChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ExistNotifChannelRequest) Reset() {
	*x = ExistNotifChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistNotifChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistNotifChannelRequest) ProtoMessage() {}

func (x *ExistNotifChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistNotifChannelRequest.ProtoReflect.Descriptor instead.
func (*ExistNotifChannelRequest) Descriptor() ([]byte, []int) {
	return file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_rawDescGZIP(), []int{15}
}

func (x *ExistNotifChannelRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ExistNotifChannelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistNotifChannelResponse) Reset() {
	*x = ExistNotifChannelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistNotifChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistNotifChannelResponse) ProtoMessage() {}

func (x *ExistNotifChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistNotifChannelResponse.ProtoReflect.Descriptor instead.
func (*ExistNotifChannelResponse) Descriptor() ([]byte, []int) {
	return file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_rawDescGZIP(), []int{16}
}

func (x *ExistNotifChannelResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type ExistNotifChannelCondsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *ExistNotifChannelCondsRequest) Reset() {
	*x = ExistNotifChannelCondsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistNotifChannelCondsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistNotifChannelCondsRequest) ProtoMessage() {}

func (x *ExistNotifChannelCondsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistNotifChannelCondsRequest.ProtoReflect.Descriptor instead.
func (*ExistNotifChannelCondsRequest) Descriptor() ([]byte, []int) {
	return file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_rawDescGZIP(), []int{17}
}

func (x *ExistNotifChannelCondsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type ExistNotifChannelCondsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistNotifChannelCondsResponse) Reset() {
	*x = ExistNotifChannelCondsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistNotifChannelCondsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistNotifChannelCondsResponse) ProtoMessage() {}

func (x *ExistNotifChannelCondsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistNotifChannelCondsResponse.ProtoReflect.Descriptor instead.
func (*ExistNotifChannelCondsResponse) Descriptor() ([]byte, []int) {
	return file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_rawDescGZIP(), []int{18}
}

func (x *ExistNotifChannelCondsResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type CountNotifChannelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *CountNotifChannelsRequest) Reset() {
	*x = CountNotifChannelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountNotifChannelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountNotifChannelsRequest) ProtoMessage() {}

func (x *CountNotifChannelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountNotifChannelsRequest.ProtoReflect.Descriptor instead.
func (*CountNotifChannelsRequest) Descriptor() ([]byte, []int) {
	return file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_rawDescGZIP(), []int{19}
}

func (x *CountNotifChannelsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type CountNotifChannelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info uint32 `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CountNotifChannelsResponse) Reset() {
	*x = CountNotifChannelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountNotifChannelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountNotifChannelsResponse) ProtoMessage() {}

func (x *CountNotifChannelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountNotifChannelsResponse.ProtoReflect.Descriptor instead.
func (*CountNotifChannelsResponse) Descriptor() ([]byte, []int) {
	return file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_rawDescGZIP(), []int{20}
}

func (x *CountNotifChannelsResponse) GetInfo() uint32 {
	if x != nil {
		return x.Info
	}
	return 0
}

type DeleteNotifChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *DeleteNotifChannelRequest) Reset() {
	*x = DeleteNotifChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNotifChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNotifChannelRequest) ProtoMessage() {}

func (x *DeleteNotifChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNotifChannelRequest.ProtoReflect.Descriptor instead.
func (*DeleteNotifChannelRequest) Descriptor() ([]byte, []int) {
	return file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteNotifChannelRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type DeleteNotifChannelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *NotifChannel `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteNotifChannelResponse) Reset() {
	*x = DeleteNotifChannelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNotifChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNotifChannelResponse) ProtoMessage() {}

func (x *DeleteNotifChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNotifChannelResponse.ProtoReflect.Descriptor instead.
func (*DeleteNotifChannelResponse) Descriptor() ([]byte, []int) {
	return file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteNotifChannelResponse) GetInfo() *NotifChannel {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto protoreflect.FileDescriptor

var file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_rawDesc = []byte{
	0x0a, 0x38, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2f, 0x6d, 0x67,
	0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x31, 0x2e, 0x76, 0x31,
	0x1a, 0x29, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x74, 0x68, 0x69, 0x72, 0x64, 0x2f, 0x6d, 0x67,
	0x72, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x64, 0x66, 0x6f, 0x72, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x64, 0x66, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x6e, 0x70, 0x6f,
	0x6f, 0x6c, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2f, 0x6d, 0x67, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6e, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf9, 0x01, 0x0a, 0x0f, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x09,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x75, 0x73, 0x65, 0x64, 0x66, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x64, 0x46,
	0x6f, 0x72, 0x48, 0x02, 0x52, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x45, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x48, 0x03, 0x52, 0x07, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x41, 0x70, 0x70, 0x49, 0x44, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x22, 0xf3, 0x01, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x3f, 0x0a, 0x09, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21,
	0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x75,
	0x73, 0x65, 0x64, 0x66, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x64, 0x46, 0x6f,
	0x72, 0x52, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x07,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1c,
	0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xf8, 0x01, 0x0a, 0x05, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x2e,
	0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x48, 0x01, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x36,
	0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x02, 0x52, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x03, 0x52, 0x07,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49,
	0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x41, 0x70, 0x70, 0x49, 0x44, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x66, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x49, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x64, 0x0a,
	0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x31, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x69, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x4b, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x67,
	0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a,
	0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x31,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x66, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x64, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x31, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x28, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22,
	0x61, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x31, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x8a, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41,
	0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x31, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22,
	0x7a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x31, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x05,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x5f, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x6e,
	0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x05, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x31, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x65, 0x0a, 0x1b,
	0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f,
	0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x31, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x2a, 0x0a, 0x18, 0x45, 0x78, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22,
	0x2f, 0x0a, 0x19, 0x45, 0x78, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x62, 0x0a, 0x1d, 0x45, 0x78, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x41, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x22, 0x34, 0x0a, 0x1e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5e, 0x0a, 0x19, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x30, 0x0a, 0x1a, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2b, 0x0a, 0x19,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x64, 0x0a, 0x1a, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x32,
	0xa1, 0x0c, 0x0a, 0x07, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x99, 0x01, 0x0a, 0x12,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x3f, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9c, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12,
	0x40, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x41, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x99, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x3f, 0x2e,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x31, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40,
	0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x90, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x3c, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9c, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x40, 0x2e,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x31, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x41, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x93, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x3d, 0x2e, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x31, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x31, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x96, 0x01, 0x0a, 0x11, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x3e, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3f, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0xa5, 0x01, 0x0a, 0x16, 0x45, 0x78, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x43,
	0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x64,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x99, 0x01, 0x0a, 0x12,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x12, 0x3f, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x99, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x3f,
	0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x40, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x42, 0x48, 0x5a, 0x46, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x2f, 0x6d, 0x67, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_rawDescOnce sync.Once
	file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_rawDescData = file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_rawDesc
)

func file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_rawDescGZIP() []byte {
	file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_rawDescOnce.Do(func() {
		file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_rawDescData)
	})
	return file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_rawDescData
}

var file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_goTypes = []interface{}{
	(*NotifChannelReq)(nil),                // 0: notif.manager.notif.notifchannel1.v1.NotifChannelReq
	(*NotifChannel)(nil),                   // 1: notif.manager.notif.notifchannel1.v1.NotifChannel
	(*Conds)(nil),                          // 2: notif.manager.notif.notifchannel1.v1.Conds
	(*CreateNotifChannelRequest)(nil),      // 3: notif.manager.notif.notifchannel1.v1.CreateNotifChannelRequest
	(*CreateNotifChannelResponse)(nil),     // 4: notif.manager.notif.notifchannel1.v1.CreateNotifChannelResponse
	(*CreateNotifChannelsRequest)(nil),     // 5: notif.manager.notif.notifchannel1.v1.CreateNotifChannelsRequest
	(*CreateNotifChannelsResponse)(nil),    // 6: notif.manager.notif.notifchannel1.v1.CreateNotifChannelsResponse
	(*UpdateNotifChannelRequest)(nil),      // 7: notif.manager.notif.notifchannel1.v1.UpdateNotifChannelRequest
	(*UpdateNotifChannelResponse)(nil),     // 8: notif.manager.notif.notifchannel1.v1.UpdateNotifChannelResponse
	(*GetNotifChannelRequest)(nil),         // 9: notif.manager.notif.notifchannel1.v1.GetNotifChannelRequest
	(*GetNotifChannelResponse)(nil),        // 10: notif.manager.notif.notifchannel1.v1.GetNotifChannelResponse
	(*GetNotifChannelsRequest)(nil),        // 11: notif.manager.notif.notifchannel1.v1.GetNotifChannelsRequest
	(*GetNotifChannelsResponse)(nil),       // 12: notif.manager.notif.notifchannel1.v1.GetNotifChannelsResponse
	(*GetNotifChannelOnlyRequest)(nil),     // 13: notif.manager.notif.notifchannel1.v1.GetNotifChannelOnlyRequest
	(*GetNotifChannelOnlyResponse)(nil),    // 14: notif.manager.notif.notifchannel1.v1.GetNotifChannelOnlyResponse
	(*ExistNotifChannelRequest)(nil),       // 15: notif.manager.notif.notifchannel1.v1.ExistNotifChannelRequest
	(*ExistNotifChannelResponse)(nil),      // 16: notif.manager.notif.notifchannel1.v1.ExistNotifChannelResponse
	(*ExistNotifChannelCondsRequest)(nil),  // 17: notif.manager.notif.notifchannel1.v1.ExistNotifChannelCondsRequest
	(*ExistNotifChannelCondsResponse)(nil), // 18: notif.manager.notif.notifchannel1.v1.ExistNotifChannelCondsResponse
	(*CountNotifChannelsRequest)(nil),      // 19: notif.manager.notif.notifchannel1.v1.CountNotifChannelsRequest
	(*CountNotifChannelsResponse)(nil),     // 20: notif.manager.notif.notifchannel1.v1.CountNotifChannelsResponse
	(*DeleteNotifChannelRequest)(nil),      // 21: notif.manager.notif.notifchannel1.v1.DeleteNotifChannelRequest
	(*DeleteNotifChannelResponse)(nil),     // 22: notif.manager.notif.notifchannel1.v1.DeleteNotifChannelResponse
	(usedfor.UsedFor)(0),                   // 23: third.manager.usedfor.v1.UsedFor
	(channel.NotifChannel)(0),              // 24: notif.manager.channel.v1.NotifChannel
	(*npool.StringVal)(nil),                // 25: npool.v1.StringVal
	(*npool.Uint32Val)(nil),                // 26: npool.v1.Uint32Val
}
var file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_depIdxs = []int32{
	23, // 0: notif.manager.notif.notifchannel1.v1.NotifChannelReq.EventType:type_name -> third.manager.usedfor.v1.UsedFor
	24, // 1: notif.manager.notif.notifchannel1.v1.NotifChannelReq.Channel:type_name -> notif.manager.channel.v1.NotifChannel
	23, // 2: notif.manager.notif.notifchannel1.v1.NotifChannel.EventType:type_name -> third.manager.usedfor.v1.UsedFor
	24, // 3: notif.manager.notif.notifchannel1.v1.NotifChannel.Channel:type_name -> notif.manager.channel.v1.NotifChannel
	25, // 4: notif.manager.notif.notifchannel1.v1.Conds.ID:type_name -> npool.v1.StringVal
	25, // 5: notif.manager.notif.notifchannel1.v1.Conds.AppID:type_name -> npool.v1.StringVal
	26, // 6: notif.manager.notif.notifchannel1.v1.Conds.EventType:type_name -> npool.v1.Uint32Val
	26, // 7: notif.manager.notif.notifchannel1.v1.Conds.Channel:type_name -> npool.v1.Uint32Val
	0,  // 8: notif.manager.notif.notifchannel1.v1.CreateNotifChannelRequest.Info:type_name -> notif.manager.notif.notifchannel1.v1.NotifChannelReq
	1,  // 9: notif.manager.notif.notifchannel1.v1.CreateNotifChannelResponse.Info:type_name -> notif.manager.notif.notifchannel1.v1.NotifChannel
	0,  // 10: notif.manager.notif.notifchannel1.v1.CreateNotifChannelsRequest.Infos:type_name -> notif.manager.notif.notifchannel1.v1.NotifChannelReq
	1,  // 11: notif.manager.notif.notifchannel1.v1.CreateNotifChannelsResponse.Infos:type_name -> notif.manager.notif.notifchannel1.v1.NotifChannel
	0,  // 12: notif.manager.notif.notifchannel1.v1.UpdateNotifChannelRequest.Info:type_name -> notif.manager.notif.notifchannel1.v1.NotifChannelReq
	1,  // 13: notif.manager.notif.notifchannel1.v1.UpdateNotifChannelResponse.Info:type_name -> notif.manager.notif.notifchannel1.v1.NotifChannel
	1,  // 14: notif.manager.notif.notifchannel1.v1.GetNotifChannelResponse.Info:type_name -> notif.manager.notif.notifchannel1.v1.NotifChannel
	2,  // 15: notif.manager.notif.notifchannel1.v1.GetNotifChannelsRequest.Conds:type_name -> notif.manager.notif.notifchannel1.v1.Conds
	1,  // 16: notif.manager.notif.notifchannel1.v1.GetNotifChannelsResponse.Infos:type_name -> notif.manager.notif.notifchannel1.v1.NotifChannel
	2,  // 17: notif.manager.notif.notifchannel1.v1.GetNotifChannelOnlyRequest.Conds:type_name -> notif.manager.notif.notifchannel1.v1.Conds
	1,  // 18: notif.manager.notif.notifchannel1.v1.GetNotifChannelOnlyResponse.Info:type_name -> notif.manager.notif.notifchannel1.v1.NotifChannel
	2,  // 19: notif.manager.notif.notifchannel1.v1.ExistNotifChannelCondsRequest.Conds:type_name -> notif.manager.notif.notifchannel1.v1.Conds
	2,  // 20: notif.manager.notif.notifchannel1.v1.CountNotifChannelsRequest.Conds:type_name -> notif.manager.notif.notifchannel1.v1.Conds
	1,  // 21: notif.manager.notif.notifchannel1.v1.DeleteNotifChannelResponse.Info:type_name -> notif.manager.notif.notifchannel1.v1.NotifChannel
	3,  // 22: notif.manager.notif.notifchannel1.v1.Manager.CreateNotifChannel:input_type -> notif.manager.notif.notifchannel1.v1.CreateNotifChannelRequest
	5,  // 23: notif.manager.notif.notifchannel1.v1.Manager.CreateNotifChannels:input_type -> notif.manager.notif.notifchannel1.v1.CreateNotifChannelsRequest
	7,  // 24: notif.manager.notif.notifchannel1.v1.Manager.UpdateNotifChannel:input_type -> notif.manager.notif.notifchannel1.v1.UpdateNotifChannelRequest
	9,  // 25: notif.manager.notif.notifchannel1.v1.Manager.GetNotifChannel:input_type -> notif.manager.notif.notifchannel1.v1.GetNotifChannelRequest
	13, // 26: notif.manager.notif.notifchannel1.v1.Manager.GetNotifChannelOnly:input_type -> notif.manager.notif.notifchannel1.v1.GetNotifChannelOnlyRequest
	11, // 27: notif.manager.notif.notifchannel1.v1.Manager.GetNotifChannels:input_type -> notif.manager.notif.notifchannel1.v1.GetNotifChannelsRequest
	15, // 28: notif.manager.notif.notifchannel1.v1.Manager.ExistNotifChannel:input_type -> notif.manager.notif.notifchannel1.v1.ExistNotifChannelRequest
	17, // 29: notif.manager.notif.notifchannel1.v1.Manager.ExistNotifChannelConds:input_type -> notif.manager.notif.notifchannel1.v1.ExistNotifChannelCondsRequest
	19, // 30: notif.manager.notif.notifchannel1.v1.Manager.CountNotifChannels:input_type -> notif.manager.notif.notifchannel1.v1.CountNotifChannelsRequest
	21, // 31: notif.manager.notif.notifchannel1.v1.Manager.DeleteNotifChannel:input_type -> notif.manager.notif.notifchannel1.v1.DeleteNotifChannelRequest
	4,  // 32: notif.manager.notif.notifchannel1.v1.Manager.CreateNotifChannel:output_type -> notif.manager.notif.notifchannel1.v1.CreateNotifChannelResponse
	6,  // 33: notif.manager.notif.notifchannel1.v1.Manager.CreateNotifChannels:output_type -> notif.manager.notif.notifchannel1.v1.CreateNotifChannelsResponse
	8,  // 34: notif.manager.notif.notifchannel1.v1.Manager.UpdateNotifChannel:output_type -> notif.manager.notif.notifchannel1.v1.UpdateNotifChannelResponse
	10, // 35: notif.manager.notif.notifchannel1.v1.Manager.GetNotifChannel:output_type -> notif.manager.notif.notifchannel1.v1.GetNotifChannelResponse
	14, // 36: notif.manager.notif.notifchannel1.v1.Manager.GetNotifChannelOnly:output_type -> notif.manager.notif.notifchannel1.v1.GetNotifChannelOnlyResponse
	12, // 37: notif.manager.notif.notifchannel1.v1.Manager.GetNotifChannels:output_type -> notif.manager.notif.notifchannel1.v1.GetNotifChannelsResponse
	16, // 38: notif.manager.notif.notifchannel1.v1.Manager.ExistNotifChannel:output_type -> notif.manager.notif.notifchannel1.v1.ExistNotifChannelResponse
	18, // 39: notif.manager.notif.notifchannel1.v1.Manager.ExistNotifChannelConds:output_type -> notif.manager.notif.notifchannel1.v1.ExistNotifChannelCondsResponse
	20, // 40: notif.manager.notif.notifchannel1.v1.Manager.CountNotifChannels:output_type -> notif.manager.notif.notifchannel1.v1.CountNotifChannelsResponse
	22, // 41: notif.manager.notif.notifchannel1.v1.Manager.DeleteNotifChannel:output_type -> notif.manager.notif.notifchannel1.v1.DeleteNotifChannelResponse
	32, // [32:42] is the sub-list for method output_type
	22, // [22:32] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_init() }
func file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_init() {
	if File_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifChannelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNotifChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNotifChannelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNotifChannelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNotifChannelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNotifChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNotifChannelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNotifChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNotifChannelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNotifChannelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNotifChannelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNotifChannelOnlyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNotifChannelOnlyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistNotifChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistNotifChannelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistNotifChannelCondsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistNotifChannelCondsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountNotifChannelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountNotifChannelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNotifChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNotifChannelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_goTypes,
		DependencyIndexes: file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_depIdxs,
		MessageInfos:      file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_msgTypes,
	}.Build()
	File_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto = out.File
	file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_rawDesc = nil
	file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_goTypes = nil
	file_npool_notif_mgr_v1_notif_notifchannel_notifchannel_proto_depIdxs = nil
}
