// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/notif/mgr/v1/notif/notifchannel/notifchannel.proto

package notifchannel

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateNotifChannel(ctx context.Context, in *CreateNotifChannelRequest, opts ...grpc.CallOption) (*CreateNotifChannelResponse, error)
	CreateNotifChannels(ctx context.Context, in *CreateNotifChannelsRequest, opts ...grpc.CallOption) (*CreateNotifChannelsResponse, error)
	UpdateNotifChannel(ctx context.Context, in *UpdateNotifChannelRequest, opts ...grpc.CallOption) (*UpdateNotifChannelResponse, error)
	GetNotifChannel(ctx context.Context, in *GetNotifChannelRequest, opts ...grpc.CallOption) (*GetNotifChannelResponse, error)
	GetNotifChannelOnly(ctx context.Context, in *GetNotifChannelOnlyRequest, opts ...grpc.CallOption) (*GetNotifChannelOnlyResponse, error)
	GetNotifChannels(ctx context.Context, in *GetNotifChannelsRequest, opts ...grpc.CallOption) (*GetNotifChannelsResponse, error)
	ExistNotifChannel(ctx context.Context, in *ExistNotifChannelRequest, opts ...grpc.CallOption) (*ExistNotifChannelResponse, error)
	ExistNotifChannelConds(ctx context.Context, in *ExistNotifChannelCondsRequest, opts ...grpc.CallOption) (*ExistNotifChannelCondsResponse, error)
	CountNotifChannels(ctx context.Context, in *CountNotifChannelsRequest, opts ...grpc.CallOption) (*CountNotifChannelsResponse, error)
	DeleteNotifChannel(ctx context.Context, in *DeleteNotifChannelRequest, opts ...grpc.CallOption) (*DeleteNotifChannelResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateNotifChannel(ctx context.Context, in *CreateNotifChannelRequest, opts ...grpc.CallOption) (*CreateNotifChannelResponse, error) {
	out := new(CreateNotifChannelResponse)
	err := c.cc.Invoke(ctx, "/notif.manager.notif.notifchannel1.v1.Manager/CreateNotifChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateNotifChannels(ctx context.Context, in *CreateNotifChannelsRequest, opts ...grpc.CallOption) (*CreateNotifChannelsResponse, error) {
	out := new(CreateNotifChannelsResponse)
	err := c.cc.Invoke(ctx, "/notif.manager.notif.notifchannel1.v1.Manager/CreateNotifChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateNotifChannel(ctx context.Context, in *UpdateNotifChannelRequest, opts ...grpc.CallOption) (*UpdateNotifChannelResponse, error) {
	out := new(UpdateNotifChannelResponse)
	err := c.cc.Invoke(ctx, "/notif.manager.notif.notifchannel1.v1.Manager/UpdateNotifChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetNotifChannel(ctx context.Context, in *GetNotifChannelRequest, opts ...grpc.CallOption) (*GetNotifChannelResponse, error) {
	out := new(GetNotifChannelResponse)
	err := c.cc.Invoke(ctx, "/notif.manager.notif.notifchannel1.v1.Manager/GetNotifChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetNotifChannelOnly(ctx context.Context, in *GetNotifChannelOnlyRequest, opts ...grpc.CallOption) (*GetNotifChannelOnlyResponse, error) {
	out := new(GetNotifChannelOnlyResponse)
	err := c.cc.Invoke(ctx, "/notif.manager.notif.notifchannel1.v1.Manager/GetNotifChannelOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetNotifChannels(ctx context.Context, in *GetNotifChannelsRequest, opts ...grpc.CallOption) (*GetNotifChannelsResponse, error) {
	out := new(GetNotifChannelsResponse)
	err := c.cc.Invoke(ctx, "/notif.manager.notif.notifchannel1.v1.Manager/GetNotifChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistNotifChannel(ctx context.Context, in *ExistNotifChannelRequest, opts ...grpc.CallOption) (*ExistNotifChannelResponse, error) {
	out := new(ExistNotifChannelResponse)
	err := c.cc.Invoke(ctx, "/notif.manager.notif.notifchannel1.v1.Manager/ExistNotifChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistNotifChannelConds(ctx context.Context, in *ExistNotifChannelCondsRequest, opts ...grpc.CallOption) (*ExistNotifChannelCondsResponse, error) {
	out := new(ExistNotifChannelCondsResponse)
	err := c.cc.Invoke(ctx, "/notif.manager.notif.notifchannel1.v1.Manager/ExistNotifChannelConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CountNotifChannels(ctx context.Context, in *CountNotifChannelsRequest, opts ...grpc.CallOption) (*CountNotifChannelsResponse, error) {
	out := new(CountNotifChannelsResponse)
	err := c.cc.Invoke(ctx, "/notif.manager.notif.notifchannel1.v1.Manager/CountNotifChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteNotifChannel(ctx context.Context, in *DeleteNotifChannelRequest, opts ...grpc.CallOption) (*DeleteNotifChannelResponse, error) {
	out := new(DeleteNotifChannelResponse)
	err := c.cc.Invoke(ctx, "/notif.manager.notif.notifchannel1.v1.Manager/DeleteNotifChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateNotifChannel(context.Context, *CreateNotifChannelRequest) (*CreateNotifChannelResponse, error)
	CreateNotifChannels(context.Context, *CreateNotifChannelsRequest) (*CreateNotifChannelsResponse, error)
	UpdateNotifChannel(context.Context, *UpdateNotifChannelRequest) (*UpdateNotifChannelResponse, error)
	GetNotifChannel(context.Context, *GetNotifChannelRequest) (*GetNotifChannelResponse, error)
	GetNotifChannelOnly(context.Context, *GetNotifChannelOnlyRequest) (*GetNotifChannelOnlyResponse, error)
	GetNotifChannels(context.Context, *GetNotifChannelsRequest) (*GetNotifChannelsResponse, error)
	ExistNotifChannel(context.Context, *ExistNotifChannelRequest) (*ExistNotifChannelResponse, error)
	ExistNotifChannelConds(context.Context, *ExistNotifChannelCondsRequest) (*ExistNotifChannelCondsResponse, error)
	CountNotifChannels(context.Context, *CountNotifChannelsRequest) (*CountNotifChannelsResponse, error)
	DeleteNotifChannel(context.Context, *DeleteNotifChannelRequest) (*DeleteNotifChannelResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateNotifChannel(context.Context, *CreateNotifChannelRequest) (*CreateNotifChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotifChannel not implemented")
}
func (UnimplementedManagerServer) CreateNotifChannels(context.Context, *CreateNotifChannelsRequest) (*CreateNotifChannelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotifChannels not implemented")
}
func (UnimplementedManagerServer) UpdateNotifChannel(context.Context, *UpdateNotifChannelRequest) (*UpdateNotifChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotifChannel not implemented")
}
func (UnimplementedManagerServer) GetNotifChannel(context.Context, *GetNotifChannelRequest) (*GetNotifChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotifChannel not implemented")
}
func (UnimplementedManagerServer) GetNotifChannelOnly(context.Context, *GetNotifChannelOnlyRequest) (*GetNotifChannelOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotifChannelOnly not implemented")
}
func (UnimplementedManagerServer) GetNotifChannels(context.Context, *GetNotifChannelsRequest) (*GetNotifChannelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotifChannels not implemented")
}
func (UnimplementedManagerServer) ExistNotifChannel(context.Context, *ExistNotifChannelRequest) (*ExistNotifChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistNotifChannel not implemented")
}
func (UnimplementedManagerServer) ExistNotifChannelConds(context.Context, *ExistNotifChannelCondsRequest) (*ExistNotifChannelCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistNotifChannelConds not implemented")
}
func (UnimplementedManagerServer) CountNotifChannels(context.Context, *CountNotifChannelsRequest) (*CountNotifChannelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountNotifChannels not implemented")
}
func (UnimplementedManagerServer) DeleteNotifChannel(context.Context, *DeleteNotifChannelRequest) (*DeleteNotifChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNotifChannel not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateNotifChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNotifChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateNotifChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.manager.notif.notifchannel1.v1.Manager/CreateNotifChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateNotifChannel(ctx, req.(*CreateNotifChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateNotifChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNotifChannelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateNotifChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.manager.notif.notifchannel1.v1.Manager/CreateNotifChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateNotifChannels(ctx, req.(*CreateNotifChannelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateNotifChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNotifChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateNotifChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.manager.notif.notifchannel1.v1.Manager/UpdateNotifChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateNotifChannel(ctx, req.(*UpdateNotifChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetNotifChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotifChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetNotifChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.manager.notif.notifchannel1.v1.Manager/GetNotifChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetNotifChannel(ctx, req.(*GetNotifChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetNotifChannelOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotifChannelOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetNotifChannelOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.manager.notif.notifchannel1.v1.Manager/GetNotifChannelOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetNotifChannelOnly(ctx, req.(*GetNotifChannelOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetNotifChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotifChannelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetNotifChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.manager.notif.notifchannel1.v1.Manager/GetNotifChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetNotifChannels(ctx, req.(*GetNotifChannelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistNotifChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistNotifChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistNotifChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.manager.notif.notifchannel1.v1.Manager/ExistNotifChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistNotifChannel(ctx, req.(*ExistNotifChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistNotifChannelConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistNotifChannelCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistNotifChannelConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.manager.notif.notifchannel1.v1.Manager/ExistNotifChannelConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistNotifChannelConds(ctx, req.(*ExistNotifChannelCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CountNotifChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountNotifChannelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CountNotifChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.manager.notif.notifchannel1.v1.Manager/CountNotifChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CountNotifChannels(ctx, req.(*CountNotifChannelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteNotifChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNotifChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteNotifChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.manager.notif.notifchannel1.v1.Manager/DeleteNotifChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteNotifChannel(ctx, req.(*DeleteNotifChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notif.manager.notif.notifchannel1.v1.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNotifChannel",
			Handler:    _Manager_CreateNotifChannel_Handler,
		},
		{
			MethodName: "CreateNotifChannels",
			Handler:    _Manager_CreateNotifChannels_Handler,
		},
		{
			MethodName: "UpdateNotifChannel",
			Handler:    _Manager_UpdateNotifChannel_Handler,
		},
		{
			MethodName: "GetNotifChannel",
			Handler:    _Manager_GetNotifChannel_Handler,
		},
		{
			MethodName: "GetNotifChannelOnly",
			Handler:    _Manager_GetNotifChannelOnly_Handler,
		},
		{
			MethodName: "GetNotifChannels",
			Handler:    _Manager_GetNotifChannels_Handler,
		},
		{
			MethodName: "ExistNotifChannel",
			Handler:    _Manager_ExistNotifChannel_Handler,
		},
		{
			MethodName: "ExistNotifChannelConds",
			Handler:    _Manager_ExistNotifChannelConds_Handler,
		},
		{
			MethodName: "CountNotifChannels",
			Handler:    _Manager_CountNotifChannels_Handler,
		},
		{
			MethodName: "DeleteNotifChannel",
			Handler:    _Manager_DeleteNotifChannel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/notif/mgr/v1/notif/notifchannel/notifchannel.proto",
}
