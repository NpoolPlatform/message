// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/notif/mgr/v1/announcement/readannouncement/readannouncement.proto

package readannouncement

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateReadAnnouncement(ctx context.Context, in *CreateReadAnnouncementRequest, opts ...grpc.CallOption) (*CreateReadAnnouncementResponse, error)
	CreateReadAnnouncements(ctx context.Context, in *CreateReadAnnouncementsRequest, opts ...grpc.CallOption) (*CreateReadAnnouncementsResponse, error)
	UpdateReadAnnouncement(ctx context.Context, in *UpdateReadAnnouncementRequest, opts ...grpc.CallOption) (*UpdateReadAnnouncementResponse, error)
	GetReadAnnouncement(ctx context.Context, in *GetReadAnnouncementRequest, opts ...grpc.CallOption) (*GetReadAnnouncementResponse, error)
	GetReadAnnouncementOnly(ctx context.Context, in *GetReadAnnouncementOnlyRequest, opts ...grpc.CallOption) (*GetReadAnnouncementOnlyResponse, error)
	GetReadAnnouncements(ctx context.Context, in *GetReadAnnouncementsRequest, opts ...grpc.CallOption) (*GetReadAnnouncementsResponse, error)
	ExistReadAnnouncement(ctx context.Context, in *ExistReadAnnouncementRequest, opts ...grpc.CallOption) (*ExistReadAnnouncementResponse, error)
	ExistReadAnnouncementConds(ctx context.Context, in *ExistReadAnnouncementCondsRequest, opts ...grpc.CallOption) (*ExistReadAnnouncementCondsResponse, error)
	CountReadAnnouncements(ctx context.Context, in *CountReadAnnouncementsRequest, opts ...grpc.CallOption) (*CountReadAnnouncementsResponse, error)
	DeleteReadAnnouncement(ctx context.Context, in *DeleteReadAnnouncementRequest, opts ...grpc.CallOption) (*DeleteReadAnnouncementResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateReadAnnouncement(ctx context.Context, in *CreateReadAnnouncementRequest, opts ...grpc.CallOption) (*CreateReadAnnouncementResponse, error) {
	out := new(CreateReadAnnouncementResponse)
	err := c.cc.Invoke(ctx, "/notif.manager.readannouncement.v1.Manager/CreateReadAnnouncement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateReadAnnouncements(ctx context.Context, in *CreateReadAnnouncementsRequest, opts ...grpc.CallOption) (*CreateReadAnnouncementsResponse, error) {
	out := new(CreateReadAnnouncementsResponse)
	err := c.cc.Invoke(ctx, "/notif.manager.readannouncement.v1.Manager/CreateReadAnnouncements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateReadAnnouncement(ctx context.Context, in *UpdateReadAnnouncementRequest, opts ...grpc.CallOption) (*UpdateReadAnnouncementResponse, error) {
	out := new(UpdateReadAnnouncementResponse)
	err := c.cc.Invoke(ctx, "/notif.manager.readannouncement.v1.Manager/UpdateReadAnnouncement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetReadAnnouncement(ctx context.Context, in *GetReadAnnouncementRequest, opts ...grpc.CallOption) (*GetReadAnnouncementResponse, error) {
	out := new(GetReadAnnouncementResponse)
	err := c.cc.Invoke(ctx, "/notif.manager.readannouncement.v1.Manager/GetReadAnnouncement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetReadAnnouncementOnly(ctx context.Context, in *GetReadAnnouncementOnlyRequest, opts ...grpc.CallOption) (*GetReadAnnouncementOnlyResponse, error) {
	out := new(GetReadAnnouncementOnlyResponse)
	err := c.cc.Invoke(ctx, "/notif.manager.readannouncement.v1.Manager/GetReadAnnouncementOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetReadAnnouncements(ctx context.Context, in *GetReadAnnouncementsRequest, opts ...grpc.CallOption) (*GetReadAnnouncementsResponse, error) {
	out := new(GetReadAnnouncementsResponse)
	err := c.cc.Invoke(ctx, "/notif.manager.readannouncement.v1.Manager/GetReadAnnouncements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistReadAnnouncement(ctx context.Context, in *ExistReadAnnouncementRequest, opts ...grpc.CallOption) (*ExistReadAnnouncementResponse, error) {
	out := new(ExistReadAnnouncementResponse)
	err := c.cc.Invoke(ctx, "/notif.manager.readannouncement.v1.Manager/ExistReadAnnouncement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistReadAnnouncementConds(ctx context.Context, in *ExistReadAnnouncementCondsRequest, opts ...grpc.CallOption) (*ExistReadAnnouncementCondsResponse, error) {
	out := new(ExistReadAnnouncementCondsResponse)
	err := c.cc.Invoke(ctx, "/notif.manager.readannouncement.v1.Manager/ExistReadAnnouncementConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CountReadAnnouncements(ctx context.Context, in *CountReadAnnouncementsRequest, opts ...grpc.CallOption) (*CountReadAnnouncementsResponse, error) {
	out := new(CountReadAnnouncementsResponse)
	err := c.cc.Invoke(ctx, "/notif.manager.readannouncement.v1.Manager/CountReadAnnouncements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteReadAnnouncement(ctx context.Context, in *DeleteReadAnnouncementRequest, opts ...grpc.CallOption) (*DeleteReadAnnouncementResponse, error) {
	out := new(DeleteReadAnnouncementResponse)
	err := c.cc.Invoke(ctx, "/notif.manager.readannouncement.v1.Manager/DeleteReadAnnouncement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateReadAnnouncement(context.Context, *CreateReadAnnouncementRequest) (*CreateReadAnnouncementResponse, error)
	CreateReadAnnouncements(context.Context, *CreateReadAnnouncementsRequest) (*CreateReadAnnouncementsResponse, error)
	UpdateReadAnnouncement(context.Context, *UpdateReadAnnouncementRequest) (*UpdateReadAnnouncementResponse, error)
	GetReadAnnouncement(context.Context, *GetReadAnnouncementRequest) (*GetReadAnnouncementResponse, error)
	GetReadAnnouncementOnly(context.Context, *GetReadAnnouncementOnlyRequest) (*GetReadAnnouncementOnlyResponse, error)
	GetReadAnnouncements(context.Context, *GetReadAnnouncementsRequest) (*GetReadAnnouncementsResponse, error)
	ExistReadAnnouncement(context.Context, *ExistReadAnnouncementRequest) (*ExistReadAnnouncementResponse, error)
	ExistReadAnnouncementConds(context.Context, *ExistReadAnnouncementCondsRequest) (*ExistReadAnnouncementCondsResponse, error)
	CountReadAnnouncements(context.Context, *CountReadAnnouncementsRequest) (*CountReadAnnouncementsResponse, error)
	DeleteReadAnnouncement(context.Context, *DeleteReadAnnouncementRequest) (*DeleteReadAnnouncementResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateReadAnnouncement(context.Context, *CreateReadAnnouncementRequest) (*CreateReadAnnouncementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReadAnnouncement not implemented")
}
func (UnimplementedManagerServer) CreateReadAnnouncements(context.Context, *CreateReadAnnouncementsRequest) (*CreateReadAnnouncementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReadAnnouncements not implemented")
}
func (UnimplementedManagerServer) UpdateReadAnnouncement(context.Context, *UpdateReadAnnouncementRequest) (*UpdateReadAnnouncementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReadAnnouncement not implemented")
}
func (UnimplementedManagerServer) GetReadAnnouncement(context.Context, *GetReadAnnouncementRequest) (*GetReadAnnouncementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReadAnnouncement not implemented")
}
func (UnimplementedManagerServer) GetReadAnnouncementOnly(context.Context, *GetReadAnnouncementOnlyRequest) (*GetReadAnnouncementOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReadAnnouncementOnly not implemented")
}
func (UnimplementedManagerServer) GetReadAnnouncements(context.Context, *GetReadAnnouncementsRequest) (*GetReadAnnouncementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReadAnnouncements not implemented")
}
func (UnimplementedManagerServer) ExistReadAnnouncement(context.Context, *ExistReadAnnouncementRequest) (*ExistReadAnnouncementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistReadAnnouncement not implemented")
}
func (UnimplementedManagerServer) ExistReadAnnouncementConds(context.Context, *ExistReadAnnouncementCondsRequest) (*ExistReadAnnouncementCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistReadAnnouncementConds not implemented")
}
func (UnimplementedManagerServer) CountReadAnnouncements(context.Context, *CountReadAnnouncementsRequest) (*CountReadAnnouncementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountReadAnnouncements not implemented")
}
func (UnimplementedManagerServer) DeleteReadAnnouncement(context.Context, *DeleteReadAnnouncementRequest) (*DeleteReadAnnouncementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReadAnnouncement not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateReadAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReadAnnouncementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateReadAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.manager.readannouncement.v1.Manager/CreateReadAnnouncement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateReadAnnouncement(ctx, req.(*CreateReadAnnouncementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateReadAnnouncements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReadAnnouncementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateReadAnnouncements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.manager.readannouncement.v1.Manager/CreateReadAnnouncements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateReadAnnouncements(ctx, req.(*CreateReadAnnouncementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateReadAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReadAnnouncementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateReadAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.manager.readannouncement.v1.Manager/UpdateReadAnnouncement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateReadAnnouncement(ctx, req.(*UpdateReadAnnouncementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetReadAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReadAnnouncementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetReadAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.manager.readannouncement.v1.Manager/GetReadAnnouncement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetReadAnnouncement(ctx, req.(*GetReadAnnouncementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetReadAnnouncementOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReadAnnouncementOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetReadAnnouncementOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.manager.readannouncement.v1.Manager/GetReadAnnouncementOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetReadAnnouncementOnly(ctx, req.(*GetReadAnnouncementOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetReadAnnouncements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReadAnnouncementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetReadAnnouncements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.manager.readannouncement.v1.Manager/GetReadAnnouncements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetReadAnnouncements(ctx, req.(*GetReadAnnouncementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistReadAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistReadAnnouncementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistReadAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.manager.readannouncement.v1.Manager/ExistReadAnnouncement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistReadAnnouncement(ctx, req.(*ExistReadAnnouncementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistReadAnnouncementConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistReadAnnouncementCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistReadAnnouncementConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.manager.readannouncement.v1.Manager/ExistReadAnnouncementConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistReadAnnouncementConds(ctx, req.(*ExistReadAnnouncementCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CountReadAnnouncements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountReadAnnouncementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CountReadAnnouncements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.manager.readannouncement.v1.Manager/CountReadAnnouncements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CountReadAnnouncements(ctx, req.(*CountReadAnnouncementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteReadAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReadAnnouncementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteReadAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.manager.readannouncement.v1.Manager/DeleteReadAnnouncement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteReadAnnouncement(ctx, req.(*DeleteReadAnnouncementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notif.manager.readannouncement.v1.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateReadAnnouncement",
			Handler:    _Manager_CreateReadAnnouncement_Handler,
		},
		{
			MethodName: "CreateReadAnnouncements",
			Handler:    _Manager_CreateReadAnnouncements_Handler,
		},
		{
			MethodName: "UpdateReadAnnouncement",
			Handler:    _Manager_UpdateReadAnnouncement_Handler,
		},
		{
			MethodName: "GetReadAnnouncement",
			Handler:    _Manager_GetReadAnnouncement_Handler,
		},
		{
			MethodName: "GetReadAnnouncementOnly",
			Handler:    _Manager_GetReadAnnouncementOnly_Handler,
		},
		{
			MethodName: "GetReadAnnouncements",
			Handler:    _Manager_GetReadAnnouncements_Handler,
		},
		{
			MethodName: "ExistReadAnnouncement",
			Handler:    _Manager_ExistReadAnnouncement_Handler,
		},
		{
			MethodName: "ExistReadAnnouncementConds",
			Handler:    _Manager_ExistReadAnnouncementConds_Handler,
		},
		{
			MethodName: "CountReadAnnouncements",
			Handler:    _Manager_CountReadAnnouncements_Handler,
		},
		{
			MethodName: "DeleteReadAnnouncement",
			Handler:    _Manager_DeleteReadAnnouncement_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/notif/mgr/v1/announcement/readannouncement/readannouncement.proto",
}
