// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/notif/mgr/v1/announcement/readstate/readstate.proto

package readstate

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateReadState(ctx context.Context, in *CreateReadStateRequest, opts ...grpc.CallOption) (*CreateReadStateResponse, error)
	CreateReadStates(ctx context.Context, in *CreateReadStatesRequest, opts ...grpc.CallOption) (*CreateReadStatesResponse, error)
	UpdateReadState(ctx context.Context, in *UpdateReadStateRequest, opts ...grpc.CallOption) (*UpdateReadStateResponse, error)
	GetReadState(ctx context.Context, in *GetReadStateRequest, opts ...grpc.CallOption) (*GetReadStateResponse, error)
	GetReadStateOnly(ctx context.Context, in *GetReadStateOnlyRequest, opts ...grpc.CallOption) (*GetReadStateOnlyResponse, error)
	GetReadStates(ctx context.Context, in *GetReadStatesRequest, opts ...grpc.CallOption) (*GetReadStatesResponse, error)
	ExistReadState(ctx context.Context, in *ExistReadStateRequest, opts ...grpc.CallOption) (*ExistReadStateResponse, error)
	ExistReadStateConds(ctx context.Context, in *ExistReadStateCondsRequest, opts ...grpc.CallOption) (*ExistReadStateCondsResponse, error)
	CountReadStates(ctx context.Context, in *CountReadStatesRequest, opts ...grpc.CallOption) (*CountReadStatesResponse, error)
	DeleteReadState(ctx context.Context, in *DeleteReadStateRequest, opts ...grpc.CallOption) (*DeleteReadStateResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateReadState(ctx context.Context, in *CreateReadStateRequest, opts ...grpc.CallOption) (*CreateReadStateResponse, error) {
	out := new(CreateReadStateResponse)
	err := c.cc.Invoke(ctx, "/notif.manager.readstate.v1.Manager/CreateReadState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateReadStates(ctx context.Context, in *CreateReadStatesRequest, opts ...grpc.CallOption) (*CreateReadStatesResponse, error) {
	out := new(CreateReadStatesResponse)
	err := c.cc.Invoke(ctx, "/notif.manager.readstate.v1.Manager/CreateReadStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateReadState(ctx context.Context, in *UpdateReadStateRequest, opts ...grpc.CallOption) (*UpdateReadStateResponse, error) {
	out := new(UpdateReadStateResponse)
	err := c.cc.Invoke(ctx, "/notif.manager.readstate.v1.Manager/UpdateReadState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetReadState(ctx context.Context, in *GetReadStateRequest, opts ...grpc.CallOption) (*GetReadStateResponse, error) {
	out := new(GetReadStateResponse)
	err := c.cc.Invoke(ctx, "/notif.manager.readstate.v1.Manager/GetReadState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetReadStateOnly(ctx context.Context, in *GetReadStateOnlyRequest, opts ...grpc.CallOption) (*GetReadStateOnlyResponse, error) {
	out := new(GetReadStateOnlyResponse)
	err := c.cc.Invoke(ctx, "/notif.manager.readstate.v1.Manager/GetReadStateOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetReadStates(ctx context.Context, in *GetReadStatesRequest, opts ...grpc.CallOption) (*GetReadStatesResponse, error) {
	out := new(GetReadStatesResponse)
	err := c.cc.Invoke(ctx, "/notif.manager.readstate.v1.Manager/GetReadStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistReadState(ctx context.Context, in *ExistReadStateRequest, opts ...grpc.CallOption) (*ExistReadStateResponse, error) {
	out := new(ExistReadStateResponse)
	err := c.cc.Invoke(ctx, "/notif.manager.readstate.v1.Manager/ExistReadState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistReadStateConds(ctx context.Context, in *ExistReadStateCondsRequest, opts ...grpc.CallOption) (*ExistReadStateCondsResponse, error) {
	out := new(ExistReadStateCondsResponse)
	err := c.cc.Invoke(ctx, "/notif.manager.readstate.v1.Manager/ExistReadStateConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CountReadStates(ctx context.Context, in *CountReadStatesRequest, opts ...grpc.CallOption) (*CountReadStatesResponse, error) {
	out := new(CountReadStatesResponse)
	err := c.cc.Invoke(ctx, "/notif.manager.readstate.v1.Manager/CountReadStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteReadState(ctx context.Context, in *DeleteReadStateRequest, opts ...grpc.CallOption) (*DeleteReadStateResponse, error) {
	out := new(DeleteReadStateResponse)
	err := c.cc.Invoke(ctx, "/notif.manager.readstate.v1.Manager/DeleteReadState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateReadState(context.Context, *CreateReadStateRequest) (*CreateReadStateResponse, error)
	CreateReadStates(context.Context, *CreateReadStatesRequest) (*CreateReadStatesResponse, error)
	UpdateReadState(context.Context, *UpdateReadStateRequest) (*UpdateReadStateResponse, error)
	GetReadState(context.Context, *GetReadStateRequest) (*GetReadStateResponse, error)
	GetReadStateOnly(context.Context, *GetReadStateOnlyRequest) (*GetReadStateOnlyResponse, error)
	GetReadStates(context.Context, *GetReadStatesRequest) (*GetReadStatesResponse, error)
	ExistReadState(context.Context, *ExistReadStateRequest) (*ExistReadStateResponse, error)
	ExistReadStateConds(context.Context, *ExistReadStateCondsRequest) (*ExistReadStateCondsResponse, error)
	CountReadStates(context.Context, *CountReadStatesRequest) (*CountReadStatesResponse, error)
	DeleteReadState(context.Context, *DeleteReadStateRequest) (*DeleteReadStateResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateReadState(context.Context, *CreateReadStateRequest) (*CreateReadStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReadState not implemented")
}
func (UnimplementedManagerServer) CreateReadStates(context.Context, *CreateReadStatesRequest) (*CreateReadStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReadStates not implemented")
}
func (UnimplementedManagerServer) UpdateReadState(context.Context, *UpdateReadStateRequest) (*UpdateReadStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReadState not implemented")
}
func (UnimplementedManagerServer) GetReadState(context.Context, *GetReadStateRequest) (*GetReadStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReadState not implemented")
}
func (UnimplementedManagerServer) GetReadStateOnly(context.Context, *GetReadStateOnlyRequest) (*GetReadStateOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReadStateOnly not implemented")
}
func (UnimplementedManagerServer) GetReadStates(context.Context, *GetReadStatesRequest) (*GetReadStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReadStates not implemented")
}
func (UnimplementedManagerServer) ExistReadState(context.Context, *ExistReadStateRequest) (*ExistReadStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistReadState not implemented")
}
func (UnimplementedManagerServer) ExistReadStateConds(context.Context, *ExistReadStateCondsRequest) (*ExistReadStateCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistReadStateConds not implemented")
}
func (UnimplementedManagerServer) CountReadStates(context.Context, *CountReadStatesRequest) (*CountReadStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountReadStates not implemented")
}
func (UnimplementedManagerServer) DeleteReadState(context.Context, *DeleteReadStateRequest) (*DeleteReadStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReadState not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateReadState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReadStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateReadState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.manager.readstate.v1.Manager/CreateReadState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateReadState(ctx, req.(*CreateReadStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateReadStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReadStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateReadStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.manager.readstate.v1.Manager/CreateReadStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateReadStates(ctx, req.(*CreateReadStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateReadState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReadStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateReadState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.manager.readstate.v1.Manager/UpdateReadState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateReadState(ctx, req.(*UpdateReadStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetReadState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReadStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetReadState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.manager.readstate.v1.Manager/GetReadState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetReadState(ctx, req.(*GetReadStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetReadStateOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReadStateOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetReadStateOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.manager.readstate.v1.Manager/GetReadStateOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetReadStateOnly(ctx, req.(*GetReadStateOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetReadStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReadStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetReadStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.manager.readstate.v1.Manager/GetReadStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetReadStates(ctx, req.(*GetReadStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistReadState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistReadStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistReadState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.manager.readstate.v1.Manager/ExistReadState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistReadState(ctx, req.(*ExistReadStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistReadStateConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistReadStateCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistReadStateConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.manager.readstate.v1.Manager/ExistReadStateConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistReadStateConds(ctx, req.(*ExistReadStateCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CountReadStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountReadStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CountReadStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.manager.readstate.v1.Manager/CountReadStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CountReadStates(ctx, req.(*CountReadStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteReadState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReadStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteReadState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.manager.readstate.v1.Manager/DeleteReadState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteReadState(ctx, req.(*DeleteReadStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notif.manager.readstate.v1.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateReadState",
			Handler:    _Manager_CreateReadState_Handler,
		},
		{
			MethodName: "CreateReadStates",
			Handler:    _Manager_CreateReadStates_Handler,
		},
		{
			MethodName: "UpdateReadState",
			Handler:    _Manager_UpdateReadState_Handler,
		},
		{
			MethodName: "GetReadState",
			Handler:    _Manager_GetReadState_Handler,
		},
		{
			MethodName: "GetReadStateOnly",
			Handler:    _Manager_GetReadStateOnly_Handler,
		},
		{
			MethodName: "GetReadStates",
			Handler:    _Manager_GetReadStates_Handler,
		},
		{
			MethodName: "ExistReadState",
			Handler:    _Manager_ExistReadState_Handler,
		},
		{
			MethodName: "ExistReadStateConds",
			Handler:    _Manager_ExistReadStateConds_Handler,
		},
		{
			MethodName: "CountReadStates",
			Handler:    _Manager_CountReadStates_Handler,
		},
		{
			MethodName: "DeleteReadState",
			Handler:    _Manager_DeleteReadState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/notif/mgr/v1/announcement/readstate/readstate.proto",
}
