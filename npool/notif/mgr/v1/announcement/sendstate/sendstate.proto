syntax = "proto3";

package notif.manager.sendstate.v1;

option go_package = "github.com/NpoolPlatform/message/npool/notif/mgr/v1/announcement/sendstate";

import "npool/npool.proto";
import "npool/notif/mgr/v1/channel/channel.proto";

// Service Name
service Manager {
    rpc CreateSendState     (CreateSendStateRequest)     returns (CreateSendStateResponse)     {}
    rpc CreateSendStates    (CreateSendStatesRequest)    returns (CreateSendStatesResponse)    {}
    rpc UpdateSendState     (UpdateSendStateRequest)     returns (UpdateSendStateResponse)     {}
    rpc GetSendState        (GetSendStateRequest)        returns (GetSendStateResponse)        {}
    rpc GetSendStateOnly    (GetSendStateOnlyRequest)    returns (GetSendStateOnlyResponse)    {}
    rpc GetSendStates       (GetSendStatesRequest)       returns (GetSendStatesResponse)       {}
    rpc ExistSendState      (ExistSendStateRequest)      returns (ExistSendStateResponse)      {}
    rpc ExistSendStateConds (ExistSendStateCondsRequest) returns (ExistSendStateCondsResponse) {}
    rpc CountSendStates     (CountSendStatesRequest)     returns (CountSendStatesResponse)     {}
    rpc DeleteSendState     (DeleteSendStateRequest)     returns (DeleteSendStateResponse)     {}
}

message SendStateReq {
    optional string ID             = 10;
    optional string AppID          = 20;
    optional string UserID         = 30;
    optional string AnnouncementID = 40;
    optional notif.manager.channel.v1.NotifChannel Channel = 50;
}

message SendState {
    string ID             = 10;
    string AppID          = 20;
    string UserID         = 30;
    string AnnouncementID = 40;
    notif.manager.channel.v1.NotifChannel Channel = 50;
    uint32 CreatedAt      = 60;
    uint32 UpdatedAt      = 70;
}

message Conds {
    optional npool.v1.StringVal ID             = 10;
    optional npool.v1.StringVal AppID          = 20;
    optional npool.v1.StringVal UserID         = 30;
    optional npool.v1.StringVal AnnouncementID = 40;
    optional npool.v1.Uint32Val Channel        = 50;
}


message CreateSendStateRequest {
    SendStateReq Info = 10;
}

message CreateSendStateResponse {
    SendState Info = 10;
}

message CreateSendStatesRequest {
    repeated SendStateReq Infos = 10;
}

message CreateSendStatesResponse {
    repeated SendState Infos = 10;
}

message UpdateSendStateRequest {
    SendStateReq Info = 10;
}

message UpdateSendStateResponse {
    SendState Info = 10;
}

message GetSendStateRequest {
    string ID = 10;
}

message GetSendStateResponse {
    SendState Info = 10;
}

message GetSendStatesRequest {
    Conds Conds   = 10;
    int32 Offset  = 20;
    int32 Limit   = 30;
}

message GetSendStatesResponse {
    repeated SendState Infos = 10;
    uint32             Total = 20;
}

message GetSendStateOnlyRequest {
    Conds Conds = 10;
}

message GetSendStateOnlyResponse {
    SendState Info = 10;
}

message ExistSendStateRequest {
    string ID = 10;
}

message ExistSendStateResponse {
    bool Info = 10;
}

message ExistSendStateCondsRequest {
    Conds Conds = 10;
}

message ExistSendStateCondsResponse {
    bool Info = 10;
}

message CountSendStatesRequest {
    Conds Conds = 10;
}

message CountSendStatesResponse {
    uint32 Info = 10;
}

message DeleteSendStateRequest {
    string ID = 10;
}

message DeleteSendStateResponse {
    SendState Info = 10;
}
