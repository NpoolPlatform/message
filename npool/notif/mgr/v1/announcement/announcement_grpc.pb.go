// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/notif/mgr/v1/announcement/announcement.proto

package announcement

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Manager_CreateAnnouncement_FullMethodName     = "/notif.manager.announcement.v1.Manager/CreateAnnouncement"
	Manager_CreateAnnouncements_FullMethodName    = "/notif.manager.announcement.v1.Manager/CreateAnnouncements"
	Manager_UpdateAnnouncement_FullMethodName     = "/notif.manager.announcement.v1.Manager/UpdateAnnouncement"
	Manager_GetAnnouncement_FullMethodName        = "/notif.manager.announcement.v1.Manager/GetAnnouncement"
	Manager_GetAnnouncementOnly_FullMethodName    = "/notif.manager.announcement.v1.Manager/GetAnnouncementOnly"
	Manager_GetAnnouncements_FullMethodName       = "/notif.manager.announcement.v1.Manager/GetAnnouncements"
	Manager_ExistAnnouncement_FullMethodName      = "/notif.manager.announcement.v1.Manager/ExistAnnouncement"
	Manager_ExistAnnouncementConds_FullMethodName = "/notif.manager.announcement.v1.Manager/ExistAnnouncementConds"
	Manager_CountAnnouncements_FullMethodName     = "/notif.manager.announcement.v1.Manager/CountAnnouncements"
	Manager_DeleteAnnouncement_FullMethodName     = "/notif.manager.announcement.v1.Manager/DeleteAnnouncement"
)

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateAnnouncement(ctx context.Context, in *CreateAnnouncementRequest, opts ...grpc.CallOption) (*CreateAnnouncementResponse, error)
	CreateAnnouncements(ctx context.Context, in *CreateAnnouncementsRequest, opts ...grpc.CallOption) (*CreateAnnouncementsResponse, error)
	UpdateAnnouncement(ctx context.Context, in *UpdateAnnouncementRequest, opts ...grpc.CallOption) (*UpdateAnnouncementResponse, error)
	GetAnnouncement(ctx context.Context, in *GetAnnouncementRequest, opts ...grpc.CallOption) (*GetAnnouncementResponse, error)
	GetAnnouncementOnly(ctx context.Context, in *GetAnnouncementOnlyRequest, opts ...grpc.CallOption) (*GetAnnouncementOnlyResponse, error)
	GetAnnouncements(ctx context.Context, in *GetAnnouncementsRequest, opts ...grpc.CallOption) (*GetAnnouncementsResponse, error)
	ExistAnnouncement(ctx context.Context, in *ExistAnnouncementRequest, opts ...grpc.CallOption) (*ExistAnnouncementResponse, error)
	ExistAnnouncementConds(ctx context.Context, in *ExistAnnouncementCondsRequest, opts ...grpc.CallOption) (*ExistAnnouncementCondsResponse, error)
	CountAnnouncements(ctx context.Context, in *CountAnnouncementsRequest, opts ...grpc.CallOption) (*CountAnnouncementsResponse, error)
	DeleteAnnouncement(ctx context.Context, in *DeleteAnnouncementRequest, opts ...grpc.CallOption) (*DeleteAnnouncementResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateAnnouncement(ctx context.Context, in *CreateAnnouncementRequest, opts ...grpc.CallOption) (*CreateAnnouncementResponse, error) {
	out := new(CreateAnnouncementResponse)
	err := c.cc.Invoke(ctx, Manager_CreateAnnouncement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateAnnouncements(ctx context.Context, in *CreateAnnouncementsRequest, opts ...grpc.CallOption) (*CreateAnnouncementsResponse, error) {
	out := new(CreateAnnouncementsResponse)
	err := c.cc.Invoke(ctx, Manager_CreateAnnouncements_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateAnnouncement(ctx context.Context, in *UpdateAnnouncementRequest, opts ...grpc.CallOption) (*UpdateAnnouncementResponse, error) {
	out := new(UpdateAnnouncementResponse)
	err := c.cc.Invoke(ctx, Manager_UpdateAnnouncement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetAnnouncement(ctx context.Context, in *GetAnnouncementRequest, opts ...grpc.CallOption) (*GetAnnouncementResponse, error) {
	out := new(GetAnnouncementResponse)
	err := c.cc.Invoke(ctx, Manager_GetAnnouncement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetAnnouncementOnly(ctx context.Context, in *GetAnnouncementOnlyRequest, opts ...grpc.CallOption) (*GetAnnouncementOnlyResponse, error) {
	out := new(GetAnnouncementOnlyResponse)
	err := c.cc.Invoke(ctx, Manager_GetAnnouncementOnly_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetAnnouncements(ctx context.Context, in *GetAnnouncementsRequest, opts ...grpc.CallOption) (*GetAnnouncementsResponse, error) {
	out := new(GetAnnouncementsResponse)
	err := c.cc.Invoke(ctx, Manager_GetAnnouncements_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistAnnouncement(ctx context.Context, in *ExistAnnouncementRequest, opts ...grpc.CallOption) (*ExistAnnouncementResponse, error) {
	out := new(ExistAnnouncementResponse)
	err := c.cc.Invoke(ctx, Manager_ExistAnnouncement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistAnnouncementConds(ctx context.Context, in *ExistAnnouncementCondsRequest, opts ...grpc.CallOption) (*ExistAnnouncementCondsResponse, error) {
	out := new(ExistAnnouncementCondsResponse)
	err := c.cc.Invoke(ctx, Manager_ExistAnnouncementConds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CountAnnouncements(ctx context.Context, in *CountAnnouncementsRequest, opts ...grpc.CallOption) (*CountAnnouncementsResponse, error) {
	out := new(CountAnnouncementsResponse)
	err := c.cc.Invoke(ctx, Manager_CountAnnouncements_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteAnnouncement(ctx context.Context, in *DeleteAnnouncementRequest, opts ...grpc.CallOption) (*DeleteAnnouncementResponse, error) {
	out := new(DeleteAnnouncementResponse)
	err := c.cc.Invoke(ctx, Manager_DeleteAnnouncement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateAnnouncement(context.Context, *CreateAnnouncementRequest) (*CreateAnnouncementResponse, error)
	CreateAnnouncements(context.Context, *CreateAnnouncementsRequest) (*CreateAnnouncementsResponse, error)
	UpdateAnnouncement(context.Context, *UpdateAnnouncementRequest) (*UpdateAnnouncementResponse, error)
	GetAnnouncement(context.Context, *GetAnnouncementRequest) (*GetAnnouncementResponse, error)
	GetAnnouncementOnly(context.Context, *GetAnnouncementOnlyRequest) (*GetAnnouncementOnlyResponse, error)
	GetAnnouncements(context.Context, *GetAnnouncementsRequest) (*GetAnnouncementsResponse, error)
	ExistAnnouncement(context.Context, *ExistAnnouncementRequest) (*ExistAnnouncementResponse, error)
	ExistAnnouncementConds(context.Context, *ExistAnnouncementCondsRequest) (*ExistAnnouncementCondsResponse, error)
	CountAnnouncements(context.Context, *CountAnnouncementsRequest) (*CountAnnouncementsResponse, error)
	DeleteAnnouncement(context.Context, *DeleteAnnouncementRequest) (*DeleteAnnouncementResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateAnnouncement(context.Context, *CreateAnnouncementRequest) (*CreateAnnouncementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnnouncement not implemented")
}
func (UnimplementedManagerServer) CreateAnnouncements(context.Context, *CreateAnnouncementsRequest) (*CreateAnnouncementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnnouncements not implemented")
}
func (UnimplementedManagerServer) UpdateAnnouncement(context.Context, *UpdateAnnouncementRequest) (*UpdateAnnouncementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAnnouncement not implemented")
}
func (UnimplementedManagerServer) GetAnnouncement(context.Context, *GetAnnouncementRequest) (*GetAnnouncementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnnouncement not implemented")
}
func (UnimplementedManagerServer) GetAnnouncementOnly(context.Context, *GetAnnouncementOnlyRequest) (*GetAnnouncementOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnnouncementOnly not implemented")
}
func (UnimplementedManagerServer) GetAnnouncements(context.Context, *GetAnnouncementsRequest) (*GetAnnouncementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnnouncements not implemented")
}
func (UnimplementedManagerServer) ExistAnnouncement(context.Context, *ExistAnnouncementRequest) (*ExistAnnouncementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistAnnouncement not implemented")
}
func (UnimplementedManagerServer) ExistAnnouncementConds(context.Context, *ExistAnnouncementCondsRequest) (*ExistAnnouncementCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistAnnouncementConds not implemented")
}
func (UnimplementedManagerServer) CountAnnouncements(context.Context, *CountAnnouncementsRequest) (*CountAnnouncementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAnnouncements not implemented")
}
func (UnimplementedManagerServer) DeleteAnnouncement(context.Context, *DeleteAnnouncementRequest) (*DeleteAnnouncementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAnnouncement not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnnouncementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_CreateAnnouncement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateAnnouncement(ctx, req.(*CreateAnnouncementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateAnnouncements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnnouncementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateAnnouncements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_CreateAnnouncements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateAnnouncements(ctx, req.(*CreateAnnouncementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAnnouncementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_UpdateAnnouncement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateAnnouncement(ctx, req.(*UpdateAnnouncementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnnouncementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetAnnouncement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetAnnouncement(ctx, req.(*GetAnnouncementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetAnnouncementOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnnouncementOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetAnnouncementOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetAnnouncementOnly_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetAnnouncementOnly(ctx, req.(*GetAnnouncementOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetAnnouncements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnnouncementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetAnnouncements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetAnnouncements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetAnnouncements(ctx, req.(*GetAnnouncementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistAnnouncementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_ExistAnnouncement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistAnnouncement(ctx, req.(*ExistAnnouncementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistAnnouncementConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistAnnouncementCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistAnnouncementConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_ExistAnnouncementConds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistAnnouncementConds(ctx, req.(*ExistAnnouncementCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CountAnnouncements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAnnouncementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CountAnnouncements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_CountAnnouncements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CountAnnouncements(ctx, req.(*CountAnnouncementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAnnouncementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_DeleteAnnouncement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteAnnouncement(ctx, req.(*DeleteAnnouncementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notif.manager.announcement.v1.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAnnouncement",
			Handler:    _Manager_CreateAnnouncement_Handler,
		},
		{
			MethodName: "CreateAnnouncements",
			Handler:    _Manager_CreateAnnouncements_Handler,
		},
		{
			MethodName: "UpdateAnnouncement",
			Handler:    _Manager_UpdateAnnouncement_Handler,
		},
		{
			MethodName: "GetAnnouncement",
			Handler:    _Manager_GetAnnouncement_Handler,
		},
		{
			MethodName: "GetAnnouncementOnly",
			Handler:    _Manager_GetAnnouncementOnly_Handler,
		},
		{
			MethodName: "GetAnnouncements",
			Handler:    _Manager_GetAnnouncements_Handler,
		},
		{
			MethodName: "ExistAnnouncement",
			Handler:    _Manager_ExistAnnouncement_Handler,
		},
		{
			MethodName: "ExistAnnouncementConds",
			Handler:    _Manager_ExistAnnouncementConds_Handler,
		},
		{
			MethodName: "CountAnnouncements",
			Handler:    _Manager_CountAnnouncements_Handler,
		},
		{
			MethodName: "DeleteAnnouncement",
			Handler:    _Manager_DeleteAnnouncement_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/notif/mgr/v1/announcement/announcement.proto",
}
