// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/notif/mw/v1/announcement/send/send.proto

package send

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Middleware_CreateSendAnnouncement_FullMethodName     = "/notif.middleware.announcement.send.v1.Middleware/CreateSendAnnouncement"
	Middleware_CreateSendAnnouncements_FullMethodName    = "/notif.middleware.announcement.send.v1.Middleware/CreateSendAnnouncements"
	Middleware_GetSendAnnouncements_FullMethodName       = "/notif.middleware.announcement.send.v1.Middleware/GetSendAnnouncements"
	Middleware_GetSendAnnouncement_FullMethodName        = "/notif.middleware.announcement.send.v1.Middleware/GetSendAnnouncement"
	Middleware_GetSendAnnouncementOnly_FullMethodName    = "/notif.middleware.announcement.send.v1.Middleware/GetSendAnnouncementOnly"
	Middleware_ExistSendAnnouncement_FullMethodName      = "/notif.middleware.announcement.send.v1.Middleware/ExistSendAnnouncement"
	Middleware_ExistSendAnnouncementConds_FullMethodName = "/notif.middleware.announcement.send.v1.Middleware/ExistSendAnnouncementConds"
	Middleware_DeleteSendAnnouncement_FullMethodName     = "/notif.middleware.announcement.send.v1.Middleware/DeleteSendAnnouncement"
)

// MiddlewareClient is the client API for Middleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddlewareClient interface {
	CreateSendAnnouncement(ctx context.Context, in *CreateSendAnnouncementRequest, opts ...grpc.CallOption) (*CreateSendAnnouncementResponse, error)
	CreateSendAnnouncements(ctx context.Context, in *CreateSendAnnouncementsRequest, opts ...grpc.CallOption) (*CreateSendAnnouncementsResponse, error)
	GetSendAnnouncements(ctx context.Context, in *GetSendAnnouncementsRequest, opts ...grpc.CallOption) (*GetSendAnnouncementsResponse, error)
	GetSendAnnouncement(ctx context.Context, in *GetSendAnnouncementRequest, opts ...grpc.CallOption) (*GetSendAnnouncementResponse, error)
	GetSendAnnouncementOnly(ctx context.Context, in *GetSendAnnouncementOnlyRequest, opts ...grpc.CallOption) (*GetSendAnnouncementOnlyResponse, error)
	ExistSendAnnouncement(ctx context.Context, in *ExistSendAnnouncementRequest, opts ...grpc.CallOption) (*ExistSendAnnouncementResponse, error)
	ExistSendAnnouncementConds(ctx context.Context, in *ExistSendAnnouncementCondsRequest, opts ...grpc.CallOption) (*ExistSendAnnouncementCondsResponse, error)
	DeleteSendAnnouncement(ctx context.Context, in *DeleteSendAnnouncementRequest, opts ...grpc.CallOption) (*DeleteSendAnnouncementResponse, error)
}

type middlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddlewareClient(cc grpc.ClientConnInterface) MiddlewareClient {
	return &middlewareClient{cc}
}

func (c *middlewareClient) CreateSendAnnouncement(ctx context.Context, in *CreateSendAnnouncementRequest, opts ...grpc.CallOption) (*CreateSendAnnouncementResponse, error) {
	out := new(CreateSendAnnouncementResponse)
	err := c.cc.Invoke(ctx, Middleware_CreateSendAnnouncement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) CreateSendAnnouncements(ctx context.Context, in *CreateSendAnnouncementsRequest, opts ...grpc.CallOption) (*CreateSendAnnouncementsResponse, error) {
	out := new(CreateSendAnnouncementsResponse)
	err := c.cc.Invoke(ctx, Middleware_CreateSendAnnouncements_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetSendAnnouncements(ctx context.Context, in *GetSendAnnouncementsRequest, opts ...grpc.CallOption) (*GetSendAnnouncementsResponse, error) {
	out := new(GetSendAnnouncementsResponse)
	err := c.cc.Invoke(ctx, Middleware_GetSendAnnouncements_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetSendAnnouncement(ctx context.Context, in *GetSendAnnouncementRequest, opts ...grpc.CallOption) (*GetSendAnnouncementResponse, error) {
	out := new(GetSendAnnouncementResponse)
	err := c.cc.Invoke(ctx, Middleware_GetSendAnnouncement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetSendAnnouncementOnly(ctx context.Context, in *GetSendAnnouncementOnlyRequest, opts ...grpc.CallOption) (*GetSendAnnouncementOnlyResponse, error) {
	out := new(GetSendAnnouncementOnlyResponse)
	err := c.cc.Invoke(ctx, Middleware_GetSendAnnouncementOnly_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) ExistSendAnnouncement(ctx context.Context, in *ExistSendAnnouncementRequest, opts ...grpc.CallOption) (*ExistSendAnnouncementResponse, error) {
	out := new(ExistSendAnnouncementResponse)
	err := c.cc.Invoke(ctx, Middleware_ExistSendAnnouncement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) ExistSendAnnouncementConds(ctx context.Context, in *ExistSendAnnouncementCondsRequest, opts ...grpc.CallOption) (*ExistSendAnnouncementCondsResponse, error) {
	out := new(ExistSendAnnouncementCondsResponse)
	err := c.cc.Invoke(ctx, Middleware_ExistSendAnnouncementConds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) DeleteSendAnnouncement(ctx context.Context, in *DeleteSendAnnouncementRequest, opts ...grpc.CallOption) (*DeleteSendAnnouncementResponse, error) {
	out := new(DeleteSendAnnouncementResponse)
	err := c.cc.Invoke(ctx, Middleware_DeleteSendAnnouncement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddlewareServer is the server API for Middleware service.
// All implementations must embed UnimplementedMiddlewareServer
// for forward compatibility
type MiddlewareServer interface {
	CreateSendAnnouncement(context.Context, *CreateSendAnnouncementRequest) (*CreateSendAnnouncementResponse, error)
	CreateSendAnnouncements(context.Context, *CreateSendAnnouncementsRequest) (*CreateSendAnnouncementsResponse, error)
	GetSendAnnouncements(context.Context, *GetSendAnnouncementsRequest) (*GetSendAnnouncementsResponse, error)
	GetSendAnnouncement(context.Context, *GetSendAnnouncementRequest) (*GetSendAnnouncementResponse, error)
	GetSendAnnouncementOnly(context.Context, *GetSendAnnouncementOnlyRequest) (*GetSendAnnouncementOnlyResponse, error)
	ExistSendAnnouncement(context.Context, *ExistSendAnnouncementRequest) (*ExistSendAnnouncementResponse, error)
	ExistSendAnnouncementConds(context.Context, *ExistSendAnnouncementCondsRequest) (*ExistSendAnnouncementCondsResponse, error)
	DeleteSendAnnouncement(context.Context, *DeleteSendAnnouncementRequest) (*DeleteSendAnnouncementResponse, error)
	mustEmbedUnimplementedMiddlewareServer()
}

// UnimplementedMiddlewareServer must be embedded to have forward compatible implementations.
type UnimplementedMiddlewareServer struct {
}

func (UnimplementedMiddlewareServer) CreateSendAnnouncement(context.Context, *CreateSendAnnouncementRequest) (*CreateSendAnnouncementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSendAnnouncement not implemented")
}
func (UnimplementedMiddlewareServer) CreateSendAnnouncements(context.Context, *CreateSendAnnouncementsRequest) (*CreateSendAnnouncementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSendAnnouncements not implemented")
}
func (UnimplementedMiddlewareServer) GetSendAnnouncements(context.Context, *GetSendAnnouncementsRequest) (*GetSendAnnouncementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSendAnnouncements not implemented")
}
func (UnimplementedMiddlewareServer) GetSendAnnouncement(context.Context, *GetSendAnnouncementRequest) (*GetSendAnnouncementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSendAnnouncement not implemented")
}
func (UnimplementedMiddlewareServer) GetSendAnnouncementOnly(context.Context, *GetSendAnnouncementOnlyRequest) (*GetSendAnnouncementOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSendAnnouncementOnly not implemented")
}
func (UnimplementedMiddlewareServer) ExistSendAnnouncement(context.Context, *ExistSendAnnouncementRequest) (*ExistSendAnnouncementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistSendAnnouncement not implemented")
}
func (UnimplementedMiddlewareServer) ExistSendAnnouncementConds(context.Context, *ExistSendAnnouncementCondsRequest) (*ExistSendAnnouncementCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistSendAnnouncementConds not implemented")
}
func (UnimplementedMiddlewareServer) DeleteSendAnnouncement(context.Context, *DeleteSendAnnouncementRequest) (*DeleteSendAnnouncementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSendAnnouncement not implemented")
}
func (UnimplementedMiddlewareServer) mustEmbedUnimplementedMiddlewareServer() {}

// UnsafeMiddlewareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddlewareServer will
// result in compilation errors.
type UnsafeMiddlewareServer interface {
	mustEmbedUnimplementedMiddlewareServer()
}

func RegisterMiddlewareServer(s grpc.ServiceRegistrar, srv MiddlewareServer) {
	s.RegisterService(&Middleware_ServiceDesc, srv)
}

func _Middleware_CreateSendAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSendAnnouncementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreateSendAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_CreateSendAnnouncement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreateSendAnnouncement(ctx, req.(*CreateSendAnnouncementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_CreateSendAnnouncements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSendAnnouncementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreateSendAnnouncements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_CreateSendAnnouncements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreateSendAnnouncements(ctx, req.(*CreateSendAnnouncementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetSendAnnouncements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSendAnnouncementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetSendAnnouncements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetSendAnnouncements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetSendAnnouncements(ctx, req.(*GetSendAnnouncementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetSendAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSendAnnouncementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetSendAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetSendAnnouncement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetSendAnnouncement(ctx, req.(*GetSendAnnouncementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetSendAnnouncementOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSendAnnouncementOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetSendAnnouncementOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetSendAnnouncementOnly_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetSendAnnouncementOnly(ctx, req.(*GetSendAnnouncementOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_ExistSendAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistSendAnnouncementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).ExistSendAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_ExistSendAnnouncement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).ExistSendAnnouncement(ctx, req.(*ExistSendAnnouncementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_ExistSendAnnouncementConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistSendAnnouncementCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).ExistSendAnnouncementConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_ExistSendAnnouncementConds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).ExistSendAnnouncementConds(ctx, req.(*ExistSendAnnouncementCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_DeleteSendAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSendAnnouncementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).DeleteSendAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_DeleteSendAnnouncement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).DeleteSendAnnouncement(ctx, req.(*DeleteSendAnnouncementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Middleware_ServiceDesc is the grpc.ServiceDesc for Middleware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Middleware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notif.middleware.announcement.send.v1.Middleware",
	HandlerType: (*MiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSendAnnouncement",
			Handler:    _Middleware_CreateSendAnnouncement_Handler,
		},
		{
			MethodName: "CreateSendAnnouncements",
			Handler:    _Middleware_CreateSendAnnouncements_Handler,
		},
		{
			MethodName: "GetSendAnnouncements",
			Handler:    _Middleware_GetSendAnnouncements_Handler,
		},
		{
			MethodName: "GetSendAnnouncement",
			Handler:    _Middleware_GetSendAnnouncement_Handler,
		},
		{
			MethodName: "GetSendAnnouncementOnly",
			Handler:    _Middleware_GetSendAnnouncementOnly_Handler,
		},
		{
			MethodName: "ExistSendAnnouncement",
			Handler:    _Middleware_ExistSendAnnouncement_Handler,
		},
		{
			MethodName: "ExistSendAnnouncementConds",
			Handler:    _Middleware_ExistSendAnnouncementConds_Handler,
		},
		{
			MethodName: "DeleteSendAnnouncement",
			Handler:    _Middleware_DeleteSendAnnouncement_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/notif/mw/v1/announcement/send/send.proto",
}
