syntax = "proto3";

package notif.middleware.announcement.readstate.v1;

option go_package = "github.com/NpoolPlatform/message/npool/notif/mw/v1/announcement/readstate";

import "npool/notif/mgr/v1/announcement/readstate/readstate.proto";
import "npool/notif/mgr/v1/channel/channel.proto";

// Service Name
service Middleware {
    rpc GetReadState              (GetReadStateRequest)              returns (GetReadStateResponse)              {}
    rpc GetReadStates             (GetReadStatesRequest)             returns (GetReadStatesResponse)             {}
}

message ReadState {
    // @inject_tag: sql:"announcement_id"
    string AnnouncementID = 10;
    // @inject_tag: sql:"app_id"
    string AppID          = 20;
    // @inject_tag: sql:"user_id"
    string UserID         = 30;
    // @inject_tag: sql:"title"
    string Title          = 40;
    // @inject_tag: sql:"content"
    string Content        = 50;
    // @inject_tag: sql:"channels"
    string ChannelsStr = 60;
    repeated notif.manager.channel.v1.NotifChannel Channels = 70;
    // @inject_tag: sql:"type"
    string AnnouncementTypeStr = 80;
    notif.manager.channel.v1.NotifChannel AnnouncementType = 90;
    // @inject_tag: sql:"created_at"
    uint32 CreatedAt   = 100;
    // @inject_tag: sql:"updated_at"
    uint32 UpdatedAt   = 110;
}

message GetReadStateRequest {
    string AnnouncementID = 10;
    string UserID         = 20;
}

message GetReadStateResponse {
    ReadState Info = 10;
}

message GetReadStatesRequest {
    notif.manager.readstate.v1.Conds Conds = 10;
    int32  Offset = 20;
    int32  Limit  = 30;
}

message GetReadStatesResponse {
    repeated ReadState Infos = 10;
    uint32             Total = 20;
}