// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/notif/mw/v1/announcement/sendstate/sendstate.proto

package sendstate

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MiddlewareClient is the client API for Middleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddlewareClient interface {
	CreateSendState(ctx context.Context, in *CreateSendStateRequest, opts ...grpc.CallOption) (*CreateSendStateResponse, error)
	CreateSendStates(ctx context.Context, in *CreateSendStatesRequest, opts ...grpc.CallOption) (*CreateSendStatesResponse, error)
	GetSendStates(ctx context.Context, in *GetSendStatesRequest, opts ...grpc.CallOption) (*GetSendStatesResponse, error)
	GetSendState(ctx context.Context, in *GetSendStateRequest, opts ...grpc.CallOption) (*GetSendStateResponse, error)
	ExistSendStateConds(ctx context.Context, in *ExistSendStateCondsRequest, opts ...grpc.CallOption) (*ExistSendStateCondsResponse, error)
	DeleteSendState(ctx context.Context, in *DeleteSendStateRequest, opts ...grpc.CallOption) (*DeleteSendStateResponse, error)
}

type middlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddlewareClient(cc grpc.ClientConnInterface) MiddlewareClient {
	return &middlewareClient{cc}
}

func (c *middlewareClient) CreateSendState(ctx context.Context, in *CreateSendStateRequest, opts ...grpc.CallOption) (*CreateSendStateResponse, error) {
	out := new(CreateSendStateResponse)
	err := c.cc.Invoke(ctx, "/notif.middleware.announcement.sendstate.v1.Middleware/CreateSendState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) CreateSendStates(ctx context.Context, in *CreateSendStatesRequest, opts ...grpc.CallOption) (*CreateSendStatesResponse, error) {
	out := new(CreateSendStatesResponse)
	err := c.cc.Invoke(ctx, "/notif.middleware.announcement.sendstate.v1.Middleware/CreateSendStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetSendStates(ctx context.Context, in *GetSendStatesRequest, opts ...grpc.CallOption) (*GetSendStatesResponse, error) {
	out := new(GetSendStatesResponse)
	err := c.cc.Invoke(ctx, "/notif.middleware.announcement.sendstate.v1.Middleware/GetSendStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetSendState(ctx context.Context, in *GetSendStateRequest, opts ...grpc.CallOption) (*GetSendStateResponse, error) {
	out := new(GetSendStateResponse)
	err := c.cc.Invoke(ctx, "/notif.middleware.announcement.sendstate.v1.Middleware/GetSendState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) ExistSendStateConds(ctx context.Context, in *ExistSendStateCondsRequest, opts ...grpc.CallOption) (*ExistSendStateCondsResponse, error) {
	out := new(ExistSendStateCondsResponse)
	err := c.cc.Invoke(ctx, "/notif.middleware.announcement.sendstate.v1.Middleware/ExistSendStateConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) DeleteSendState(ctx context.Context, in *DeleteSendStateRequest, opts ...grpc.CallOption) (*DeleteSendStateResponse, error) {
	out := new(DeleteSendStateResponse)
	err := c.cc.Invoke(ctx, "/notif.middleware.announcement.sendstate.v1.Middleware/DeleteSendState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddlewareServer is the server API for Middleware service.
// All implementations must embed UnimplementedMiddlewareServer
// for forward compatibility
type MiddlewareServer interface {
	CreateSendState(context.Context, *CreateSendStateRequest) (*CreateSendStateResponse, error)
	CreateSendStates(context.Context, *CreateSendStatesRequest) (*CreateSendStatesResponse, error)
	GetSendStates(context.Context, *GetSendStatesRequest) (*GetSendStatesResponse, error)
	GetSendState(context.Context, *GetSendStateRequest) (*GetSendStateResponse, error)
	ExistSendStateConds(context.Context, *ExistSendStateCondsRequest) (*ExistSendStateCondsResponse, error)
	DeleteSendState(context.Context, *DeleteSendStateRequest) (*DeleteSendStateResponse, error)
	mustEmbedUnimplementedMiddlewareServer()
}

// UnimplementedMiddlewareServer must be embedded to have forward compatible implementations.
type UnimplementedMiddlewareServer struct {
}

func (UnimplementedMiddlewareServer) CreateSendState(context.Context, *CreateSendStateRequest) (*CreateSendStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSendState not implemented")
}
func (UnimplementedMiddlewareServer) CreateSendStates(context.Context, *CreateSendStatesRequest) (*CreateSendStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSendStates not implemented")
}
func (UnimplementedMiddlewareServer) GetSendStates(context.Context, *GetSendStatesRequest) (*GetSendStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSendStates not implemented")
}
func (UnimplementedMiddlewareServer) GetSendState(context.Context, *GetSendStateRequest) (*GetSendStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSendState not implemented")
}
func (UnimplementedMiddlewareServer) ExistSendStateConds(context.Context, *ExistSendStateCondsRequest) (*ExistSendStateCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistSendStateConds not implemented")
}
func (UnimplementedMiddlewareServer) DeleteSendState(context.Context, *DeleteSendStateRequest) (*DeleteSendStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSendState not implemented")
}
func (UnimplementedMiddlewareServer) mustEmbedUnimplementedMiddlewareServer() {}

// UnsafeMiddlewareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddlewareServer will
// result in compilation errors.
type UnsafeMiddlewareServer interface {
	mustEmbedUnimplementedMiddlewareServer()
}

func RegisterMiddlewareServer(s grpc.ServiceRegistrar, srv MiddlewareServer) {
	s.RegisterService(&Middleware_ServiceDesc, srv)
}

func _Middleware_CreateSendState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSendStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreateSendState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.middleware.announcement.sendstate.v1.Middleware/CreateSendState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreateSendState(ctx, req.(*CreateSendStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_CreateSendStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSendStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreateSendStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.middleware.announcement.sendstate.v1.Middleware/CreateSendStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreateSendStates(ctx, req.(*CreateSendStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetSendStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSendStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetSendStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.middleware.announcement.sendstate.v1.Middleware/GetSendStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetSendStates(ctx, req.(*GetSendStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetSendState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSendStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetSendState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.middleware.announcement.sendstate.v1.Middleware/GetSendState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetSendState(ctx, req.(*GetSendStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_ExistSendStateConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistSendStateCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).ExistSendStateConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.middleware.announcement.sendstate.v1.Middleware/ExistSendStateConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).ExistSendStateConds(ctx, req.(*ExistSendStateCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_DeleteSendState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSendStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).DeleteSendState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.middleware.announcement.sendstate.v1.Middleware/DeleteSendState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).DeleteSendState(ctx, req.(*DeleteSendStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Middleware_ServiceDesc is the grpc.ServiceDesc for Middleware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Middleware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notif.middleware.announcement.sendstate.v1.Middleware",
	HandlerType: (*MiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSendState",
			Handler:    _Middleware_CreateSendState_Handler,
		},
		{
			MethodName: "CreateSendStates",
			Handler:    _Middleware_CreateSendStates_Handler,
		},
		{
			MethodName: "GetSendStates",
			Handler:    _Middleware_GetSendStates_Handler,
		},
		{
			MethodName: "GetSendState",
			Handler:    _Middleware_GetSendState_Handler,
		},
		{
			MethodName: "ExistSendStateConds",
			Handler:    _Middleware_ExistSendStateConds_Handler,
		},
		{
			MethodName: "DeleteSendState",
			Handler:    _Middleware_DeleteSendState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/notif/mw/v1/announcement/sendstate/sendstate.proto",
}
