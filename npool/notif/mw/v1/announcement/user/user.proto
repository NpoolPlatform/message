syntax = "proto3";

package notif.middleware.announcement.user.v1;

option go_package = "github.com/NpoolPlatform/message/npool/notif/mw/v1/announcement/user";

import "npool/notif/mgr/v1/announcement/user/user.proto";
import "npool/notif/mgr/v1/channel/channel.proto";
import "npool/notif/mgr/v1/announcement/announcement.proto";

// Service Name
service Middleware {
    rpc GetUsers (GetUsersRequest) returns (GetUsersResponse) {}
}

message User {
    // @inject_tag: sql:"id"
    string ID             = 10;
    // @inject_tag: sql:"announcement_id"
    string AnnouncementID = 20;
    // @inject_tag: sql:"app_id"
    string AppID          = 30;
    // @inject_tag: sql:"user_id"
    string UserID         = 40;
    // @inject_tag: sql:"title"
    string Title          = 50;
    // @inject_tag: sql:"content"
    string Content        = 60;
    // @inject_tag: sql:"channel"
    string ChannelStr     = 70;
    notif.manager.channel.v1.NotifChannel Channel = 80;
    // @inject_tag: sql:"type"
    string AnnouncementTypeStr = 90;
    notif.manager.announcement.v1.AnnouncementType AnnouncementType = 100;
    // @inject_tag: sql:"created_at"
    uint32 CreatedAt   = 110;
    // @inject_tag: sql:"updated_at"
    uint32 UpdatedAt   = 120;
}

message GetUsersRequest {
    notif.manager.user.v1.Conds Conds = 10;
    int32  Offset = 20;
    int32  Limit  = 30;
}

message GetUsersResponse {
    repeated User Infos = 10;
    uint32        Total = 20;
}
