syntax = "proto3";

package notif.middleware.announcement.user.v1;

option go_package = "github.com/NpoolPlatform/message/npool/notif/mw/v1/announcement/user";

import "npool/basetypes/v1/conds.proto";

// Service Name
service Middleware {
    rpc CreateUserAnnouncement     (CreateUserAnnouncementRequest)     returns (CreateUserAnnouncementResponse)     {}
    rpc CreateUserAnnouncements    (CreateUserAnnouncementsRequest)    returns (CreateUserAnnouncementsResponse)    {}
    rpc UpdateUserAnnouncement     (UpdateUserAnnouncementRequest)     returns (UpdateUserAnnouncementResponse)     {}
    rpc GetUserAnnouncement        (GetUserAnnouncementRequest)        returns (GetUserAnnouncementResponse)        {}
    rpc GetUserAnnouncementOnly    (GetUserAnnouncementOnlyRequest)    returns (GetUserAnnouncementOnlyResponse)    {}
    rpc GetUserAnnouncements       (GetUserAnnouncementsRequest)       returns (GetUserAnnouncementsResponse)       {}
    rpc ExistUserAnnouncement      (ExistUserAnnouncementRequest)      returns (ExistUserAnnouncementResponse)      {}
    rpc ExistUserAnnouncementConds (ExistUserAnnouncementCondsRequest) returns (ExistUserAnnouncementCondsResponse) {}
    rpc CountUserAnnouncements     (CountUserAnnouncementsRequest)     returns (CountUserAnnouncementsResponse)     {}
    rpc DeleteUserAnnouncement     (DeleteUserAnnouncementRequest)     returns (DeleteUserAnnouncementResponse)     {}
}

message UserAnnouncement {
    // @inject_tag: sql:"id"
    string ID             = 10;
    // @inject_tag: sql:"app_id"
    string AppID          = 20;
    // @inject_tag: sql:"user_id"
    string UserID         = 30;
    // @inject_tag: sql:"announcement_id"
    string AnnouncementID = 40;
    // @inject_tag: sql:"created_at"
    uint32 CreatedAt      = 60;
    // @inject_tag: sql:"update_at"
    uint32 UpdatedAt      = 70;
}

message UserAnnouncementReq {
    optional string ID             = 10;
    optional string AppID          = 20;
    optional string UserID         = 30;
    optional string AnnouncementID = 40;
}

message Conds {
    optional basetypes.v1.StringVal      ID             = 10;
    optional basetypes.v1.StringSliceVal IDs            = 20;
    optional basetypes.v1.StringVal      AppID          = 30;
    optional basetypes.v1.StringVal      UserID         = 40;
    optional basetypes.v1.StringVal      AnnouncementID = 50;
}

message CreateUserAnnouncementRequest {
    UserAnnouncementReq Info = 10;
}

message CreateUserAnnouncementResponse {
    UserAnnouncement Info = 10;
}

message CreateUserAnnouncementsRequest {
    repeated UserAnnouncementReq Infos = 10;
}

message CreateUserAnnouncementsResponse {
    repeated UserAnnouncement Infos = 10;
}

message UpdateUserAnnouncementRequest {
    UserAnnouncementReq Info = 10;
}

message UpdateUserAnnouncementResponse {
    UserAnnouncement Info = 10;
}

message GetUserAnnouncementRequest {
    string ID = 10;
}

message GetUserAnnouncementResponse {
    UserAnnouncement Info = 10;
}

message GetUserAnnouncementsRequest {
    Conds Conds = 10;
    int32 Offset = 20;
    int32 Limit = 30;
}

message GetUserAnnouncementsResponse {
    repeated UserAnnouncement Infos = 10;
    uint32                    Total = 20;
}

message GetUserAnnouncementOnlyRequest {
    Conds Conds = 10;
}

message GetUserAnnouncementOnlyResponse {
    UserAnnouncement Info = 10;
}

message ExistUserAnnouncementRequest {
    string ID = 10;
}

message ExistUserAnnouncementResponse {
    bool Info = 10;
}

message ExistUserAnnouncementCondsRequest {
    Conds Conds = 10;
}

message ExistUserAnnouncementCondsResponse {
    bool Info = 10;
}

message CountUserAnnouncementsRequest {
    Conds Conds = 10;
}

message CountUserAnnouncementsResponse {
    uint32 Info = 10;
}

message DeleteUserAnnouncementRequest {
    UserAnnouncementReq Info = 10;
}

message DeleteUserAnnouncementResponse {
    UserAnnouncement Info = 10;
}