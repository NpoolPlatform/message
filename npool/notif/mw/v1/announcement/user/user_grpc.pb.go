// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/notif/mw/v1/announcement/user/user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Middleware_CreateAnnouncementUser_FullMethodName     = "/notif.middleware.announcement.user.v1.Middleware/CreateAnnouncementUser"
	Middleware_CreateAnnouncementUsers_FullMethodName    = "/notif.middleware.announcement.user.v1.Middleware/CreateAnnouncementUsers"
	Middleware_UpdateAnnouncementUser_FullMethodName     = "/notif.middleware.announcement.user.v1.Middleware/UpdateAnnouncementUser"
	Middleware_GetAnnouncementUser_FullMethodName        = "/notif.middleware.announcement.user.v1.Middleware/GetAnnouncementUser"
	Middleware_GetAnnouncementUserOnly_FullMethodName    = "/notif.middleware.announcement.user.v1.Middleware/GetAnnouncementUserOnly"
	Middleware_GetAnnouncementUsers_FullMethodName       = "/notif.middleware.announcement.user.v1.Middleware/GetAnnouncementUsers"
	Middleware_ExistAnnouncementUser_FullMethodName      = "/notif.middleware.announcement.user.v1.Middleware/ExistAnnouncementUser"
	Middleware_ExistAnnouncementUserConds_FullMethodName = "/notif.middleware.announcement.user.v1.Middleware/ExistAnnouncementUserConds"
	Middleware_CountAnnouncementUsers_FullMethodName     = "/notif.middleware.announcement.user.v1.Middleware/CountAnnouncementUsers"
	Middleware_DeleteAnnouncementUser_FullMethodName     = "/notif.middleware.announcement.user.v1.Middleware/DeleteAnnouncementUser"
)

// MiddlewareClient is the client API for Middleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddlewareClient interface {
	CreateAnnouncementUser(ctx context.Context, in *CreateAnnouncementUserRequest, opts ...grpc.CallOption) (*CreateAnnouncementUserResponse, error)
	CreateAnnouncementUsers(ctx context.Context, in *CreateAnnouncementUsersRequest, opts ...grpc.CallOption) (*CreateAnnouncementUsersResponse, error)
	UpdateAnnouncementUser(ctx context.Context, in *UpdateAnnouncementUserRequest, opts ...grpc.CallOption) (*UpdateAnnouncementUserResponse, error)
	GetAnnouncementUser(ctx context.Context, in *GetAnnouncementUserRequest, opts ...grpc.CallOption) (*GetAnnouncementUserResponse, error)
	GetAnnouncementUserOnly(ctx context.Context, in *GetAnnouncementUserOnlyRequest, opts ...grpc.CallOption) (*GetAnnouncementUserOnlyResponse, error)
	GetAnnouncementUsers(ctx context.Context, in *GetAnnouncementUsersRequest, opts ...grpc.CallOption) (*GetAnnouncementUsersResponse, error)
	ExistAnnouncementUser(ctx context.Context, in *ExistAnnouncementUserRequest, opts ...grpc.CallOption) (*ExistAnnouncementUserResponse, error)
	ExistAnnouncementUserConds(ctx context.Context, in *ExistAnnouncementUserCondsRequest, opts ...grpc.CallOption) (*ExistAnnouncementUserCondsResponse, error)
	CountAnnouncementUsers(ctx context.Context, in *CountAnnouncementUsersRequest, opts ...grpc.CallOption) (*CountAnnouncementUsersResponse, error)
	DeleteAnnouncementUser(ctx context.Context, in *DeleteAnnouncementUserRequest, opts ...grpc.CallOption) (*DeleteAnnouncementUserResponse, error)
}

type middlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddlewareClient(cc grpc.ClientConnInterface) MiddlewareClient {
	return &middlewareClient{cc}
}

func (c *middlewareClient) CreateAnnouncementUser(ctx context.Context, in *CreateAnnouncementUserRequest, opts ...grpc.CallOption) (*CreateAnnouncementUserResponse, error) {
	out := new(CreateAnnouncementUserResponse)
	err := c.cc.Invoke(ctx, Middleware_CreateAnnouncementUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) CreateAnnouncementUsers(ctx context.Context, in *CreateAnnouncementUsersRequest, opts ...grpc.CallOption) (*CreateAnnouncementUsersResponse, error) {
	out := new(CreateAnnouncementUsersResponse)
	err := c.cc.Invoke(ctx, Middleware_CreateAnnouncementUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) UpdateAnnouncementUser(ctx context.Context, in *UpdateAnnouncementUserRequest, opts ...grpc.CallOption) (*UpdateAnnouncementUserResponse, error) {
	out := new(UpdateAnnouncementUserResponse)
	err := c.cc.Invoke(ctx, Middleware_UpdateAnnouncementUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetAnnouncementUser(ctx context.Context, in *GetAnnouncementUserRequest, opts ...grpc.CallOption) (*GetAnnouncementUserResponse, error) {
	out := new(GetAnnouncementUserResponse)
	err := c.cc.Invoke(ctx, Middleware_GetAnnouncementUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetAnnouncementUserOnly(ctx context.Context, in *GetAnnouncementUserOnlyRequest, opts ...grpc.CallOption) (*GetAnnouncementUserOnlyResponse, error) {
	out := new(GetAnnouncementUserOnlyResponse)
	err := c.cc.Invoke(ctx, Middleware_GetAnnouncementUserOnly_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetAnnouncementUsers(ctx context.Context, in *GetAnnouncementUsersRequest, opts ...grpc.CallOption) (*GetAnnouncementUsersResponse, error) {
	out := new(GetAnnouncementUsersResponse)
	err := c.cc.Invoke(ctx, Middleware_GetAnnouncementUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) ExistAnnouncementUser(ctx context.Context, in *ExistAnnouncementUserRequest, opts ...grpc.CallOption) (*ExistAnnouncementUserResponse, error) {
	out := new(ExistAnnouncementUserResponse)
	err := c.cc.Invoke(ctx, Middleware_ExistAnnouncementUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) ExistAnnouncementUserConds(ctx context.Context, in *ExistAnnouncementUserCondsRequest, opts ...grpc.CallOption) (*ExistAnnouncementUserCondsResponse, error) {
	out := new(ExistAnnouncementUserCondsResponse)
	err := c.cc.Invoke(ctx, Middleware_ExistAnnouncementUserConds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) CountAnnouncementUsers(ctx context.Context, in *CountAnnouncementUsersRequest, opts ...grpc.CallOption) (*CountAnnouncementUsersResponse, error) {
	out := new(CountAnnouncementUsersResponse)
	err := c.cc.Invoke(ctx, Middleware_CountAnnouncementUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) DeleteAnnouncementUser(ctx context.Context, in *DeleteAnnouncementUserRequest, opts ...grpc.CallOption) (*DeleteAnnouncementUserResponse, error) {
	out := new(DeleteAnnouncementUserResponse)
	err := c.cc.Invoke(ctx, Middleware_DeleteAnnouncementUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddlewareServer is the server API for Middleware service.
// All implementations must embed UnimplementedMiddlewareServer
// for forward compatibility
type MiddlewareServer interface {
	CreateAnnouncementUser(context.Context, *CreateAnnouncementUserRequest) (*CreateAnnouncementUserResponse, error)
	CreateAnnouncementUsers(context.Context, *CreateAnnouncementUsersRequest) (*CreateAnnouncementUsersResponse, error)
	UpdateAnnouncementUser(context.Context, *UpdateAnnouncementUserRequest) (*UpdateAnnouncementUserResponse, error)
	GetAnnouncementUser(context.Context, *GetAnnouncementUserRequest) (*GetAnnouncementUserResponse, error)
	GetAnnouncementUserOnly(context.Context, *GetAnnouncementUserOnlyRequest) (*GetAnnouncementUserOnlyResponse, error)
	GetAnnouncementUsers(context.Context, *GetAnnouncementUsersRequest) (*GetAnnouncementUsersResponse, error)
	ExistAnnouncementUser(context.Context, *ExistAnnouncementUserRequest) (*ExistAnnouncementUserResponse, error)
	ExistAnnouncementUserConds(context.Context, *ExistAnnouncementUserCondsRequest) (*ExistAnnouncementUserCondsResponse, error)
	CountAnnouncementUsers(context.Context, *CountAnnouncementUsersRequest) (*CountAnnouncementUsersResponse, error)
	DeleteAnnouncementUser(context.Context, *DeleteAnnouncementUserRequest) (*DeleteAnnouncementUserResponse, error)
	mustEmbedUnimplementedMiddlewareServer()
}

// UnimplementedMiddlewareServer must be embedded to have forward compatible implementations.
type UnimplementedMiddlewareServer struct {
}

func (UnimplementedMiddlewareServer) CreateAnnouncementUser(context.Context, *CreateAnnouncementUserRequest) (*CreateAnnouncementUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnnouncementUser not implemented")
}
func (UnimplementedMiddlewareServer) CreateAnnouncementUsers(context.Context, *CreateAnnouncementUsersRequest) (*CreateAnnouncementUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnnouncementUsers not implemented")
}
func (UnimplementedMiddlewareServer) UpdateAnnouncementUser(context.Context, *UpdateAnnouncementUserRequest) (*UpdateAnnouncementUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAnnouncementUser not implemented")
}
func (UnimplementedMiddlewareServer) GetAnnouncementUser(context.Context, *GetAnnouncementUserRequest) (*GetAnnouncementUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnnouncementUser not implemented")
}
func (UnimplementedMiddlewareServer) GetAnnouncementUserOnly(context.Context, *GetAnnouncementUserOnlyRequest) (*GetAnnouncementUserOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnnouncementUserOnly not implemented")
}
func (UnimplementedMiddlewareServer) GetAnnouncementUsers(context.Context, *GetAnnouncementUsersRequest) (*GetAnnouncementUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnnouncementUsers not implemented")
}
func (UnimplementedMiddlewareServer) ExistAnnouncementUser(context.Context, *ExistAnnouncementUserRequest) (*ExistAnnouncementUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistAnnouncementUser not implemented")
}
func (UnimplementedMiddlewareServer) ExistAnnouncementUserConds(context.Context, *ExistAnnouncementUserCondsRequest) (*ExistAnnouncementUserCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistAnnouncementUserConds not implemented")
}
func (UnimplementedMiddlewareServer) CountAnnouncementUsers(context.Context, *CountAnnouncementUsersRequest) (*CountAnnouncementUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAnnouncementUsers not implemented")
}
func (UnimplementedMiddlewareServer) DeleteAnnouncementUser(context.Context, *DeleteAnnouncementUserRequest) (*DeleteAnnouncementUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAnnouncementUser not implemented")
}
func (UnimplementedMiddlewareServer) mustEmbedUnimplementedMiddlewareServer() {}

// UnsafeMiddlewareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddlewareServer will
// result in compilation errors.
type UnsafeMiddlewareServer interface {
	mustEmbedUnimplementedMiddlewareServer()
}

func RegisterMiddlewareServer(s grpc.ServiceRegistrar, srv MiddlewareServer) {
	s.RegisterService(&Middleware_ServiceDesc, srv)
}

func _Middleware_CreateAnnouncementUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnnouncementUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreateAnnouncementUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_CreateAnnouncementUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreateAnnouncementUser(ctx, req.(*CreateAnnouncementUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_CreateAnnouncementUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnnouncementUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreateAnnouncementUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_CreateAnnouncementUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreateAnnouncementUsers(ctx, req.(*CreateAnnouncementUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_UpdateAnnouncementUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAnnouncementUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).UpdateAnnouncementUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_UpdateAnnouncementUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).UpdateAnnouncementUser(ctx, req.(*UpdateAnnouncementUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetAnnouncementUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnnouncementUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetAnnouncementUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetAnnouncementUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetAnnouncementUser(ctx, req.(*GetAnnouncementUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetAnnouncementUserOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnnouncementUserOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetAnnouncementUserOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetAnnouncementUserOnly_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetAnnouncementUserOnly(ctx, req.(*GetAnnouncementUserOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetAnnouncementUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnnouncementUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetAnnouncementUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetAnnouncementUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetAnnouncementUsers(ctx, req.(*GetAnnouncementUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_ExistAnnouncementUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistAnnouncementUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).ExistAnnouncementUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_ExistAnnouncementUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).ExistAnnouncementUser(ctx, req.(*ExistAnnouncementUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_ExistAnnouncementUserConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistAnnouncementUserCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).ExistAnnouncementUserConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_ExistAnnouncementUserConds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).ExistAnnouncementUserConds(ctx, req.(*ExistAnnouncementUserCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_CountAnnouncementUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAnnouncementUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CountAnnouncementUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_CountAnnouncementUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CountAnnouncementUsers(ctx, req.(*CountAnnouncementUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_DeleteAnnouncementUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAnnouncementUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).DeleteAnnouncementUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_DeleteAnnouncementUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).DeleteAnnouncementUser(ctx, req.(*DeleteAnnouncementUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Middleware_ServiceDesc is the grpc.ServiceDesc for Middleware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Middleware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notif.middleware.announcement.user.v1.Middleware",
	HandlerType: (*MiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAnnouncementUser",
			Handler:    _Middleware_CreateAnnouncementUser_Handler,
		},
		{
			MethodName: "CreateAnnouncementUsers",
			Handler:    _Middleware_CreateAnnouncementUsers_Handler,
		},
		{
			MethodName: "UpdateAnnouncementUser",
			Handler:    _Middleware_UpdateAnnouncementUser_Handler,
		},
		{
			MethodName: "GetAnnouncementUser",
			Handler:    _Middleware_GetAnnouncementUser_Handler,
		},
		{
			MethodName: "GetAnnouncementUserOnly",
			Handler:    _Middleware_GetAnnouncementUserOnly_Handler,
		},
		{
			MethodName: "GetAnnouncementUsers",
			Handler:    _Middleware_GetAnnouncementUsers_Handler,
		},
		{
			MethodName: "ExistAnnouncementUser",
			Handler:    _Middleware_ExistAnnouncementUser_Handler,
		},
		{
			MethodName: "ExistAnnouncementUserConds",
			Handler:    _Middleware_ExistAnnouncementUserConds_Handler,
		},
		{
			MethodName: "CountAnnouncementUsers",
			Handler:    _Middleware_CountAnnouncementUsers_Handler,
		},
		{
			MethodName: "DeleteAnnouncementUser",
			Handler:    _Middleware_DeleteAnnouncementUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/notif/mw/v1/announcement/user/user.proto",
}
