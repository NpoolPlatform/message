// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/notif/mw/v1/notif/tx/tx.proto

package tx

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Middleware_CreateTx_FullMethodName  = "/notif.middleware.tx.v1.Middleware/CreateTx"
	Middleware_UpdateTx_FullMethodName  = "/notif.middleware.tx.v1.Middleware/UpdateTx"
	Middleware_GetTxs_FullMethodName    = "/notif.middleware.tx.v1.Middleware/GetTxs"
	Middleware_GetTxOnly_FullMethodName = "/notif.middleware.tx.v1.Middleware/GetTxOnly"
)

// MiddlewareClient is the client API for Middleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddlewareClient interface {
	CreateTx(ctx context.Context, in *CreateTxRequest, opts ...grpc.CallOption) (*CreateTxResponse, error)
	UpdateTx(ctx context.Context, in *UpdateTxRequest, opts ...grpc.CallOption) (*UpdateTxResponse, error)
	GetTxs(ctx context.Context, in *GetTxsRequest, opts ...grpc.CallOption) (*GetTxsResponse, error)
	GetTxOnly(ctx context.Context, in *GetTxOnlyRequest, opts ...grpc.CallOption) (*GetTxOnlyResponse, error)
}

type middlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddlewareClient(cc grpc.ClientConnInterface) MiddlewareClient {
	return &middlewareClient{cc}
}

func (c *middlewareClient) CreateTx(ctx context.Context, in *CreateTxRequest, opts ...grpc.CallOption) (*CreateTxResponse, error) {
	out := new(CreateTxResponse)
	err := c.cc.Invoke(ctx, Middleware_CreateTx_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) UpdateTx(ctx context.Context, in *UpdateTxRequest, opts ...grpc.CallOption) (*UpdateTxResponse, error) {
	out := new(UpdateTxResponse)
	err := c.cc.Invoke(ctx, Middleware_UpdateTx_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetTxs(ctx context.Context, in *GetTxsRequest, opts ...grpc.CallOption) (*GetTxsResponse, error) {
	out := new(GetTxsResponse)
	err := c.cc.Invoke(ctx, Middleware_GetTxs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetTxOnly(ctx context.Context, in *GetTxOnlyRequest, opts ...grpc.CallOption) (*GetTxOnlyResponse, error) {
	out := new(GetTxOnlyResponse)
	err := c.cc.Invoke(ctx, Middleware_GetTxOnly_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddlewareServer is the server API for Middleware service.
// All implementations must embed UnimplementedMiddlewareServer
// for forward compatibility
type MiddlewareServer interface {
	CreateTx(context.Context, *CreateTxRequest) (*CreateTxResponse, error)
	UpdateTx(context.Context, *UpdateTxRequest) (*UpdateTxResponse, error)
	GetTxs(context.Context, *GetTxsRequest) (*GetTxsResponse, error)
	GetTxOnly(context.Context, *GetTxOnlyRequest) (*GetTxOnlyResponse, error)
	mustEmbedUnimplementedMiddlewareServer()
}

// UnimplementedMiddlewareServer must be embedded to have forward compatible implementations.
type UnimplementedMiddlewareServer struct {
}

func (UnimplementedMiddlewareServer) CreateTx(context.Context, *CreateTxRequest) (*CreateTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTx not implemented")
}
func (UnimplementedMiddlewareServer) UpdateTx(context.Context, *UpdateTxRequest) (*UpdateTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTx not implemented")
}
func (UnimplementedMiddlewareServer) GetTxs(context.Context, *GetTxsRequest) (*GetTxsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxs not implemented")
}
func (UnimplementedMiddlewareServer) GetTxOnly(context.Context, *GetTxOnlyRequest) (*GetTxOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxOnly not implemented")
}
func (UnimplementedMiddlewareServer) mustEmbedUnimplementedMiddlewareServer() {}

// UnsafeMiddlewareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddlewareServer will
// result in compilation errors.
type UnsafeMiddlewareServer interface {
	mustEmbedUnimplementedMiddlewareServer()
}

func RegisterMiddlewareServer(s grpc.ServiceRegistrar, srv MiddlewareServer) {
	s.RegisterService(&Middleware_ServiceDesc, srv)
}

func _Middleware_CreateTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreateTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_CreateTx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreateTx(ctx, req.(*CreateTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_UpdateTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).UpdateTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_UpdateTx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).UpdateTx(ctx, req.(*UpdateTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetTxs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTxsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetTxs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetTxs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetTxs(ctx, req.(*GetTxsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetTxOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTxOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetTxOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetTxOnly_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetTxOnly(ctx, req.(*GetTxOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Middleware_ServiceDesc is the grpc.ServiceDesc for Middleware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Middleware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notif.middleware.tx.v1.Middleware",
	HandlerType: (*MiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTx",
			Handler:    _Middleware_CreateTx_Handler,
		},
		{
			MethodName: "UpdateTx",
			Handler:    _Middleware_UpdateTx_Handler,
		},
		{
			MethodName: "GetTxs",
			Handler:    _Middleware_GetTxs_Handler,
		},
		{
			MethodName: "GetTxOnly",
			Handler:    _Middleware_GetTxOnly_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/notif/mw/v1/notif/tx/tx.proto",
}
