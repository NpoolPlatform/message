syntax = "proto3";

package notif.middleware.notif.channel.v1;

option go_package = "github.com/NpoolPlatform/message/npool/notif/mw/v1/notif/channel";

import "npool/basetypes/v1/channel.proto";
import "npool/basetypes/v1/usedfor.proto";
import "npool/basetypes/v1/conds.proto";

// Service Name
service Middleware {
    rpc CreateChannel     (CreateChannelRequest)     returns (CreateChannelResponse)     {}
    rpc UpdateChannel     (UpdateChannelRequest)     returns (UpdateChannelResponse)     {}
    rpc GetChannels       (GetChannelsRequest)       returns (GetChannelsResponse)       {}
    rpc GetChannelOnly    (GetChannelOnlyRequest)    returns (GetChannelOnlyResponse)    {}
    rpc GetChannel        (GetChannelRequest)        returns (GetChannelResponse)        {}
    rpc ExistChannel      (ExistChannelRequest)      returns (ExistChannelResponse)      {}
    rpc ExistChannelConds (ExistChannelCondsRequest) returns (ExistChannelCondsResponse) {}
    rpc DeleteChannel     (DeleteChannelRequest)     returns (DeleteChannelResponse)     {}
}

message Channel {
    // @inject_tag: sql:"id"
    uint32               ID           = 9;
    // @inject_tag: sql:"ent_id"
    string               EntID        = 10;
    // @inject_tag: sql:"app_id"
    string               AppID        = 20;
    // @inject_tag: sql:"event_type"
    string               EventTypeStr = 29;
    basetypes.v1.UsedFor EventType    = 30;
    // @inject_tag: sql:"channel"
    string               ChannelStr   = 39;
    basetypes.v1.NotifChannel Channel = 40;
    // @inject_tag: sql:"created_at"
    uint32               CreatedAt    = 50;
    // @inject_tag: sql:"updated_at"
    uint32               UpdatedAt    = 60;
}

message ChannelReq {
    optional uint32               ID           = 9;
    optional string               EntID        = 10;
    optional string               AppID        = 20;
    optional basetypes.v1.UsedFor EventType    = 30;
    optional basetypes.v1.NotifChannel Channel = 40;
}

message Conds {
    optional basetypes.v1.Uint32Val ID         = 9;
    optional basetypes.v1.StringVal EntID      = 10;
    optional basetypes.v1.StringVal AppID      = 20;
    optional basetypes.v1.Uint32Val EventType  = 30;
    optional basetypes.v1.Uint32Val Channel    = 40;
}

message GetChannelsRequest {
    Conds Conds   = 10;
    int32 Offset  = 20;
    int32 Limit   = 30;
}

message GetChannelsResponse {
    repeated Channel Infos = 10;
    uint32           Total = 20;
}

message GetChannelOnlyRequest {
    Conds Conds   = 10;
}

message GetChannelOnlyResponse {
    Channel Info = 10;
}

message CreateChannelRequest {
    ChannelReq Info = 10;
}

message CreateChannelResponse {
    Channel Info = 10;
}

message UpdateChannelRequest {
    ChannelReq Info = 10;
}

message UpdateChannelResponse {
    Channel Info = 10;
}

message GetChannelRequest {
    string EntID = 10;
}

message GetChannelResponse {
    Channel Info = 10;
}

message ExistChannelRequest {
    string EntID = 10;
}

message ExistChannelResponse {
    bool Info = 10;
}

message ExistChannelCondsRequest {
    Conds Conds = 10;
}

message ExistChannelCondsResponse {
    bool Info = 10;
}

message DeleteChannelRequest {
    ChannelReq Info = 10;
}

message DeleteChannelResponse {
    Channel Info = 10;
}