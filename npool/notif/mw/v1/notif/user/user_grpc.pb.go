// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/notif/mw/v1/notif/user/user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Middleware_CreateUserNotif_FullMethodName     = "/notif.middleware.notif.user.v1.Middleware/CreateUserNotif"
	Middleware_CreateUserNotifs_FullMethodName    = "/notif.middleware.notif.user.v1.Middleware/CreateUserNotifs"
	Middleware_UpdateUserNotif_FullMethodName     = "/notif.middleware.notif.user.v1.Middleware/UpdateUserNotif"
	Middleware_GetUserNotif_FullMethodName        = "/notif.middleware.notif.user.v1.Middleware/GetUserNotif"
	Middleware_GetUserNotifOnly_FullMethodName    = "/notif.middleware.notif.user.v1.Middleware/GetUserNotifOnly"
	Middleware_GetUserNotifs_FullMethodName       = "/notif.middleware.notif.user.v1.Middleware/GetUserNotifs"
	Middleware_ExistUserNotif_FullMethodName      = "/notif.middleware.notif.user.v1.Middleware/ExistUserNotif"
	Middleware_ExistUserNotifConds_FullMethodName = "/notif.middleware.notif.user.v1.Middleware/ExistUserNotifConds"
	Middleware_CountUserNotifs_FullMethodName     = "/notif.middleware.notif.user.v1.Middleware/CountUserNotifs"
	Middleware_DeleteUserNotif_FullMethodName     = "/notif.middleware.notif.user.v1.Middleware/DeleteUserNotif"
)

// MiddlewareClient is the client API for Middleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddlewareClient interface {
	CreateUserNotif(ctx context.Context, in *CreateUserNotifRequest, opts ...grpc.CallOption) (*CreateUserNotifResponse, error)
	CreateUserNotifs(ctx context.Context, in *CreateUserNotifsRequest, opts ...grpc.CallOption) (*CreateUserNotifsResponse, error)
	UpdateUserNotif(ctx context.Context, in *UpdateUserNotifRequest, opts ...grpc.CallOption) (*UpdateUserNotifResponse, error)
	GetUserNotif(ctx context.Context, in *GetUserNotifRequest, opts ...grpc.CallOption) (*GetUserNotifResponse, error)
	GetUserNotifOnly(ctx context.Context, in *GetUserNotifOnlyRequest, opts ...grpc.CallOption) (*GetUserNotifOnlyResponse, error)
	GetUserNotifs(ctx context.Context, in *GetUserNotifsRequest, opts ...grpc.CallOption) (*GetUserNotifsResponse, error)
	ExistUserNotif(ctx context.Context, in *ExistUserNotifRequest, opts ...grpc.CallOption) (*ExistUserNotifResponse, error)
	ExistUserNotifConds(ctx context.Context, in *ExistUserNotifCondsRequest, opts ...grpc.CallOption) (*ExistUserNotifCondsResponse, error)
	CountUserNotifs(ctx context.Context, in *CountUserNotifsRequest, opts ...grpc.CallOption) (*CountUserNotifsResponse, error)
	DeleteUserNotif(ctx context.Context, in *DeleteUserNotifRequest, opts ...grpc.CallOption) (*DeleteUserNotifResponse, error)
}

type middlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddlewareClient(cc grpc.ClientConnInterface) MiddlewareClient {
	return &middlewareClient{cc}
}

func (c *middlewareClient) CreateUserNotif(ctx context.Context, in *CreateUserNotifRequest, opts ...grpc.CallOption) (*CreateUserNotifResponse, error) {
	out := new(CreateUserNotifResponse)
	err := c.cc.Invoke(ctx, Middleware_CreateUserNotif_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) CreateUserNotifs(ctx context.Context, in *CreateUserNotifsRequest, opts ...grpc.CallOption) (*CreateUserNotifsResponse, error) {
	out := new(CreateUserNotifsResponse)
	err := c.cc.Invoke(ctx, Middleware_CreateUserNotifs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) UpdateUserNotif(ctx context.Context, in *UpdateUserNotifRequest, opts ...grpc.CallOption) (*UpdateUserNotifResponse, error) {
	out := new(UpdateUserNotifResponse)
	err := c.cc.Invoke(ctx, Middleware_UpdateUserNotif_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetUserNotif(ctx context.Context, in *GetUserNotifRequest, opts ...grpc.CallOption) (*GetUserNotifResponse, error) {
	out := new(GetUserNotifResponse)
	err := c.cc.Invoke(ctx, Middleware_GetUserNotif_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetUserNotifOnly(ctx context.Context, in *GetUserNotifOnlyRequest, opts ...grpc.CallOption) (*GetUserNotifOnlyResponse, error) {
	out := new(GetUserNotifOnlyResponse)
	err := c.cc.Invoke(ctx, Middleware_GetUserNotifOnly_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetUserNotifs(ctx context.Context, in *GetUserNotifsRequest, opts ...grpc.CallOption) (*GetUserNotifsResponse, error) {
	out := new(GetUserNotifsResponse)
	err := c.cc.Invoke(ctx, Middleware_GetUserNotifs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) ExistUserNotif(ctx context.Context, in *ExistUserNotifRequest, opts ...grpc.CallOption) (*ExistUserNotifResponse, error) {
	out := new(ExistUserNotifResponse)
	err := c.cc.Invoke(ctx, Middleware_ExistUserNotif_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) ExistUserNotifConds(ctx context.Context, in *ExistUserNotifCondsRequest, opts ...grpc.CallOption) (*ExistUserNotifCondsResponse, error) {
	out := new(ExistUserNotifCondsResponse)
	err := c.cc.Invoke(ctx, Middleware_ExistUserNotifConds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) CountUserNotifs(ctx context.Context, in *CountUserNotifsRequest, opts ...grpc.CallOption) (*CountUserNotifsResponse, error) {
	out := new(CountUserNotifsResponse)
	err := c.cc.Invoke(ctx, Middleware_CountUserNotifs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) DeleteUserNotif(ctx context.Context, in *DeleteUserNotifRequest, opts ...grpc.CallOption) (*DeleteUserNotifResponse, error) {
	out := new(DeleteUserNotifResponse)
	err := c.cc.Invoke(ctx, Middleware_DeleteUserNotif_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddlewareServer is the server API for Middleware service.
// All implementations must embed UnimplementedMiddlewareServer
// for forward compatibility
type MiddlewareServer interface {
	CreateUserNotif(context.Context, *CreateUserNotifRequest) (*CreateUserNotifResponse, error)
	CreateUserNotifs(context.Context, *CreateUserNotifsRequest) (*CreateUserNotifsResponse, error)
	UpdateUserNotif(context.Context, *UpdateUserNotifRequest) (*UpdateUserNotifResponse, error)
	GetUserNotif(context.Context, *GetUserNotifRequest) (*GetUserNotifResponse, error)
	GetUserNotifOnly(context.Context, *GetUserNotifOnlyRequest) (*GetUserNotifOnlyResponse, error)
	GetUserNotifs(context.Context, *GetUserNotifsRequest) (*GetUserNotifsResponse, error)
	ExistUserNotif(context.Context, *ExistUserNotifRequest) (*ExistUserNotifResponse, error)
	ExistUserNotifConds(context.Context, *ExistUserNotifCondsRequest) (*ExistUserNotifCondsResponse, error)
	CountUserNotifs(context.Context, *CountUserNotifsRequest) (*CountUserNotifsResponse, error)
	DeleteUserNotif(context.Context, *DeleteUserNotifRequest) (*DeleteUserNotifResponse, error)
	mustEmbedUnimplementedMiddlewareServer()
}

// UnimplementedMiddlewareServer must be embedded to have forward compatible implementations.
type UnimplementedMiddlewareServer struct {
}

func (UnimplementedMiddlewareServer) CreateUserNotif(context.Context, *CreateUserNotifRequest) (*CreateUserNotifResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserNotif not implemented")
}
func (UnimplementedMiddlewareServer) CreateUserNotifs(context.Context, *CreateUserNotifsRequest) (*CreateUserNotifsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserNotifs not implemented")
}
func (UnimplementedMiddlewareServer) UpdateUserNotif(context.Context, *UpdateUserNotifRequest) (*UpdateUserNotifResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserNotif not implemented")
}
func (UnimplementedMiddlewareServer) GetUserNotif(context.Context, *GetUserNotifRequest) (*GetUserNotifResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserNotif not implemented")
}
func (UnimplementedMiddlewareServer) GetUserNotifOnly(context.Context, *GetUserNotifOnlyRequest) (*GetUserNotifOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserNotifOnly not implemented")
}
func (UnimplementedMiddlewareServer) GetUserNotifs(context.Context, *GetUserNotifsRequest) (*GetUserNotifsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserNotifs not implemented")
}
func (UnimplementedMiddlewareServer) ExistUserNotif(context.Context, *ExistUserNotifRequest) (*ExistUserNotifResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistUserNotif not implemented")
}
func (UnimplementedMiddlewareServer) ExistUserNotifConds(context.Context, *ExistUserNotifCondsRequest) (*ExistUserNotifCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistUserNotifConds not implemented")
}
func (UnimplementedMiddlewareServer) CountUserNotifs(context.Context, *CountUserNotifsRequest) (*CountUserNotifsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountUserNotifs not implemented")
}
func (UnimplementedMiddlewareServer) DeleteUserNotif(context.Context, *DeleteUserNotifRequest) (*DeleteUserNotifResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserNotif not implemented")
}
func (UnimplementedMiddlewareServer) mustEmbedUnimplementedMiddlewareServer() {}

// UnsafeMiddlewareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddlewareServer will
// result in compilation errors.
type UnsafeMiddlewareServer interface {
	mustEmbedUnimplementedMiddlewareServer()
}

func RegisterMiddlewareServer(s grpc.ServiceRegistrar, srv MiddlewareServer) {
	s.RegisterService(&Middleware_ServiceDesc, srv)
}

func _Middleware_CreateUserNotif_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserNotifRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreateUserNotif(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_CreateUserNotif_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreateUserNotif(ctx, req.(*CreateUserNotifRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_CreateUserNotifs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserNotifsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreateUserNotifs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_CreateUserNotifs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreateUserNotifs(ctx, req.(*CreateUserNotifsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_UpdateUserNotif_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserNotifRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).UpdateUserNotif(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_UpdateUserNotif_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).UpdateUserNotif(ctx, req.(*UpdateUserNotifRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetUserNotif_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserNotifRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetUserNotif(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetUserNotif_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetUserNotif(ctx, req.(*GetUserNotifRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetUserNotifOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserNotifOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetUserNotifOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetUserNotifOnly_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetUserNotifOnly(ctx, req.(*GetUserNotifOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetUserNotifs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserNotifsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetUserNotifs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetUserNotifs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetUserNotifs(ctx, req.(*GetUserNotifsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_ExistUserNotif_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistUserNotifRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).ExistUserNotif(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_ExistUserNotif_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).ExistUserNotif(ctx, req.(*ExistUserNotifRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_ExistUserNotifConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistUserNotifCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).ExistUserNotifConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_ExistUserNotifConds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).ExistUserNotifConds(ctx, req.(*ExistUserNotifCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_CountUserNotifs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountUserNotifsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CountUserNotifs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_CountUserNotifs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CountUserNotifs(ctx, req.(*CountUserNotifsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_DeleteUserNotif_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserNotifRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).DeleteUserNotif(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_DeleteUserNotif_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).DeleteUserNotif(ctx, req.(*DeleteUserNotifRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Middleware_ServiceDesc is the grpc.ServiceDesc for Middleware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Middleware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notif.middleware.notif.user.v1.Middleware",
	HandlerType: (*MiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUserNotif",
			Handler:    _Middleware_CreateUserNotif_Handler,
		},
		{
			MethodName: "CreateUserNotifs",
			Handler:    _Middleware_CreateUserNotifs_Handler,
		},
		{
			MethodName: "UpdateUserNotif",
			Handler:    _Middleware_UpdateUserNotif_Handler,
		},
		{
			MethodName: "GetUserNotif",
			Handler:    _Middleware_GetUserNotif_Handler,
		},
		{
			MethodName: "GetUserNotifOnly",
			Handler:    _Middleware_GetUserNotifOnly_Handler,
		},
		{
			MethodName: "GetUserNotifs",
			Handler:    _Middleware_GetUserNotifs_Handler,
		},
		{
			MethodName: "ExistUserNotif",
			Handler:    _Middleware_ExistUserNotif_Handler,
		},
		{
			MethodName: "ExistUserNotifConds",
			Handler:    _Middleware_ExistUserNotifConds_Handler,
		},
		{
			MethodName: "CountUserNotifs",
			Handler:    _Middleware_CountUserNotifs_Handler,
		},
		{
			MethodName: "DeleteUserNotif",
			Handler:    _Middleware_DeleteUserNotif_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/notif/mw/v1/notif/user/user.proto",
}
