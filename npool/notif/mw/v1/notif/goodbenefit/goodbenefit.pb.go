// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.18.1
// source: npool/notif/mw/v1/notif/goodbenefit/goodbenefit.proto

package goodbenefit

import (
	v1 "github.com/NpoolPlatform/message/npool/basetypes/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GoodBenefitReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          *string    `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	GoodID      *string    `protobuf:"bytes,20,opt,name=GoodID,proto3,oneof" json:"GoodID,omitempty"`
	GoodName    *string    `protobuf:"bytes,30,opt,name=GoodName,proto3,oneof" json:"GoodName,omitempty"`
	Amount      *string    `protobuf:"bytes,40,opt,name=Amount,proto3,oneof" json:"Amount,omitempty"`
	State       *v1.Result `protobuf:"varint,50,opt,name=State,proto3,enum=basetypes.v1.Result,oneof" json:"State,omitempty"`
	Message     *string    `protobuf:"bytes,60,opt,name=Message,proto3,oneof" json:"Message,omitempty"`
	BenefitDate *uint32    `protobuf:"varint,70,opt,name=BenefitDate,proto3,oneof" json:"BenefitDate,omitempty"`
	TxID        *string    `protobuf:"bytes,80,opt,name=TxID,proto3,oneof" json:"TxID,omitempty"`
	Generated   *bool      `protobuf:"varint,90,opt,name=Generated,proto3,oneof" json:"Generated,omitempty"`
}

func (x *GoodBenefitReq) Reset() {
	*x = GoodBenefitReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodBenefitReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodBenefitReq) ProtoMessage() {}

func (x *GoodBenefitReq) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodBenefitReq.ProtoReflect.Descriptor instead.
func (*GoodBenefitReq) Descriptor() ([]byte, []int) {
	return file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_rawDescGZIP(), []int{0}
}

func (x *GoodBenefitReq) GetID() string {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return ""
}

func (x *GoodBenefitReq) GetGoodID() string {
	if x != nil && x.GoodID != nil {
		return *x.GoodID
	}
	return ""
}

func (x *GoodBenefitReq) GetGoodName() string {
	if x != nil && x.GoodName != nil {
		return *x.GoodName
	}
	return ""
}

func (x *GoodBenefitReq) GetAmount() string {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return ""
}

func (x *GoodBenefitReq) GetState() v1.Result {
	if x != nil && x.State != nil {
		return *x.State
	}
	return v1.Result(0)
}

func (x *GoodBenefitReq) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *GoodBenefitReq) GetBenefitDate() uint32 {
	if x != nil && x.BenefitDate != nil {
		return *x.BenefitDate
	}
	return 0
}

func (x *GoodBenefitReq) GetTxID() string {
	if x != nil && x.TxID != nil {
		return *x.TxID
	}
	return ""
}

func (x *GoodBenefitReq) GetGenerated() bool {
	if x != nil && x.Generated != nil {
		return *x.Generated
	}
	return false
}

type GoodBenefit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: sql:"id"
	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty" sql:"id"`
	// @inject_tag: sql:"good_id"
	GoodID string `protobuf:"bytes,20,opt,name=GoodID,proto3" json:"GoodID,omitempty" sql:"good_id"`
	// @inject_tag: sql:"good_name"
	GoodName string `protobuf:"bytes,30,opt,name=GoodName,proto3" json:"GoodName,omitempty" sql:"good_name"`
	// @inject_tag: sql:"amount"
	Amount string `protobuf:"bytes,40,opt,name=Amount,proto3" json:"Amount,omitempty" sql:"amount"`
	// @inject_tag: sql:"state"
	StateStr string    `protobuf:"bytes,50,opt,name=StateStr,proto3" json:"StateStr,omitempty" sql:"state"`
	State    v1.Result `protobuf:"varint,51,opt,name=State,proto3,enum=basetypes.v1.Result" json:"State,omitempty"`
	// @inject_tag: sql:"message"
	Message string `protobuf:"bytes,60,opt,name=Message,proto3" json:"Message,omitempty" sql:"message"`
	// @inject_tag: sql:"benefit_date"
	BenefitDate uint32 `protobuf:"varint,70,opt,name=BenefitDate,proto3" json:"BenefitDate,omitempty" sql:"benefit_date"`
	// @inject_tag: sql:"tx_id"
	TxID string `protobuf:"bytes,80,opt,name=TxID,proto3" json:"TxID,omitempty" sql:"tx_id"`
	// @inject_tag: sql:"generated"
	Generated bool `protobuf:"varint,90,opt,name=Generated,proto3" json:"Generated,omitempty" sql:"generated"`
	// @inject_tag: sql:"created_at"
	CreatedAt uint32 `protobuf:"varint,100,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty" sql:"created_at"`
	// @inject_tag: sql:"updated_at"
	UpdatedAt uint32 `protobuf:"varint,110,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty" sql:"updated_at"`
}

func (x *GoodBenefit) Reset() {
	*x = GoodBenefit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodBenefit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodBenefit) ProtoMessage() {}

func (x *GoodBenefit) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodBenefit.ProtoReflect.Descriptor instead.
func (*GoodBenefit) Descriptor() ([]byte, []int) {
	return file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_rawDescGZIP(), []int{1}
}

func (x *GoodBenefit) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *GoodBenefit) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *GoodBenefit) GetGoodName() string {
	if x != nil {
		return x.GoodName
	}
	return ""
}

func (x *GoodBenefit) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *GoodBenefit) GetStateStr() string {
	if x != nil {
		return x.StateStr
	}
	return ""
}

func (x *GoodBenefit) GetState() v1.Result {
	if x != nil {
		return x.State
	}
	return v1.Result(0)
}

func (x *GoodBenefit) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GoodBenefit) GetBenefitDate() uint32 {
	if x != nil {
		return x.BenefitDate
	}
	return 0
}

func (x *GoodBenefit) GetTxID() string {
	if x != nil {
		return x.TxID
	}
	return ""
}

func (x *GoodBenefit) GetGenerated() bool {
	if x != nil {
		return x.Generated
	}
	return false
}

func (x *GoodBenefit) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *GoodBenefit) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               *v1.StringVal `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	GoodID           *v1.StringVal `protobuf:"bytes,20,opt,name=GoodID,proto3,oneof" json:"GoodID,omitempty"`
	Generated        *v1.BoolVal   `protobuf:"bytes,30,opt,name=Generated,proto3,oneof" json:"Generated,omitempty"`
	BenefitDateStart *v1.Uint32Val `protobuf:"bytes,40,opt,name=BenefitDateStart,proto3,oneof" json:"BenefitDateStart,omitempty"`
	BenefitDateEnd   *v1.Uint32Val `protobuf:"bytes,50,opt,name=BenefitDateEnd,proto3,oneof" json:"BenefitDateEnd,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *v1.StringVal {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetGoodID() *v1.StringVal {
	if x != nil {
		return x.GoodID
	}
	return nil
}

func (x *Conds) GetGenerated() *v1.BoolVal {
	if x != nil {
		return x.Generated
	}
	return nil
}

func (x *Conds) GetBenefitDateStart() *v1.Uint32Val {
	if x != nil {
		return x.BenefitDateStart
	}
	return nil
}

func (x *Conds) GetBenefitDateEnd() *v1.Uint32Val {
	if x != nil {
		return x.BenefitDateEnd
	}
	return nil
}

type CreateGoodBenefitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *GoodBenefitReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateGoodBenefitRequest) Reset() {
	*x = CreateGoodBenefitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGoodBenefitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGoodBenefitRequest) ProtoMessage() {}

func (x *CreateGoodBenefitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGoodBenefitRequest.ProtoReflect.Descriptor instead.
func (*CreateGoodBenefitRequest) Descriptor() ([]byte, []int) {
	return file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_rawDescGZIP(), []int{3}
}

func (x *CreateGoodBenefitRequest) GetInfo() *GoodBenefitReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateGoodBenefitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *GoodBenefit `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateGoodBenefitResponse) Reset() {
	*x = CreateGoodBenefitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGoodBenefitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGoodBenefitResponse) ProtoMessage() {}

func (x *CreateGoodBenefitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGoodBenefitResponse.ProtoReflect.Descriptor instead.
func (*CreateGoodBenefitResponse) Descriptor() ([]byte, []int) {
	return file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_rawDescGZIP(), []int{4}
}

func (x *CreateGoodBenefitResponse) GetInfo() *GoodBenefit {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateGoodBenefitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *GoodBenefitReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateGoodBenefitRequest) Reset() {
	*x = UpdateGoodBenefitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGoodBenefitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGoodBenefitRequest) ProtoMessage() {}

func (x *UpdateGoodBenefitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGoodBenefitRequest.ProtoReflect.Descriptor instead.
func (*UpdateGoodBenefitRequest) Descriptor() ([]byte, []int) {
	return file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateGoodBenefitRequest) GetInfo() *GoodBenefitReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateGoodBenefitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *GoodBenefit `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateGoodBenefitResponse) Reset() {
	*x = UpdateGoodBenefitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGoodBenefitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGoodBenefitResponse) ProtoMessage() {}

func (x *UpdateGoodBenefitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGoodBenefitResponse.ProtoReflect.Descriptor instead.
func (*UpdateGoodBenefitResponse) Descriptor() ([]byte, []int) {
	return file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateGoodBenefitResponse) GetInfo() *GoodBenefit {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetGoodBenefitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetGoodBenefitsRequest) Reset() {
	*x = GetGoodBenefitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodBenefitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodBenefitsRequest) ProtoMessage() {}

func (x *GetGoodBenefitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodBenefitsRequest.ProtoReflect.Descriptor instead.
func (*GetGoodBenefitsRequest) Descriptor() ([]byte, []int) {
	return file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_rawDescGZIP(), []int{7}
}

func (x *GetGoodBenefitsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetGoodBenefitsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetGoodBenefitsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetGoodBenefitsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*GoodBenefit `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32         `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetGoodBenefitsResponse) Reset() {
	*x = GetGoodBenefitsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodBenefitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodBenefitsResponse) ProtoMessage() {}

func (x *GetGoodBenefitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodBenefitsResponse.ProtoReflect.Descriptor instead.
func (*GetGoodBenefitsResponse) Descriptor() ([]byte, []int) {
	return file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_rawDescGZIP(), []int{8}
}

func (x *GetGoodBenefitsResponse) GetInfos() []*GoodBenefit {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetGoodBenefitsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetGoodBenefitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetGoodBenefitRequest) Reset() {
	*x = GetGoodBenefitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodBenefitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodBenefitRequest) ProtoMessage() {}

func (x *GetGoodBenefitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodBenefitRequest.ProtoReflect.Descriptor instead.
func (*GetGoodBenefitRequest) Descriptor() ([]byte, []int) {
	return file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_rawDescGZIP(), []int{9}
}

func (x *GetGoodBenefitRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetGoodBenefitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *GoodBenefit `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetGoodBenefitResponse) Reset() {
	*x = GetGoodBenefitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodBenefitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodBenefitResponse) ProtoMessage() {}

func (x *GetGoodBenefitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodBenefitResponse.ProtoReflect.Descriptor instead.
func (*GetGoodBenefitResponse) Descriptor() ([]byte, []int) {
	return file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_rawDescGZIP(), []int{10}
}

func (x *GetGoodBenefitResponse) GetInfo() *GoodBenefit {
	if x != nil {
		return x.Info
	}
	return nil
}

type ExistGoodBenefitCondsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *ExistGoodBenefitCondsRequest) Reset() {
	*x = ExistGoodBenefitCondsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistGoodBenefitCondsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistGoodBenefitCondsRequest) ProtoMessage() {}

func (x *ExistGoodBenefitCondsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistGoodBenefitCondsRequest.ProtoReflect.Descriptor instead.
func (*ExistGoodBenefitCondsRequest) Descriptor() ([]byte, []int) {
	return file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_rawDescGZIP(), []int{11}
}

func (x *ExistGoodBenefitCondsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type ExistGoodBenefitCondsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistGoodBenefitCondsResponse) Reset() {
	*x = ExistGoodBenefitCondsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistGoodBenefitCondsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistGoodBenefitCondsResponse) ProtoMessage() {}

func (x *ExistGoodBenefitCondsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistGoodBenefitCondsResponse.ProtoReflect.Descriptor instead.
func (*ExistGoodBenefitCondsResponse) Descriptor() ([]byte, []int) {
	return file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_rawDescGZIP(), []int{12}
}

func (x *ExistGoodBenefitCondsResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type DeleteGoodBenefitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *GoodBenefitReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteGoodBenefitRequest) Reset() {
	*x = DeleteGoodBenefitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGoodBenefitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGoodBenefitRequest) ProtoMessage() {}

func (x *DeleteGoodBenefitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGoodBenefitRequest.ProtoReflect.Descriptor instead.
func (*DeleteGoodBenefitRequest) Descriptor() ([]byte, []int) {
	return file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteGoodBenefitRequest) GetInfo() *GoodBenefitReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type DeleteGoodBenefitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *GoodBenefit `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteGoodBenefitResponse) Reset() {
	*x = DeleteGoodBenefitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGoodBenefitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGoodBenefitResponse) ProtoMessage() {}

func (x *DeleteGoodBenefitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGoodBenefitResponse.ProtoReflect.Descriptor instead.
func (*DeleteGoodBenefitResponse) Descriptor() ([]byte, []int) {
	return file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteGoodBenefitResponse) GetInfo() *GoodBenefit {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto protoreflect.FileDescriptor

var file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_rawDesc = []byte{
	0x0a, 0x35, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2f, 0x6d, 0x77,
	0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x62, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x74, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x25, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1e,
	0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x9a, 0x03, 0x0a, 0x0e, 0x47, 0x6f, 0x6f, 0x64, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x13, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49,
	0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49,
	0x44, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x2f, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x04, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x3c,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x06, 0x52, 0x0b, 0x42, 0x65, 0x6e, 0x65, 0x66,
	0x69, 0x74, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x54, 0x78, 0x49,
	0x44, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x04, 0x54, 0x78, 0x49, 0x44, 0x88,
	0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x5a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x08, 0x52, 0x09, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x47, 0x6f, 0x6f, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x54, 0x78, 0x49, 0x44, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x22, 0xdb, 0x02, 0x0a,
	0x0b, 0x47, 0x6f, 0x6f, 0x64, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x6f,
	0x6f, 0x64, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x72, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x72, 0x12, 0x2a, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x54, 0x78, 0x49, 0x44, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x78, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x5a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xfd, 0x02, 0x0a, 0x05, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88,
	0x01, 0x01, 0x12, 0x34, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x01, 0x52, 0x06, 0x47,
	0x6f, 0x6f, 0x64, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x09, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x48, 0x02, 0x52, 0x09, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x48, 0x0a, 0x10, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x03, 0x52, 0x10, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0e,
	0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x44, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x04, 0x52,
	0x0e, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x44, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x88,
	0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x47, 0x6f,
	0x6f, 0x64, 0x49, 0x44, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x42, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x74, 0x44, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x22, 0x65, 0x0a, 0x18, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f,
	0x64, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x63, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x42,
	0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74,
	0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x65, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x47, 0x6f, 0x6f, 0x64, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x49, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x62, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x42, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x74, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x63, 0x0a,
	0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x42, 0x65, 0x6e, 0x65, 0x66,
	0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x8a, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x42, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a,
	0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22,
	0x79, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x52, 0x05, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x27, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x47, 0x6f, 0x6f, 0x64, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x44, 0x22, 0x60, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x42, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x62, 0x0a, 0x1c, 0x45, 0x78, 0x69, 0x73, 0x74, 0x47, 0x6f,
	0x6f, 0x64, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x33, 0x0a, 0x1d, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x65,
	0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x42, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x52, 0x65, 0x71, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x63, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47,
	0x6f, 0x6f, 0x64, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x46, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x62, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x42, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x74, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0xab, 0x07, 0x0a, 0x0a, 0x4d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x11, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x12,
	0x3f, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x62, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f,
	0x6f, 0x64, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x40, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x62, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47,
	0x6f, 0x6f, 0x64, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x98, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47,
	0x6f, 0x6f, 0x64, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x12, 0x3f, 0x2e, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x42, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x42, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x92, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x42, 0x65, 0x6e, 0x65, 0x66,
	0x69, 0x74, 0x73, 0x12, 0x3d, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47,
	0x6f, 0x6f, 0x64, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x6f,
	0x6f, 0x64, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x8f, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64,
	0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x12, 0x3c, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x47, 0x6f, 0x6f, 0x64, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa4, 0x01, 0x0a, 0x15, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x47, 0x6f, 0x6f, 0x64, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x43, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x62, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x47, 0x6f,
	0x6f, 0x64, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x98, 0x01,
	0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x42, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x74, 0x12, 0x3f, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x46, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f,
	0x6f, 0x6c, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_rawDescOnce sync.Once
	file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_rawDescData = file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_rawDesc
)

func file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_rawDescGZIP() []byte {
	file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_rawDescOnce.Do(func() {
		file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_rawDescData)
	})
	return file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_rawDescData
}

var file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_goTypes = []interface{}{
	(*GoodBenefitReq)(nil),                // 0: notif.middleware.notif.goodbenefit.v1.GoodBenefitReq
	(*GoodBenefit)(nil),                   // 1: notif.middleware.notif.goodbenefit.v1.GoodBenefit
	(*Conds)(nil),                         // 2: notif.middleware.notif.goodbenefit.v1.Conds
	(*CreateGoodBenefitRequest)(nil),      // 3: notif.middleware.notif.goodbenefit.v1.CreateGoodBenefitRequest
	(*CreateGoodBenefitResponse)(nil),     // 4: notif.middleware.notif.goodbenefit.v1.CreateGoodBenefitResponse
	(*UpdateGoodBenefitRequest)(nil),      // 5: notif.middleware.notif.goodbenefit.v1.UpdateGoodBenefitRequest
	(*UpdateGoodBenefitResponse)(nil),     // 6: notif.middleware.notif.goodbenefit.v1.UpdateGoodBenefitResponse
	(*GetGoodBenefitsRequest)(nil),        // 7: notif.middleware.notif.goodbenefit.v1.GetGoodBenefitsRequest
	(*GetGoodBenefitsResponse)(nil),       // 8: notif.middleware.notif.goodbenefit.v1.GetGoodBenefitsResponse
	(*GetGoodBenefitRequest)(nil),         // 9: notif.middleware.notif.goodbenefit.v1.GetGoodBenefitRequest
	(*GetGoodBenefitResponse)(nil),        // 10: notif.middleware.notif.goodbenefit.v1.GetGoodBenefitResponse
	(*ExistGoodBenefitCondsRequest)(nil),  // 11: notif.middleware.notif.goodbenefit.v1.ExistGoodBenefitCondsRequest
	(*ExistGoodBenefitCondsResponse)(nil), // 12: notif.middleware.notif.goodbenefit.v1.ExistGoodBenefitCondsResponse
	(*DeleteGoodBenefitRequest)(nil),      // 13: notif.middleware.notif.goodbenefit.v1.DeleteGoodBenefitRequest
	(*DeleteGoodBenefitResponse)(nil),     // 14: notif.middleware.notif.goodbenefit.v1.DeleteGoodBenefitResponse
	(v1.Result)(0),                        // 15: basetypes.v1.Result
	(*v1.StringVal)(nil),                  // 16: basetypes.v1.StringVal
	(*v1.BoolVal)(nil),                    // 17: basetypes.v1.BoolVal
	(*v1.Uint32Val)(nil),                  // 18: basetypes.v1.Uint32Val
}
var file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_depIdxs = []int32{
	15, // 0: notif.middleware.notif.goodbenefit.v1.GoodBenefitReq.State:type_name -> basetypes.v1.Result
	15, // 1: notif.middleware.notif.goodbenefit.v1.GoodBenefit.State:type_name -> basetypes.v1.Result
	16, // 2: notif.middleware.notif.goodbenefit.v1.Conds.ID:type_name -> basetypes.v1.StringVal
	16, // 3: notif.middleware.notif.goodbenefit.v1.Conds.GoodID:type_name -> basetypes.v1.StringVal
	17, // 4: notif.middleware.notif.goodbenefit.v1.Conds.Generated:type_name -> basetypes.v1.BoolVal
	18, // 5: notif.middleware.notif.goodbenefit.v1.Conds.BenefitDateStart:type_name -> basetypes.v1.Uint32Val
	18, // 6: notif.middleware.notif.goodbenefit.v1.Conds.BenefitDateEnd:type_name -> basetypes.v1.Uint32Val
	0,  // 7: notif.middleware.notif.goodbenefit.v1.CreateGoodBenefitRequest.Info:type_name -> notif.middleware.notif.goodbenefit.v1.GoodBenefitReq
	1,  // 8: notif.middleware.notif.goodbenefit.v1.CreateGoodBenefitResponse.Info:type_name -> notif.middleware.notif.goodbenefit.v1.GoodBenefit
	0,  // 9: notif.middleware.notif.goodbenefit.v1.UpdateGoodBenefitRequest.Info:type_name -> notif.middleware.notif.goodbenefit.v1.GoodBenefitReq
	1,  // 10: notif.middleware.notif.goodbenefit.v1.UpdateGoodBenefitResponse.Info:type_name -> notif.middleware.notif.goodbenefit.v1.GoodBenefit
	2,  // 11: notif.middleware.notif.goodbenefit.v1.GetGoodBenefitsRequest.Conds:type_name -> notif.middleware.notif.goodbenefit.v1.Conds
	1,  // 12: notif.middleware.notif.goodbenefit.v1.GetGoodBenefitsResponse.Infos:type_name -> notif.middleware.notif.goodbenefit.v1.GoodBenefit
	1,  // 13: notif.middleware.notif.goodbenefit.v1.GetGoodBenefitResponse.Info:type_name -> notif.middleware.notif.goodbenefit.v1.GoodBenefit
	2,  // 14: notif.middleware.notif.goodbenefit.v1.ExistGoodBenefitCondsRequest.Conds:type_name -> notif.middleware.notif.goodbenefit.v1.Conds
	0,  // 15: notif.middleware.notif.goodbenefit.v1.DeleteGoodBenefitRequest.Info:type_name -> notif.middleware.notif.goodbenefit.v1.GoodBenefitReq
	1,  // 16: notif.middleware.notif.goodbenefit.v1.DeleteGoodBenefitResponse.Info:type_name -> notif.middleware.notif.goodbenefit.v1.GoodBenefit
	3,  // 17: notif.middleware.notif.goodbenefit.v1.Middleware.CreateGoodBenefit:input_type -> notif.middleware.notif.goodbenefit.v1.CreateGoodBenefitRequest
	5,  // 18: notif.middleware.notif.goodbenefit.v1.Middleware.UpdateGoodBenefit:input_type -> notif.middleware.notif.goodbenefit.v1.UpdateGoodBenefitRequest
	7,  // 19: notif.middleware.notif.goodbenefit.v1.Middleware.GetGoodBenefits:input_type -> notif.middleware.notif.goodbenefit.v1.GetGoodBenefitsRequest
	9,  // 20: notif.middleware.notif.goodbenefit.v1.Middleware.GetGoodBenefit:input_type -> notif.middleware.notif.goodbenefit.v1.GetGoodBenefitRequest
	11, // 21: notif.middleware.notif.goodbenefit.v1.Middleware.ExistGoodBenefitConds:input_type -> notif.middleware.notif.goodbenefit.v1.ExistGoodBenefitCondsRequest
	13, // 22: notif.middleware.notif.goodbenefit.v1.Middleware.DeleteGoodBenefit:input_type -> notif.middleware.notif.goodbenefit.v1.DeleteGoodBenefitRequest
	4,  // 23: notif.middleware.notif.goodbenefit.v1.Middleware.CreateGoodBenefit:output_type -> notif.middleware.notif.goodbenefit.v1.CreateGoodBenefitResponse
	6,  // 24: notif.middleware.notif.goodbenefit.v1.Middleware.UpdateGoodBenefit:output_type -> notif.middleware.notif.goodbenefit.v1.UpdateGoodBenefitResponse
	8,  // 25: notif.middleware.notif.goodbenefit.v1.Middleware.GetGoodBenefits:output_type -> notif.middleware.notif.goodbenefit.v1.GetGoodBenefitsResponse
	10, // 26: notif.middleware.notif.goodbenefit.v1.Middleware.GetGoodBenefit:output_type -> notif.middleware.notif.goodbenefit.v1.GetGoodBenefitResponse
	12, // 27: notif.middleware.notif.goodbenefit.v1.Middleware.ExistGoodBenefitConds:output_type -> notif.middleware.notif.goodbenefit.v1.ExistGoodBenefitCondsResponse
	14, // 28: notif.middleware.notif.goodbenefit.v1.Middleware.DeleteGoodBenefit:output_type -> notif.middleware.notif.goodbenefit.v1.DeleteGoodBenefitResponse
	23, // [23:29] is the sub-list for method output_type
	17, // [17:23] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_init() }
func file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_init() {
	if File_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodBenefitReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodBenefit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGoodBenefitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGoodBenefitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGoodBenefitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGoodBenefitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodBenefitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodBenefitsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodBenefitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodBenefitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistGoodBenefitCondsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistGoodBenefitCondsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGoodBenefitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGoodBenefitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_goTypes,
		DependencyIndexes: file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_depIdxs,
		MessageInfos:      file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_msgTypes,
	}.Build()
	File_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto = out.File
	file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_rawDesc = nil
	file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_goTypes = nil
	file_npool_notif_mw_v1_notif_goodbenefit_goodbenefit_proto_depIdxs = nil
}
