syntax = "proto3";

package notif.middleware.notif.sendstate.v1;

option go_package = "github.com/NpoolPlatform/message/npool/notif/mw/v1/notif/sendstate";

import "npool/basetypes/v1/channel.proto";
import "npool/basetypes/v1/conds.proto";

// Service Name
service Middleware {
    rpc CreateSendState     (CreateSendStateRequest)     returns (CreateSendStateResponse)     {}
    rpc CreateSendStates    (CreateSendStatesRequest)    returns (CreateSendStatesResponse)    {}
    rpc GetSendStates       (GetSendStatesRequest)       returns (GetSendStatesResponse)       {}
    rpc GetSendState        (GetSendStateRequest)        returns (GetSendStateResponse)        {}
    rpc GetSendStateOnly    (GetSendStateOnlyRequest)    returns (GetSendStateOnlyResponse)    {}
    rpc ExistSendState      (ExistSendStateRequest)      returns (ExistSendStateResponse)      {}
    rpc ExistSendStateConds (ExistSendStateCondsRequest) returns (ExistSendStateCondsResponse) {}
    rpc DeleteSendState     (DeleteSendStateRequest)     returns (DeleteSendStateResponse)     {}
}

message SendState {
    // @inject_tag: sql:"id"
    string ID         = 10;
    // @inject_tag: sql:"app_id"
    string AppID      = 20;
    // @inject_tag: sql:"user_id"
    string UserID     = 30;
    // @inject_tag: sql:"event_id"
    string EventID    = 40;
    // @inject_tag: sql:"channel"
    string ChannelStr = 49;
    basetypes.v1.NotifChannel Channel = 50;
    // @inject_tag: sql:"created_at"
    uint32 CreatedAt  = 60;
    // @inject_tag: sql:"updated_at"
    uint32 UpdatedAt  = 70;
}

message SendStateReq {
    optional string ID             = 10;
    optional string AppID          = 20;
    optional string UserID         = 30;
    optional string EventID        = 40;
    optional basetypes.v1.NotifChannel Channel = 50;
}

message Conds {
    optional basetypes.v1.StringVal      ID             = 10;
    optional basetypes.v1.StringVal      AppID          = 20;
    optional basetypes.v1.StringVal      UserID         = 30;
    optional basetypes.v1.StringVal      EventID        = 40;
    optional basetypes.v1.Uint32Val      Channel        = 50;
    optional basetypes.v1.StringSliceVal UserIDs        = 70;
}

message CreateSendStateRequest {
    SendStateReq Info = 10;
}

message CreateSendStateResponse {
    SendState Info = 10;
}

message CreateSendStatesRequest {
    repeated SendStateReq Infos = 10;
}

message CreateSendStatesResponse {
    repeated SendState Infos = 10;
}

message GetSendStatesRequest {
    Conds  Conds  = 10;
    int32  Offset = 30;
    int32  Limit  = 40;
}

message GetSendStatesResponse {
    repeated SendState Infos = 10;
    uint32             Total = 20;
}

message GetSendStateRequest {
    string ID = 10;
}

message GetSendStateResponse {
    SendState Info = 10;
}

message GetSendStateOnlyRequest {
    Conds Conds = 10;
}

message GetSendStateOnlyResponse {
    SendState Info = 10;
}

message ExistSendStateRequest {
    string ID = 10;
}

message ExistSendStateResponse {
    bool Info = 10;
}

message ExistSendStateCondsRequest {
    Conds Conds = 10;
}

message ExistSendStateCondsResponse {
    bool Info = 10;
}

message CountSendStatesRequest {
    Conds Conds = 10;
}

message CountSendStatesResponse {
    uint32 Info = 10;
}

message DeleteSendStateRequest {
    SendStateReq Info = 10;
}

message DeleteSendStateResponse {
    SendState Info = 10;
}
