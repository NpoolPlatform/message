// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.18.1
// source: npool/notif/mw/v1/notif/notif.proto

package notif

import (
	v1 "github.com/NpoolPlatform/message/npool/basetypes/v1"
	template "github.com/NpoolPlatform/message/npool/notif/mw/v1/template"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NotifType int32

const (
	NotifType_DefaultType NotifType = 0
	NotifType_Broadcast   NotifType = 10
	NotifType_Multicast   NotifType = 20
	NotifType_Unicast     NotifType = 30
)

// Enum value maps for NotifType.
var (
	NotifType_name = map[int32]string{
		0:  "DefaultType",
		10: "Broadcast",
		20: "Multicast",
		30: "Unicast",
	}
	NotifType_value = map[string]int32{
		"DefaultType": 0,
		"Broadcast":   10,
		"Multicast":   20,
		"Unicast":     30,
	}
)

func (x NotifType) Enum() *NotifType {
	p := new(NotifType)
	*p = x
	return p
}

func (x NotifType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NotifType) Descriptor() protoreflect.EnumDescriptor {
	return file_npool_notif_mw_v1_notif_notif_proto_enumTypes[0].Descriptor()
}

func (NotifType) Type() protoreflect.EnumType {
	return &file_npool_notif_mw_v1_notif_notif_proto_enumTypes[0]
}

func (x NotifType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NotifType.Descriptor instead.
func (NotifType) EnumDescriptor() ([]byte, []int) {
	return file_npool_notif_mw_v1_notif_notif_proto_rawDescGZIP(), []int{0}
}

type Notif struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: sql:"id"
	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty" sql:"id"`
	// @inject_tag: sql:"app_id"
	AppID string `protobuf:"bytes,20,opt,name=AppID,proto3" json:"AppID,omitempty" sql:"app_id"`
	// @inject_tag: sql:"user_id"
	UserID string `protobuf:"bytes,30,opt,name=UserID,proto3" json:"UserID,omitempty" sql:"user_id"`
	// @inject_tag: sql:"notified"
	Notified bool `protobuf:"varint,40,opt,name=Notified,proto3" json:"Notified,omitempty" sql:"notified"`
	// @inject_tag: sql:"lang_id"
	LangID       string     `protobuf:"bytes,50,opt,name=LangID,proto3" json:"LangID,omitempty" sql:"lang_id"`
	EventTypeStr string     `protobuf:"bytes,59,opt,name=EventTypeStr,proto3" json:"EventTypeStr,omitempty"`
	EventType    v1.UsedFor `protobuf:"varint,60,opt,name=EventType,proto3,enum=basetypes.v1.UsedFor" json:"EventType,omitempty"`
	// @inject_tag: sql:"use_template"
	UseTemplate bool `protobuf:"varint,70,opt,name=UseTemplate,proto3" json:"UseTemplate,omitempty" sql:"use_template"`
	// @inject_tag: sql:"title"
	Title string `protobuf:"bytes,80,opt,name=Title,proto3" json:"Title,omitempty" sql:"title"`
	// @inject_tag: sql:"content"
	Content string `protobuf:"bytes,90,opt,name=Content,proto3" json:"Content,omitempty" sql:"content"`
	// @inject_tag: sql:"channel"
	ChannelStr string          `protobuf:"bytes,99,opt,name=ChannelStr,proto3" json:"ChannelStr,omitempty" sql:"channel"`
	Channel    v1.NotifChannel `protobuf:"varint,100,opt,name=Channel,proto3,enum=basetypes.v1.NotifChannel" json:"Channel,omitempty"`
	// @inject_tag: sql:"extra"
	Extra string `protobuf:"bytes,110,opt,name=Extra,proto3" json:"Extra,omitempty" sql:"extra"`
	// @inject_tag: sql:"created_at"
	CreatedAt uint32 `protobuf:"varint,120,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty" sql:"created_at"`
	// @inject_tag: sql:"updated_at"
	UpdatedAt uint32 `protobuf:"varint,130,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty" sql:"updated_at"`
	// @inject_tag: sql:"event_id"
	EventID string `protobuf:"bytes,140,opt,name=EventID,proto3" json:"EventID,omitempty" sql:"event_id"`
	// @inject_tag: sql:"notif_type"
	NotifTypeStr NotifType `protobuf:"varint,149,opt,name=NotifTypeStr,proto3,enum=notif.middleware.notif2.v1.NotifType" json:"NotifTypeStr,omitempty" sql:"notif_type"`
	NotifType    NotifType `protobuf:"varint,150,opt,name=NotifType,proto3,enum=notif.middleware.notif2.v1.NotifType" json:"NotifType,omitempty"`
}

func (x *Notif) Reset() {
	*x = Notif{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mw_v1_notif_notif_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notif) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notif) ProtoMessage() {}

func (x *Notif) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mw_v1_notif_notif_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notif.ProtoReflect.Descriptor instead.
func (*Notif) Descriptor() ([]byte, []int) {
	return file_npool_notif_mw_v1_notif_notif_proto_rawDescGZIP(), []int{0}
}

func (x *Notif) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Notif) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *Notif) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *Notif) GetNotified() bool {
	if x != nil {
		return x.Notified
	}
	return false
}

func (x *Notif) GetLangID() string {
	if x != nil {
		return x.LangID
	}
	return ""
}

func (x *Notif) GetEventTypeStr() string {
	if x != nil {
		return x.EventTypeStr
	}
	return ""
}

func (x *Notif) GetEventType() v1.UsedFor {
	if x != nil {
		return x.EventType
	}
	return v1.UsedFor(0)
}

func (x *Notif) GetUseTemplate() bool {
	if x != nil {
		return x.UseTemplate
	}
	return false
}

func (x *Notif) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Notif) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Notif) GetChannelStr() string {
	if x != nil {
		return x.ChannelStr
	}
	return ""
}

func (x *Notif) GetChannel() v1.NotifChannel {
	if x != nil {
		return x.Channel
	}
	return v1.NotifChannel(0)
}

func (x *Notif) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *Notif) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Notif) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Notif) GetEventID() string {
	if x != nil {
		return x.EventID
	}
	return ""
}

func (x *Notif) GetNotifTypeStr() NotifType {
	if x != nil {
		return x.NotifTypeStr
	}
	return NotifType_DefaultType
}

func (x *Notif) GetNotifType() NotifType {
	if x != nil {
		return x.NotifType
	}
	return NotifType_DefaultType
}

type NotifReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          *string          `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	AppID       *string          `protobuf:"bytes,20,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	UserID      *string          `protobuf:"bytes,30,opt,name=UserID,proto3,oneof" json:"UserID,omitempty"`
	Notified    *bool            `protobuf:"varint,40,opt,name=Notified,proto3,oneof" json:"Notified,omitempty"`
	LangID      *string          `protobuf:"bytes,50,opt,name=LangID,proto3,oneof" json:"LangID,omitempty"`
	EventType   *v1.UsedFor      `protobuf:"varint,60,opt,name=EventType,proto3,enum=basetypes.v1.UsedFor,oneof" json:"EventType,omitempty"`
	UseTemplate *bool            `protobuf:"varint,70,opt,name=UseTemplate,proto3,oneof" json:"UseTemplate,omitempty"`
	Title       *string          `protobuf:"bytes,80,opt,name=Title,proto3,oneof" json:"Title,omitempty"`
	Content     *string          `protobuf:"bytes,90,opt,name=Content,proto3,oneof" json:"Content,omitempty"`
	Channel     *v1.NotifChannel `protobuf:"varint,100,opt,name=Channel,proto3,enum=basetypes.v1.NotifChannel,oneof" json:"Channel,omitempty"`
	Extra       *string          `protobuf:"bytes,110,opt,name=Extra,proto3,oneof" json:"Extra,omitempty"`
	EventID     *string          `protobuf:"bytes,120,opt,name=EventID,proto3,oneof" json:"EventID,omitempty"`
}

func (x *NotifReq) Reset() {
	*x = NotifReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mw_v1_notif_notif_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifReq) ProtoMessage() {}

func (x *NotifReq) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mw_v1_notif_notif_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifReq.ProtoReflect.Descriptor instead.
func (*NotifReq) Descriptor() ([]byte, []int) {
	return file_npool_notif_mw_v1_notif_notif_proto_rawDescGZIP(), []int{1}
}

func (x *NotifReq) GetID() string {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return ""
}

func (x *NotifReq) GetAppID() string {
	if x != nil && x.AppID != nil {
		return *x.AppID
	}
	return ""
}

func (x *NotifReq) GetUserID() string {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return ""
}

func (x *NotifReq) GetNotified() bool {
	if x != nil && x.Notified != nil {
		return *x.Notified
	}
	return false
}

func (x *NotifReq) GetLangID() string {
	if x != nil && x.LangID != nil {
		return *x.LangID
	}
	return ""
}

func (x *NotifReq) GetEventType() v1.UsedFor {
	if x != nil && x.EventType != nil {
		return *x.EventType
	}
	return v1.UsedFor(0)
}

func (x *NotifReq) GetUseTemplate() bool {
	if x != nil && x.UseTemplate != nil {
		return *x.UseTemplate
	}
	return false
}

func (x *NotifReq) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *NotifReq) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *NotifReq) GetChannel() v1.NotifChannel {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return v1.NotifChannel(0)
}

func (x *NotifReq) GetExtra() string {
	if x != nil && x.Extra != nil {
		return *x.Extra
	}
	return ""
}

func (x *NotifReq) GetEventID() string {
	if x != nil && x.EventID != nil {
		return *x.EventID
	}
	return ""
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          *v1.StringVal      `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	IDs         *v1.StringSliceVal `protobuf:"bytes,11,opt,name=IDs,proto3,oneof" json:"IDs,omitempty"`
	AppID       *v1.StringVal      `protobuf:"bytes,20,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	UserID      *v1.StringVal      `protobuf:"bytes,30,opt,name=UserID,proto3,oneof" json:"UserID,omitempty"`
	Notified    *v1.BoolVal        `protobuf:"bytes,40,opt,name=Notified,proto3,oneof" json:"Notified,omitempty"`
	LangID      *v1.StringVal      `protobuf:"bytes,50,opt,name=LangID,proto3,oneof" json:"LangID,omitempty"`
	EventType   *v1.Uint32Val      `protobuf:"bytes,60,opt,name=EventType,proto3,oneof" json:"EventType,omitempty"`
	UseTemplate *v1.BoolVal        `protobuf:"bytes,70,opt,name=UseTemplate,proto3,oneof" json:"UseTemplate,omitempty"`
	Channels    *v1.Uint32SliceVal `protobuf:"bytes,80,opt,name=Channels,proto3,oneof" json:"Channels,omitempty"`
	Channel     *v1.Uint32Val      `protobuf:"bytes,90,opt,name=Channel,proto3,oneof" json:"Channel,omitempty"`
	EventTypes  *v1.Uint32SliceVal `protobuf:"bytes,100,opt,name=EventTypes,proto3,oneof" json:"EventTypes,omitempty"`
	Extra       *v1.StringVal      `protobuf:"bytes,110,opt,name=Extra,proto3,oneof" json:"Extra,omitempty"`
	EventID     *v1.StringVal      `protobuf:"bytes,120,opt,name=EventID,proto3,oneof" json:"EventID,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mw_v1_notif_notif_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mw_v1_notif_notif_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_npool_notif_mw_v1_notif_notif_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *v1.StringVal {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetIDs() *v1.StringSliceVal {
	if x != nil {
		return x.IDs
	}
	return nil
}

func (x *Conds) GetAppID() *v1.StringVal {
	if x != nil {
		return x.AppID
	}
	return nil
}

func (x *Conds) GetUserID() *v1.StringVal {
	if x != nil {
		return x.UserID
	}
	return nil
}

func (x *Conds) GetNotified() *v1.BoolVal {
	if x != nil {
		return x.Notified
	}
	return nil
}

func (x *Conds) GetLangID() *v1.StringVal {
	if x != nil {
		return x.LangID
	}
	return nil
}

func (x *Conds) GetEventType() *v1.Uint32Val {
	if x != nil {
		return x.EventType
	}
	return nil
}

func (x *Conds) GetUseTemplate() *v1.BoolVal {
	if x != nil {
		return x.UseTemplate
	}
	return nil
}

func (x *Conds) GetChannels() *v1.Uint32SliceVal {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *Conds) GetChannel() *v1.Uint32Val {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *Conds) GetEventTypes() *v1.Uint32SliceVal {
	if x != nil {
		return x.EventTypes
	}
	return nil
}

func (x *Conds) GetExtra() *v1.StringVal {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *Conds) GetEventID() *v1.StringVal {
	if x != nil {
		return x.EventID
	}
	return nil
}

type CreateNotifRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *NotifReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateNotifRequest) Reset() {
	*x = CreateNotifRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mw_v1_notif_notif_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNotifRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNotifRequest) ProtoMessage() {}

func (x *CreateNotifRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mw_v1_notif_notif_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNotifRequest.ProtoReflect.Descriptor instead.
func (*CreateNotifRequest) Descriptor() ([]byte, []int) {
	return file_npool_notif_mw_v1_notif_notif_proto_rawDescGZIP(), []int{3}
}

func (x *CreateNotifRequest) GetInfo() *NotifReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateNotifResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Notif `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateNotifResponse) Reset() {
	*x = CreateNotifResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mw_v1_notif_notif_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNotifResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNotifResponse) ProtoMessage() {}

func (x *CreateNotifResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mw_v1_notif_notif_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNotifResponse.ProtoReflect.Descriptor instead.
func (*CreateNotifResponse) Descriptor() ([]byte, []int) {
	return file_npool_notif_mw_v1_notif_notif_proto_rawDescGZIP(), []int{4}
}

func (x *CreateNotifResponse) GetInfo() *Notif {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateNotifsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*NotifReq `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateNotifsRequest) Reset() {
	*x = CreateNotifsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mw_v1_notif_notif_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNotifsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNotifsRequest) ProtoMessage() {}

func (x *CreateNotifsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mw_v1_notif_notif_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNotifsRequest.ProtoReflect.Descriptor instead.
func (*CreateNotifsRequest) Descriptor() ([]byte, []int) {
	return file_npool_notif_mw_v1_notif_notif_proto_rawDescGZIP(), []int{5}
}

func (x *CreateNotifsRequest) GetInfos() []*NotifReq {
	if x != nil {
		return x.Infos
	}
	return nil
}

type CreateNotifsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*Notif `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateNotifsResponse) Reset() {
	*x = CreateNotifsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mw_v1_notif_notif_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNotifsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNotifsResponse) ProtoMessage() {}

func (x *CreateNotifsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mw_v1_notif_notif_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNotifsResponse.ProtoReflect.Descriptor instead.
func (*CreateNotifsResponse) Descriptor() ([]byte, []int) {
	return file_npool_notif_mw_v1_notif_notif_proto_rawDescGZIP(), []int{6}
}

func (x *CreateNotifsResponse) GetInfos() []*Notif {
	if x != nil {
		return x.Infos
	}
	return nil
}

type UpdateNotifRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *NotifReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateNotifRequest) Reset() {
	*x = UpdateNotifRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mw_v1_notif_notif_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNotifRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNotifRequest) ProtoMessage() {}

func (x *UpdateNotifRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mw_v1_notif_notif_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNotifRequest.ProtoReflect.Descriptor instead.
func (*UpdateNotifRequest) Descriptor() ([]byte, []int) {
	return file_npool_notif_mw_v1_notif_notif_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateNotifRequest) GetInfo() *NotifReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateNotifResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Notif `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateNotifResponse) Reset() {
	*x = UpdateNotifResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mw_v1_notif_notif_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNotifResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNotifResponse) ProtoMessage() {}

func (x *UpdateNotifResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mw_v1_notif_notif_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNotifResponse.ProtoReflect.Descriptor instead.
func (*UpdateNotifResponse) Descriptor() ([]byte, []int) {
	return file_npool_notif_mw_v1_notif_notif_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateNotifResponse) GetInfo() *Notif {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateNotifsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IDs      []string `protobuf:"bytes,10,rep,name=IDs,proto3" json:"IDs,omitempty"`
	Notified *bool    `protobuf:"varint,20,opt,name=Notified,proto3,oneof" json:"Notified,omitempty"`
}

func (x *UpdateNotifsRequest) Reset() {
	*x = UpdateNotifsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mw_v1_notif_notif_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNotifsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNotifsRequest) ProtoMessage() {}

func (x *UpdateNotifsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mw_v1_notif_notif_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNotifsRequest.ProtoReflect.Descriptor instead.
func (*UpdateNotifsRequest) Descriptor() ([]byte, []int) {
	return file_npool_notif_mw_v1_notif_notif_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateNotifsRequest) GetIDs() []string {
	if x != nil {
		return x.IDs
	}
	return nil
}

func (x *UpdateNotifsRequest) GetNotified() bool {
	if x != nil && x.Notified != nil {
		return *x.Notified
	}
	return false
}

type UpdateNotifsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*Notif `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *UpdateNotifsResponse) Reset() {
	*x = UpdateNotifsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mw_v1_notif_notif_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNotifsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNotifsResponse) ProtoMessage() {}

func (x *UpdateNotifsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mw_v1_notif_notif_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNotifsResponse.ProtoReflect.Descriptor instead.
func (*UpdateNotifsResponse) Descriptor() ([]byte, []int) {
	return file_npool_notif_mw_v1_notif_notif_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateNotifsResponse) GetInfos() []*Notif {
	if x != nil {
		return x.Infos
	}
	return nil
}

type GetNotifRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetNotifRequest) Reset() {
	*x = GetNotifRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mw_v1_notif_notif_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNotifRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNotifRequest) ProtoMessage() {}

func (x *GetNotifRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mw_v1_notif_notif_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNotifRequest.ProtoReflect.Descriptor instead.
func (*GetNotifRequest) Descriptor() ([]byte, []int) {
	return file_npool_notif_mw_v1_notif_notif_proto_rawDescGZIP(), []int{11}
}

func (x *GetNotifRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetNotifResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Notif `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetNotifResponse) Reset() {
	*x = GetNotifResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mw_v1_notif_notif_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNotifResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNotifResponse) ProtoMessage() {}

func (x *GetNotifResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mw_v1_notif_notif_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNotifResponse.ProtoReflect.Descriptor instead.
func (*GetNotifResponse) Descriptor() ([]byte, []int) {
	return file_npool_notif_mw_v1_notif_notif_proto_rawDescGZIP(), []int{12}
}

func (x *GetNotifResponse) GetInfo() *Notif {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetNotifsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetNotifsRequest) Reset() {
	*x = GetNotifsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mw_v1_notif_notif_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNotifsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNotifsRequest) ProtoMessage() {}

func (x *GetNotifsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mw_v1_notif_notif_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNotifsRequest.ProtoReflect.Descriptor instead.
func (*GetNotifsRequest) Descriptor() ([]byte, []int) {
	return file_npool_notif_mw_v1_notif_notif_proto_rawDescGZIP(), []int{13}
}

func (x *GetNotifsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetNotifsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetNotifsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetNotifsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*Notif `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32   `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetNotifsResponse) Reset() {
	*x = GetNotifsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mw_v1_notif_notif_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNotifsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNotifsResponse) ProtoMessage() {}

func (x *GetNotifsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mw_v1_notif_notif_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNotifsResponse.ProtoReflect.Descriptor instead.
func (*GetNotifsResponse) Descriptor() ([]byte, []int) {
	return file_npool_notif_mw_v1_notif_notif_proto_rawDescGZIP(), []int{14}
}

func (x *GetNotifsResponse) GetInfos() []*Notif {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetNotifsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetNotifOnlyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *GetNotifOnlyRequest) Reset() {
	*x = GetNotifOnlyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mw_v1_notif_notif_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNotifOnlyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNotifOnlyRequest) ProtoMessage() {}

func (x *GetNotifOnlyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mw_v1_notif_notif_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNotifOnlyRequest.ProtoReflect.Descriptor instead.
func (*GetNotifOnlyRequest) Descriptor() ([]byte, []int) {
	return file_npool_notif_mw_v1_notif_notif_proto_rawDescGZIP(), []int{15}
}

func (x *GetNotifOnlyRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type GetNotifOnlyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Notif `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetNotifOnlyResponse) Reset() {
	*x = GetNotifOnlyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mw_v1_notif_notif_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNotifOnlyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNotifOnlyResponse) ProtoMessage() {}

func (x *GetNotifOnlyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mw_v1_notif_notif_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNotifOnlyResponse.ProtoReflect.Descriptor instead.
func (*GetNotifOnlyResponse) Descriptor() ([]byte, []int) {
	return file_npool_notif_mw_v1_notif_notif_proto_rawDescGZIP(), []int{16}
}

func (x *GetNotifOnlyResponse) GetInfo() *Notif {
	if x != nil {
		return x.Info
	}
	return nil
}

type GenerateNotifsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID     string                 `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
	UserID    string                 `protobuf:"bytes,20,opt,name=UserID,proto3" json:"UserID,omitempty"`
	EventType v1.UsedFor             `protobuf:"varint,30,opt,name=EventType,proto3,enum=basetypes.v1.UsedFor" json:"EventType,omitempty"`
	Vars      *template.TemplateVars `protobuf:"bytes,40,opt,name=Vars,proto3,oneof" json:"Vars,omitempty"`
	Extra     *string                `protobuf:"bytes,50,opt,name=Extra,proto3,oneof" json:"Extra,omitempty"`
}

func (x *GenerateNotifsRequest) Reset() {
	*x = GenerateNotifsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mw_v1_notif_notif_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateNotifsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateNotifsRequest) ProtoMessage() {}

func (x *GenerateNotifsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mw_v1_notif_notif_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateNotifsRequest.ProtoReflect.Descriptor instead.
func (*GenerateNotifsRequest) Descriptor() ([]byte, []int) {
	return file_npool_notif_mw_v1_notif_notif_proto_rawDescGZIP(), []int{17}
}

func (x *GenerateNotifsRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GenerateNotifsRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GenerateNotifsRequest) GetEventType() v1.UsedFor {
	if x != nil {
		return x.EventType
	}
	return v1.UsedFor(0)
}

func (x *GenerateNotifsRequest) GetVars() *template.TemplateVars {
	if x != nil {
		return x.Vars
	}
	return nil
}

func (x *GenerateNotifsRequest) GetExtra() string {
	if x != nil && x.Extra != nil {
		return *x.Extra
	}
	return ""
}

type GenerateNotifsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*Notif `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *GenerateNotifsResponse) Reset() {
	*x = GenerateNotifsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_mw_v1_notif_notif_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateNotifsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateNotifsResponse) ProtoMessage() {}

func (x *GenerateNotifsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_mw_v1_notif_notif_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateNotifsResponse.ProtoReflect.Descriptor instead.
func (*GenerateNotifsResponse) Descriptor() ([]byte, []int) {
	return file_npool_notif_mw_v1_notif_notif_proto_rawDescGZIP(), []int{18}
}

func (x *GenerateNotifsResponse) GetInfos() []*Notif {
	if x != nil {
		return x.Infos
	}
	return nil
}

var File_npool_notif_mw_v1_notif_notif_proto protoreflect.FileDescriptor

var file_npool_notif_mw_v1_notif_notif_proto_rawDesc = []byte{
	0x0a, 0x23, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2f, 0x6d, 0x77,
	0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x32, 0x2e, 0x76,
	0x31, 0x1a, 0x20, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x64, 0x66, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x73,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xfa, 0x04, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x61, 0x6e, 0x67, 0x49, 0x44, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4c, 0x61, 0x6e, 0x67, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x18, 0x3b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72,
	0x12, 0x33, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x3c, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x52, 0x09, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x55, 0x73, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x53, 0x74, 0x72, 0x18, 0x63, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x72, 0x12, 0x34, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x45, 0x78, 0x74, 0x72, 0x61, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x78, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x82,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x19, 0x0a, 0x07, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x8c, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x4a, 0x0a, 0x0c, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x18, 0x95, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x32, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x12, 0x44, 0x0a, 0x09, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x54, 0x79, 0x70, 0x65, 0x22, 0xaf, 0x04,
	0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x08, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x4c, 0x61, 0x6e, 0x67,
	0x49, 0x44, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x4c, 0x61, 0x6e, 0x67,
	0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x48,
	0x05, 0x52, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x46,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x0b, 0x55, 0x73, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x50, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x5a, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x08, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x39, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x48, 0x09, 0x52,
	0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x05, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x07, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x41, 0x70, 0x70, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x4c, 0x61, 0x6e, 0x67, 0x49, 0x44, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x55, 0x73, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22,
	0xfa, 0x06, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x00,
	0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x03, 0x49, 0x44, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56,
	0x61, 0x6c, 0x48, 0x01, 0x52, 0x03, 0x49, 0x44, 0x73, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x05,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x48, 0x02, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x88, 0x01, 0x01,
	0x12, 0x34, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x48,
	0x04, 0x52, 0x08, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x34,
	0x0a, 0x06, 0x4c, 0x61, 0x6e, 0x67, 0x49, 0x44, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x05, 0x52, 0x06, 0x4c, 0x61, 0x6e, 0x67, 0x49,
	0x44, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x48, 0x06, 0x52, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x3c, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18,
	0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x48, 0x07, 0x52, 0x0b,
	0x55, 0x73, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3d,
	0x0a, 0x08, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x08,
	0x52, 0x08, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a,
	0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x09, 0x52, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53,
	0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x0a, 0x52, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x05, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x48, 0x0b, 0x52, 0x05, 0x45, 0x78, 0x74, 0x72, 0x61, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x07,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x0c, 0x52, 0x07, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x49, 0x44, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x41, 0x70, 0x70, 0x49, 0x44, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x4c, 0x61, 0x6e, 0x67, 0x49, 0x44,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x55, 0x73, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x4e, 0x0a, 0x12,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4c, 0x0a, 0x13,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x51, 0x0a, 0x13, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x52, 0x65, 0x71, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x4f, 0x0a,
	0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x32, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x4e,
	0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x32, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4c,
	0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x32, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x55, 0x0a, 0x13,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x44, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x03, 0x49, 0x44, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x22, 0x4f, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x52, 0x05, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x22, 0x21, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x49, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x79, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x32, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x62, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x22, 0x4e, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x4f, 0x6e, 0x6c,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x32, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64,
	0x73, 0x22, 0x4d, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x4f, 0x6e, 0x6c,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x32, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0xed, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x33, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x64, 0x46,
	0x6f, 0x72, 0x52, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a,
	0x04, 0x56, 0x61, 0x72, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x56, 0x61, 0x72, 0x73, 0x48, 0x00, 0x52, 0x04, 0x56, 0x61, 0x72, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x45, 0x78, 0x74, 0x72, 0x61, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x05, 0x45, 0x78, 0x74, 0x72, 0x61, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x56, 0x61, 0x72, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x22, 0x51, 0x0a, 0x16, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x52, 0x05, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x2a, 0x47, 0x0a, 0x09, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x10, 0x0a,
	0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x10, 0x14, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x10, 0x1e, 0x32, 0x9f, 0x07, 0x0a,
	0x0a, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x12, 0x70, 0x0a, 0x0b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x12, 0x2e, 0x2e, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a,
	0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x73, 0x12, 0x2f, 0x2e,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30,
	0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x70, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x12, 0x2e, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2f, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x73, 0x12, 0x2f, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x32, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x32, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x08, 0x47, 0x65, 0x74,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x12, 0x2b, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x32, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x32, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x6a, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x73, 0x12,
	0x2c, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x2f,
	0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x30, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x0e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x73, 0x12, 0x31, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x32, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x3a,
	0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f,
	0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2f, 0x6d,
	0x77, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_npool_notif_mw_v1_notif_notif_proto_rawDescOnce sync.Once
	file_npool_notif_mw_v1_notif_notif_proto_rawDescData = file_npool_notif_mw_v1_notif_notif_proto_rawDesc
)

func file_npool_notif_mw_v1_notif_notif_proto_rawDescGZIP() []byte {
	file_npool_notif_mw_v1_notif_notif_proto_rawDescOnce.Do(func() {
		file_npool_notif_mw_v1_notif_notif_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_notif_mw_v1_notif_notif_proto_rawDescData)
	})
	return file_npool_notif_mw_v1_notif_notif_proto_rawDescData
}

var file_npool_notif_mw_v1_notif_notif_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_npool_notif_mw_v1_notif_notif_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_npool_notif_mw_v1_notif_notif_proto_goTypes = []interface{}{
	(NotifType)(0),                 // 0: notif.middleware.notif2.v1.NotifType
	(*Notif)(nil),                  // 1: notif.middleware.notif2.v1.Notif
	(*NotifReq)(nil),               // 2: notif.middleware.notif2.v1.NotifReq
	(*Conds)(nil),                  // 3: notif.middleware.notif2.v1.Conds
	(*CreateNotifRequest)(nil),     // 4: notif.middleware.notif2.v1.CreateNotifRequest
	(*CreateNotifResponse)(nil),    // 5: notif.middleware.notif2.v1.CreateNotifResponse
	(*CreateNotifsRequest)(nil),    // 6: notif.middleware.notif2.v1.CreateNotifsRequest
	(*CreateNotifsResponse)(nil),   // 7: notif.middleware.notif2.v1.CreateNotifsResponse
	(*UpdateNotifRequest)(nil),     // 8: notif.middleware.notif2.v1.UpdateNotifRequest
	(*UpdateNotifResponse)(nil),    // 9: notif.middleware.notif2.v1.UpdateNotifResponse
	(*UpdateNotifsRequest)(nil),    // 10: notif.middleware.notif2.v1.UpdateNotifsRequest
	(*UpdateNotifsResponse)(nil),   // 11: notif.middleware.notif2.v1.UpdateNotifsResponse
	(*GetNotifRequest)(nil),        // 12: notif.middleware.notif2.v1.GetNotifRequest
	(*GetNotifResponse)(nil),       // 13: notif.middleware.notif2.v1.GetNotifResponse
	(*GetNotifsRequest)(nil),       // 14: notif.middleware.notif2.v1.GetNotifsRequest
	(*GetNotifsResponse)(nil),      // 15: notif.middleware.notif2.v1.GetNotifsResponse
	(*GetNotifOnlyRequest)(nil),    // 16: notif.middleware.notif2.v1.GetNotifOnlyRequest
	(*GetNotifOnlyResponse)(nil),   // 17: notif.middleware.notif2.v1.GetNotifOnlyResponse
	(*GenerateNotifsRequest)(nil),  // 18: notif.middleware.notif2.v1.GenerateNotifsRequest
	(*GenerateNotifsResponse)(nil), // 19: notif.middleware.notif2.v1.GenerateNotifsResponse
	(v1.UsedFor)(0),                // 20: basetypes.v1.UsedFor
	(v1.NotifChannel)(0),           // 21: basetypes.v1.NotifChannel
	(*v1.StringVal)(nil),           // 22: basetypes.v1.StringVal
	(*v1.StringSliceVal)(nil),      // 23: basetypes.v1.StringSliceVal
	(*v1.BoolVal)(nil),             // 24: basetypes.v1.BoolVal
	(*v1.Uint32Val)(nil),           // 25: basetypes.v1.Uint32Val
	(*v1.Uint32SliceVal)(nil),      // 26: basetypes.v1.Uint32SliceVal
	(*template.TemplateVars)(nil),  // 27: notif.middleware.template.v1.TemplateVars
}
var file_npool_notif_mw_v1_notif_notif_proto_depIdxs = []int32{
	20, // 0: notif.middleware.notif2.v1.Notif.EventType:type_name -> basetypes.v1.UsedFor
	21, // 1: notif.middleware.notif2.v1.Notif.Channel:type_name -> basetypes.v1.NotifChannel
	0,  // 2: notif.middleware.notif2.v1.Notif.NotifTypeStr:type_name -> notif.middleware.notif2.v1.NotifType
	0,  // 3: notif.middleware.notif2.v1.Notif.NotifType:type_name -> notif.middleware.notif2.v1.NotifType
	20, // 4: notif.middleware.notif2.v1.NotifReq.EventType:type_name -> basetypes.v1.UsedFor
	21, // 5: notif.middleware.notif2.v1.NotifReq.Channel:type_name -> basetypes.v1.NotifChannel
	22, // 6: notif.middleware.notif2.v1.Conds.ID:type_name -> basetypes.v1.StringVal
	23, // 7: notif.middleware.notif2.v1.Conds.IDs:type_name -> basetypes.v1.StringSliceVal
	22, // 8: notif.middleware.notif2.v1.Conds.AppID:type_name -> basetypes.v1.StringVal
	22, // 9: notif.middleware.notif2.v1.Conds.UserID:type_name -> basetypes.v1.StringVal
	24, // 10: notif.middleware.notif2.v1.Conds.Notified:type_name -> basetypes.v1.BoolVal
	22, // 11: notif.middleware.notif2.v1.Conds.LangID:type_name -> basetypes.v1.StringVal
	25, // 12: notif.middleware.notif2.v1.Conds.EventType:type_name -> basetypes.v1.Uint32Val
	24, // 13: notif.middleware.notif2.v1.Conds.UseTemplate:type_name -> basetypes.v1.BoolVal
	26, // 14: notif.middleware.notif2.v1.Conds.Channels:type_name -> basetypes.v1.Uint32SliceVal
	25, // 15: notif.middleware.notif2.v1.Conds.Channel:type_name -> basetypes.v1.Uint32Val
	26, // 16: notif.middleware.notif2.v1.Conds.EventTypes:type_name -> basetypes.v1.Uint32SliceVal
	22, // 17: notif.middleware.notif2.v1.Conds.Extra:type_name -> basetypes.v1.StringVal
	22, // 18: notif.middleware.notif2.v1.Conds.EventID:type_name -> basetypes.v1.StringVal
	2,  // 19: notif.middleware.notif2.v1.CreateNotifRequest.Info:type_name -> notif.middleware.notif2.v1.NotifReq
	1,  // 20: notif.middleware.notif2.v1.CreateNotifResponse.Info:type_name -> notif.middleware.notif2.v1.Notif
	2,  // 21: notif.middleware.notif2.v1.CreateNotifsRequest.Infos:type_name -> notif.middleware.notif2.v1.NotifReq
	1,  // 22: notif.middleware.notif2.v1.CreateNotifsResponse.Infos:type_name -> notif.middleware.notif2.v1.Notif
	2,  // 23: notif.middleware.notif2.v1.UpdateNotifRequest.Info:type_name -> notif.middleware.notif2.v1.NotifReq
	1,  // 24: notif.middleware.notif2.v1.UpdateNotifResponse.Info:type_name -> notif.middleware.notif2.v1.Notif
	1,  // 25: notif.middleware.notif2.v1.UpdateNotifsResponse.Infos:type_name -> notif.middleware.notif2.v1.Notif
	1,  // 26: notif.middleware.notif2.v1.GetNotifResponse.Info:type_name -> notif.middleware.notif2.v1.Notif
	3,  // 27: notif.middleware.notif2.v1.GetNotifsRequest.Conds:type_name -> notif.middleware.notif2.v1.Conds
	1,  // 28: notif.middleware.notif2.v1.GetNotifsResponse.Infos:type_name -> notif.middleware.notif2.v1.Notif
	3,  // 29: notif.middleware.notif2.v1.GetNotifOnlyRequest.Conds:type_name -> notif.middleware.notif2.v1.Conds
	1,  // 30: notif.middleware.notif2.v1.GetNotifOnlyResponse.Info:type_name -> notif.middleware.notif2.v1.Notif
	20, // 31: notif.middleware.notif2.v1.GenerateNotifsRequest.EventType:type_name -> basetypes.v1.UsedFor
	27, // 32: notif.middleware.notif2.v1.GenerateNotifsRequest.Vars:type_name -> notif.middleware.template.v1.TemplateVars
	1,  // 33: notif.middleware.notif2.v1.GenerateNotifsResponse.Infos:type_name -> notif.middleware.notif2.v1.Notif
	4,  // 34: notif.middleware.notif2.v1.Middleware.CreateNotif:input_type -> notif.middleware.notif2.v1.CreateNotifRequest
	6,  // 35: notif.middleware.notif2.v1.Middleware.CreateNotifs:input_type -> notif.middleware.notif2.v1.CreateNotifsRequest
	8,  // 36: notif.middleware.notif2.v1.Middleware.UpdateNotif:input_type -> notif.middleware.notif2.v1.UpdateNotifRequest
	10, // 37: notif.middleware.notif2.v1.Middleware.UpdateNotifs:input_type -> notif.middleware.notif2.v1.UpdateNotifsRequest
	12, // 38: notif.middleware.notif2.v1.Middleware.GetNotif:input_type -> notif.middleware.notif2.v1.GetNotifRequest
	14, // 39: notif.middleware.notif2.v1.Middleware.GetNotifs:input_type -> notif.middleware.notif2.v1.GetNotifsRequest
	16, // 40: notif.middleware.notif2.v1.Middleware.GetNotifOnly:input_type -> notif.middleware.notif2.v1.GetNotifOnlyRequest
	18, // 41: notif.middleware.notif2.v1.Middleware.GenerateNotifs:input_type -> notif.middleware.notif2.v1.GenerateNotifsRequest
	5,  // 42: notif.middleware.notif2.v1.Middleware.CreateNotif:output_type -> notif.middleware.notif2.v1.CreateNotifResponse
	7,  // 43: notif.middleware.notif2.v1.Middleware.CreateNotifs:output_type -> notif.middleware.notif2.v1.CreateNotifsResponse
	9,  // 44: notif.middleware.notif2.v1.Middleware.UpdateNotif:output_type -> notif.middleware.notif2.v1.UpdateNotifResponse
	11, // 45: notif.middleware.notif2.v1.Middleware.UpdateNotifs:output_type -> notif.middleware.notif2.v1.UpdateNotifsResponse
	13, // 46: notif.middleware.notif2.v1.Middleware.GetNotif:output_type -> notif.middleware.notif2.v1.GetNotifResponse
	15, // 47: notif.middleware.notif2.v1.Middleware.GetNotifs:output_type -> notif.middleware.notif2.v1.GetNotifsResponse
	17, // 48: notif.middleware.notif2.v1.Middleware.GetNotifOnly:output_type -> notif.middleware.notif2.v1.GetNotifOnlyResponse
	19, // 49: notif.middleware.notif2.v1.Middleware.GenerateNotifs:output_type -> notif.middleware.notif2.v1.GenerateNotifsResponse
	42, // [42:50] is the sub-list for method output_type
	34, // [34:42] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_npool_notif_mw_v1_notif_notif_proto_init() }
func file_npool_notif_mw_v1_notif_notif_proto_init() {
	if File_npool_notif_mw_v1_notif_notif_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_notif_mw_v1_notif_notif_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notif); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mw_v1_notif_notif_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mw_v1_notif_notif_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mw_v1_notif_notif_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNotifRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mw_v1_notif_notif_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNotifResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mw_v1_notif_notif_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNotifsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mw_v1_notif_notif_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNotifsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mw_v1_notif_notif_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNotifRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mw_v1_notif_notif_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNotifResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mw_v1_notif_notif_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNotifsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mw_v1_notif_notif_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNotifsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mw_v1_notif_notif_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNotifRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mw_v1_notif_notif_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNotifResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mw_v1_notif_notif_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNotifsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mw_v1_notif_notif_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNotifsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mw_v1_notif_notif_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNotifOnlyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mw_v1_notif_notif_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNotifOnlyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mw_v1_notif_notif_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateNotifsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_mw_v1_notif_notif_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateNotifsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_notif_mw_v1_notif_notif_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_npool_notif_mw_v1_notif_notif_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_npool_notif_mw_v1_notif_notif_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_npool_notif_mw_v1_notif_notif_proto_msgTypes[17].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_notif_mw_v1_notif_notif_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_notif_mw_v1_notif_notif_proto_goTypes,
		DependencyIndexes: file_npool_notif_mw_v1_notif_notif_proto_depIdxs,
		EnumInfos:         file_npool_notif_mw_v1_notif_notif_proto_enumTypes,
		MessageInfos:      file_npool_notif_mw_v1_notif_notif_proto_msgTypes,
	}.Build()
	File_npool_notif_mw_v1_notif_notif_proto = out.File
	file_npool_notif_mw_v1_notif_notif_proto_rawDesc = nil
	file_npool_notif_mw_v1_notif_notif_proto_goTypes = nil
	file_npool_notif_mw_v1_notif_notif_proto_depIdxs = nil
}
