// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/notif/mw/v1/template/frontend/frontend.proto

package frontend

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MiddlewareClient is the client API for Middleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddlewareClient interface {
	GetFrontendTemplate(ctx context.Context, in *GetFrontendTemplateRequest, opts ...grpc.CallOption) (*GetFrontendTemplateResponse, error)
	GetFrontendTemplates(ctx context.Context, in *GetFrontendTemplatesRequest, opts ...grpc.CallOption) (*GetFrontendTemplatesResponse, error)
	CreateFrontendTemplate(ctx context.Context, in *CreateFrontendTemplateRequest, opts ...grpc.CallOption) (*CreateFrontendTemplateResponse, error)
	CreateFrontendTemplates(ctx context.Context, in *CreateFrontendTemplatesRequest, opts ...grpc.CallOption) (*CreateFrontendTemplatesResponse, error)
	UpdateFrontendTemplate(ctx context.Context, in *UpdateFrontendTemplateRequest, opts ...grpc.CallOption) (*UpdateFrontendTemplateResponse, error)
	ExistFrontendTemplate(ctx context.Context, in *ExistFrontendTemplateRequest, opts ...grpc.CallOption) (*ExistFrontendTemplateResponse, error)
	ExistFrontendTemplateConds(ctx context.Context, in *ExistFrontendTemplateCondsRequest, opts ...grpc.CallOption) (*ExistFrontendTemplateCondsResponse, error)
	DeleteFrontendTemplate(ctx context.Context, in *DeleteFrontendTemplateRequest, opts ...grpc.CallOption) (*DeleteFrontendTemplateResponse, error)
}

type middlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddlewareClient(cc grpc.ClientConnInterface) MiddlewareClient {
	return &middlewareClient{cc}
}

func (c *middlewareClient) GetFrontendTemplate(ctx context.Context, in *GetFrontendTemplateRequest, opts ...grpc.CallOption) (*GetFrontendTemplateResponse, error) {
	out := new(GetFrontendTemplateResponse)
	err := c.cc.Invoke(ctx, "/notif.middleware.template.frontend.v1.Middleware/GetFrontendTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetFrontendTemplates(ctx context.Context, in *GetFrontendTemplatesRequest, opts ...grpc.CallOption) (*GetFrontendTemplatesResponse, error) {
	out := new(GetFrontendTemplatesResponse)
	err := c.cc.Invoke(ctx, "/notif.middleware.template.frontend.v1.Middleware/GetFrontendTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) CreateFrontendTemplate(ctx context.Context, in *CreateFrontendTemplateRequest, opts ...grpc.CallOption) (*CreateFrontendTemplateResponse, error) {
	out := new(CreateFrontendTemplateResponse)
	err := c.cc.Invoke(ctx, "/notif.middleware.template.frontend.v1.Middleware/CreateFrontendTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) CreateFrontendTemplates(ctx context.Context, in *CreateFrontendTemplatesRequest, opts ...grpc.CallOption) (*CreateFrontendTemplatesResponse, error) {
	out := new(CreateFrontendTemplatesResponse)
	err := c.cc.Invoke(ctx, "/notif.middleware.template.frontend.v1.Middleware/CreateFrontendTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) UpdateFrontendTemplate(ctx context.Context, in *UpdateFrontendTemplateRequest, opts ...grpc.CallOption) (*UpdateFrontendTemplateResponse, error) {
	out := new(UpdateFrontendTemplateResponse)
	err := c.cc.Invoke(ctx, "/notif.middleware.template.frontend.v1.Middleware/UpdateFrontendTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) ExistFrontendTemplate(ctx context.Context, in *ExistFrontendTemplateRequest, opts ...grpc.CallOption) (*ExistFrontendTemplateResponse, error) {
	out := new(ExistFrontendTemplateResponse)
	err := c.cc.Invoke(ctx, "/notif.middleware.template.frontend.v1.Middleware/ExistFrontendTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) ExistFrontendTemplateConds(ctx context.Context, in *ExistFrontendTemplateCondsRequest, opts ...grpc.CallOption) (*ExistFrontendTemplateCondsResponse, error) {
	out := new(ExistFrontendTemplateCondsResponse)
	err := c.cc.Invoke(ctx, "/notif.middleware.template.frontend.v1.Middleware/ExistFrontendTemplateConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) DeleteFrontendTemplate(ctx context.Context, in *DeleteFrontendTemplateRequest, opts ...grpc.CallOption) (*DeleteFrontendTemplateResponse, error) {
	out := new(DeleteFrontendTemplateResponse)
	err := c.cc.Invoke(ctx, "/notif.middleware.template.frontend.v1.Middleware/DeleteFrontendTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddlewareServer is the server API for Middleware service.
// All implementations must embed UnimplementedMiddlewareServer
// for forward compatibility
type MiddlewareServer interface {
	GetFrontendTemplate(context.Context, *GetFrontendTemplateRequest) (*GetFrontendTemplateResponse, error)
	GetFrontendTemplates(context.Context, *GetFrontendTemplatesRequest) (*GetFrontendTemplatesResponse, error)
	CreateFrontendTemplate(context.Context, *CreateFrontendTemplateRequest) (*CreateFrontendTemplateResponse, error)
	CreateFrontendTemplates(context.Context, *CreateFrontendTemplatesRequest) (*CreateFrontendTemplatesResponse, error)
	UpdateFrontendTemplate(context.Context, *UpdateFrontendTemplateRequest) (*UpdateFrontendTemplateResponse, error)
	ExistFrontendTemplate(context.Context, *ExistFrontendTemplateRequest) (*ExistFrontendTemplateResponse, error)
	ExistFrontendTemplateConds(context.Context, *ExistFrontendTemplateCondsRequest) (*ExistFrontendTemplateCondsResponse, error)
	DeleteFrontendTemplate(context.Context, *DeleteFrontendTemplateRequest) (*DeleteFrontendTemplateResponse, error)
	mustEmbedUnimplementedMiddlewareServer()
}

// UnimplementedMiddlewareServer must be embedded to have forward compatible implementations.
type UnimplementedMiddlewareServer struct {
}

func (UnimplementedMiddlewareServer) GetFrontendTemplate(context.Context, *GetFrontendTemplateRequest) (*GetFrontendTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFrontendTemplate not implemented")
}
func (UnimplementedMiddlewareServer) GetFrontendTemplates(context.Context, *GetFrontendTemplatesRequest) (*GetFrontendTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFrontendTemplates not implemented")
}
func (UnimplementedMiddlewareServer) CreateFrontendTemplate(context.Context, *CreateFrontendTemplateRequest) (*CreateFrontendTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFrontendTemplate not implemented")
}
func (UnimplementedMiddlewareServer) CreateFrontendTemplates(context.Context, *CreateFrontendTemplatesRequest) (*CreateFrontendTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFrontendTemplates not implemented")
}
func (UnimplementedMiddlewareServer) UpdateFrontendTemplate(context.Context, *UpdateFrontendTemplateRequest) (*UpdateFrontendTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFrontendTemplate not implemented")
}
func (UnimplementedMiddlewareServer) ExistFrontendTemplate(context.Context, *ExistFrontendTemplateRequest) (*ExistFrontendTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistFrontendTemplate not implemented")
}
func (UnimplementedMiddlewareServer) ExistFrontendTemplateConds(context.Context, *ExistFrontendTemplateCondsRequest) (*ExistFrontendTemplateCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistFrontendTemplateConds not implemented")
}
func (UnimplementedMiddlewareServer) DeleteFrontendTemplate(context.Context, *DeleteFrontendTemplateRequest) (*DeleteFrontendTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFrontendTemplate not implemented")
}
func (UnimplementedMiddlewareServer) mustEmbedUnimplementedMiddlewareServer() {}

// UnsafeMiddlewareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddlewareServer will
// result in compilation errors.
type UnsafeMiddlewareServer interface {
	mustEmbedUnimplementedMiddlewareServer()
}

func RegisterMiddlewareServer(s grpc.ServiceRegistrar, srv MiddlewareServer) {
	s.RegisterService(&Middleware_ServiceDesc, srv)
}

func _Middleware_GetFrontendTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFrontendTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetFrontendTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.middleware.template.frontend.v1.Middleware/GetFrontendTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetFrontendTemplate(ctx, req.(*GetFrontendTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetFrontendTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFrontendTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetFrontendTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.middleware.template.frontend.v1.Middleware/GetFrontendTemplates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetFrontendTemplates(ctx, req.(*GetFrontendTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_CreateFrontendTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFrontendTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreateFrontendTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.middleware.template.frontend.v1.Middleware/CreateFrontendTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreateFrontendTemplate(ctx, req.(*CreateFrontendTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_CreateFrontendTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFrontendTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreateFrontendTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.middleware.template.frontend.v1.Middleware/CreateFrontendTemplates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreateFrontendTemplates(ctx, req.(*CreateFrontendTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_UpdateFrontendTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFrontendTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).UpdateFrontendTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.middleware.template.frontend.v1.Middleware/UpdateFrontendTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).UpdateFrontendTemplate(ctx, req.(*UpdateFrontendTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_ExistFrontendTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistFrontendTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).ExistFrontendTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.middleware.template.frontend.v1.Middleware/ExistFrontendTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).ExistFrontendTemplate(ctx, req.(*ExistFrontendTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_ExistFrontendTemplateConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistFrontendTemplateCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).ExistFrontendTemplateConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.middleware.template.frontend.v1.Middleware/ExistFrontendTemplateConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).ExistFrontendTemplateConds(ctx, req.(*ExistFrontendTemplateCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_DeleteFrontendTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFrontendTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).DeleteFrontendTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.middleware.template.frontend.v1.Middleware/DeleteFrontendTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).DeleteFrontendTemplate(ctx, req.(*DeleteFrontendTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Middleware_ServiceDesc is the grpc.ServiceDesc for Middleware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Middleware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notif.middleware.template.frontend.v1.Middleware",
	HandlerType: (*MiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFrontendTemplate",
			Handler:    _Middleware_GetFrontendTemplate_Handler,
		},
		{
			MethodName: "GetFrontendTemplates",
			Handler:    _Middleware_GetFrontendTemplates_Handler,
		},
		{
			MethodName: "CreateFrontendTemplate",
			Handler:    _Middleware_CreateFrontendTemplate_Handler,
		},
		{
			MethodName: "CreateFrontendTemplates",
			Handler:    _Middleware_CreateFrontendTemplates_Handler,
		},
		{
			MethodName: "UpdateFrontendTemplate",
			Handler:    _Middleware_UpdateFrontendTemplate_Handler,
		},
		{
			MethodName: "ExistFrontendTemplate",
			Handler:    _Middleware_ExistFrontendTemplate_Handler,
		},
		{
			MethodName: "ExistFrontendTemplateConds",
			Handler:    _Middleware_ExistFrontendTemplateConds_Handler,
		},
		{
			MethodName: "DeleteFrontendTemplate",
			Handler:    _Middleware_DeleteFrontendTemplate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/notif/mw/v1/template/frontend/frontend.proto",
}
