// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/notif/gw/v1/notif/readstate/readstate.proto

package readstate

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gateway_CreateReadState_FullMethodName      = "/notif.gateway.notif.readstate.v1.Gateway/CreateReadState"
	Gateway_GetReadState_FullMethodName         = "/notif.gateway.notif.readstate.v1.Gateway/GetReadState"
	Gateway_GetReadStates_FullMethodName        = "/notif.gateway.notif.readstate.v1.Gateway/GetReadStates"
	Gateway_GetAppUserReadStates_FullMethodName = "/notif.gateway.notif.readstate.v1.Gateway/GetAppUserReadStates"
	Gateway_GetAppReadStates_FullMethodName     = "/notif.gateway.notif.readstate.v1.Gateway/GetAppReadStates"
	Gateway_GetNAppReadStates_FullMethodName    = "/notif.gateway.notif.readstate.v1.Gateway/GetNAppReadStates"
)

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	CreateReadState(ctx context.Context, in *CreateReadStateRequest, opts ...grpc.CallOption) (*CreateReadStateResponse, error)
	GetReadState(ctx context.Context, in *GetReadStateRequest, opts ...grpc.CallOption) (*GetReadStateResponse, error)
	GetReadStates(ctx context.Context, in *GetReadStatesRequest, opts ...grpc.CallOption) (*GetReadStatesResponse, error)
	GetAppUserReadStates(ctx context.Context, in *GetAppUserReadStatesRequest, opts ...grpc.CallOption) (*GetAppUserReadStatesResponse, error)
	GetAppReadStates(ctx context.Context, in *GetAppReadStatesRequest, opts ...grpc.CallOption) (*GetAppReadStatesResponse, error)
	GetNAppReadStates(ctx context.Context, in *GetNAppReadStatesRequest, opts ...grpc.CallOption) (*GetNAppReadStatesResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) CreateReadState(ctx context.Context, in *CreateReadStateRequest, opts ...grpc.CallOption) (*CreateReadStateResponse, error) {
	out := new(CreateReadStateResponse)
	err := c.cc.Invoke(ctx, Gateway_CreateReadState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetReadState(ctx context.Context, in *GetReadStateRequest, opts ...grpc.CallOption) (*GetReadStateResponse, error) {
	out := new(GetReadStateResponse)
	err := c.cc.Invoke(ctx, Gateway_GetReadState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetReadStates(ctx context.Context, in *GetReadStatesRequest, opts ...grpc.CallOption) (*GetReadStatesResponse, error) {
	out := new(GetReadStatesResponse)
	err := c.cc.Invoke(ctx, Gateway_GetReadStates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetAppUserReadStates(ctx context.Context, in *GetAppUserReadStatesRequest, opts ...grpc.CallOption) (*GetAppUserReadStatesResponse, error) {
	out := new(GetAppUserReadStatesResponse)
	err := c.cc.Invoke(ctx, Gateway_GetAppUserReadStates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetAppReadStates(ctx context.Context, in *GetAppReadStatesRequest, opts ...grpc.CallOption) (*GetAppReadStatesResponse, error) {
	out := new(GetAppReadStatesResponse)
	err := c.cc.Invoke(ctx, Gateway_GetAppReadStates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetNAppReadStates(ctx context.Context, in *GetNAppReadStatesRequest, opts ...grpc.CallOption) (*GetNAppReadStatesResponse, error) {
	out := new(GetNAppReadStatesResponse)
	err := c.cc.Invoke(ctx, Gateway_GetNAppReadStates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	CreateReadState(context.Context, *CreateReadStateRequest) (*CreateReadStateResponse, error)
	GetReadState(context.Context, *GetReadStateRequest) (*GetReadStateResponse, error)
	GetReadStates(context.Context, *GetReadStatesRequest) (*GetReadStatesResponse, error)
	GetAppUserReadStates(context.Context, *GetAppUserReadStatesRequest) (*GetAppUserReadStatesResponse, error)
	GetAppReadStates(context.Context, *GetAppReadStatesRequest) (*GetAppReadStatesResponse, error)
	GetNAppReadStates(context.Context, *GetNAppReadStatesRequest) (*GetNAppReadStatesResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) CreateReadState(context.Context, *CreateReadStateRequest) (*CreateReadStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReadState not implemented")
}
func (UnimplementedGatewayServer) GetReadState(context.Context, *GetReadStateRequest) (*GetReadStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReadState not implemented")
}
func (UnimplementedGatewayServer) GetReadStates(context.Context, *GetReadStatesRequest) (*GetReadStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReadStates not implemented")
}
func (UnimplementedGatewayServer) GetAppUserReadStates(context.Context, *GetAppUserReadStatesRequest) (*GetAppUserReadStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppUserReadStates not implemented")
}
func (UnimplementedGatewayServer) GetAppReadStates(context.Context, *GetAppReadStatesRequest) (*GetAppReadStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppReadStates not implemented")
}
func (UnimplementedGatewayServer) GetNAppReadStates(context.Context, *GetNAppReadStatesRequest) (*GetNAppReadStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNAppReadStates not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_CreateReadState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReadStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreateReadState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_CreateReadState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreateReadState(ctx, req.(*CreateReadStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetReadState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReadStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetReadState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetReadState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetReadState(ctx, req.(*GetReadStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetReadStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReadStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetReadStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetReadStates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetReadStates(ctx, req.(*GetReadStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetAppUserReadStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppUserReadStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetAppUserReadStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetAppUserReadStates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetAppUserReadStates(ctx, req.(*GetAppUserReadStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetAppReadStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppReadStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetAppReadStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetAppReadStates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetAppReadStates(ctx, req.(*GetAppReadStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetNAppReadStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNAppReadStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetNAppReadStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetNAppReadStates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetNAppReadStates(ctx, req.(*GetNAppReadStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notif.gateway.notif.readstate.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateReadState",
			Handler:    _Gateway_CreateReadState_Handler,
		},
		{
			MethodName: "GetReadState",
			Handler:    _Gateway_GetReadState_Handler,
		},
		{
			MethodName: "GetReadStates",
			Handler:    _Gateway_GetReadStates_Handler,
		},
		{
			MethodName: "GetAppUserReadStates",
			Handler:    _Gateway_GetAppUserReadStates_Handler,
		},
		{
			MethodName: "GetAppReadStates",
			Handler:    _Gateway_GetAppReadStates_Handler,
		},
		{
			MethodName: "GetNAppReadStates",
			Handler:    _Gateway_GetNAppReadStates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/notif/gw/v1/notif/readstate/readstate.proto",
}
