// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/notif/gw/v1/notif/user/user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gateway_CreateNofitUsers_FullMethodName  = "/notif.gateway.notif.user.v1.Gateway/CreateNofitUsers"
	Gateway_DeleteNofitUser_FullMethodName   = "/notif.gateway.notif.user.v1.Gateway/DeleteNofitUser"
	Gateway_GetNofitUsers_FullMethodName     = "/notif.gateway.notif.user.v1.Gateway/GetNofitUsers"
	Gateway_GetAppNofitUsers_FullMethodName  = "/notif.gateway.notif.user.v1.Gateway/GetAppNofitUsers"
	Gateway_GetNAppNofitUsers_FullMethodName = "/notif.gateway.notif.user.v1.Gateway/GetNAppNofitUsers"
)

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	CreateNofitUsers(ctx context.Context, in *CreateNofitUsersRequest, opts ...grpc.CallOption) (*CreateNofitUsersResponse, error)
	DeleteNofitUser(ctx context.Context, in *DeleteNofitUserRequest, opts ...grpc.CallOption) (*DeleteNofitUserResponse, error)
	GetNofitUsers(ctx context.Context, in *GetNofitUsersRequest, opts ...grpc.CallOption) (*GetNofitUsersResponse, error)
	GetAppNofitUsers(ctx context.Context, in *GetAppNofitUsersRequest, opts ...grpc.CallOption) (*GetAppNofitUsersResponse, error)
	GetNAppNofitUsers(ctx context.Context, in *GetNAppNofitUsersRequest, opts ...grpc.CallOption) (*GetNAppNofitUsersResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) CreateNofitUsers(ctx context.Context, in *CreateNofitUsersRequest, opts ...grpc.CallOption) (*CreateNofitUsersResponse, error) {
	out := new(CreateNofitUsersResponse)
	err := c.cc.Invoke(ctx, Gateway_CreateNofitUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) DeleteNofitUser(ctx context.Context, in *DeleteNofitUserRequest, opts ...grpc.CallOption) (*DeleteNofitUserResponse, error) {
	out := new(DeleteNofitUserResponse)
	err := c.cc.Invoke(ctx, Gateway_DeleteNofitUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetNofitUsers(ctx context.Context, in *GetNofitUsersRequest, opts ...grpc.CallOption) (*GetNofitUsersResponse, error) {
	out := new(GetNofitUsersResponse)
	err := c.cc.Invoke(ctx, Gateway_GetNofitUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetAppNofitUsers(ctx context.Context, in *GetAppNofitUsersRequest, opts ...grpc.CallOption) (*GetAppNofitUsersResponse, error) {
	out := new(GetAppNofitUsersResponse)
	err := c.cc.Invoke(ctx, Gateway_GetAppNofitUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetNAppNofitUsers(ctx context.Context, in *GetNAppNofitUsersRequest, opts ...grpc.CallOption) (*GetNAppNofitUsersResponse, error) {
	out := new(GetNAppNofitUsersResponse)
	err := c.cc.Invoke(ctx, Gateway_GetNAppNofitUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	CreateNofitUsers(context.Context, *CreateNofitUsersRequest) (*CreateNofitUsersResponse, error)
	DeleteNofitUser(context.Context, *DeleteNofitUserRequest) (*DeleteNofitUserResponse, error)
	GetNofitUsers(context.Context, *GetNofitUsersRequest) (*GetNofitUsersResponse, error)
	GetAppNofitUsers(context.Context, *GetAppNofitUsersRequest) (*GetAppNofitUsersResponse, error)
	GetNAppNofitUsers(context.Context, *GetNAppNofitUsersRequest) (*GetNAppNofitUsersResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) CreateNofitUsers(context.Context, *CreateNofitUsersRequest) (*CreateNofitUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNofitUsers not implemented")
}
func (UnimplementedGatewayServer) DeleteNofitUser(context.Context, *DeleteNofitUserRequest) (*DeleteNofitUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNofitUser not implemented")
}
func (UnimplementedGatewayServer) GetNofitUsers(context.Context, *GetNofitUsersRequest) (*GetNofitUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNofitUsers not implemented")
}
func (UnimplementedGatewayServer) GetAppNofitUsers(context.Context, *GetAppNofitUsersRequest) (*GetAppNofitUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppNofitUsers not implemented")
}
func (UnimplementedGatewayServer) GetNAppNofitUsers(context.Context, *GetNAppNofitUsersRequest) (*GetNAppNofitUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNAppNofitUsers not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_CreateNofitUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNofitUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreateNofitUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_CreateNofitUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreateNofitUsers(ctx, req.(*CreateNofitUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_DeleteNofitUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNofitUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).DeleteNofitUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_DeleteNofitUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).DeleteNofitUser(ctx, req.(*DeleteNofitUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetNofitUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNofitUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetNofitUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetNofitUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetNofitUsers(ctx, req.(*GetNofitUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetAppNofitUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppNofitUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetAppNofitUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetAppNofitUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetAppNofitUsers(ctx, req.(*GetAppNofitUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetNAppNofitUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNAppNofitUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetNAppNofitUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetNAppNofitUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetNAppNofitUsers(ctx, req.(*GetNAppNofitUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notif.gateway.notif.user.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNofitUsers",
			Handler:    _Gateway_CreateNofitUsers_Handler,
		},
		{
			MethodName: "DeleteNofitUser",
			Handler:    _Gateway_DeleteNofitUser_Handler,
		},
		{
			MethodName: "GetNofitUsers",
			Handler:    _Gateway_GetNofitUsers_Handler,
		},
		{
			MethodName: "GetAppNofitUsers",
			Handler:    _Gateway_GetAppNofitUsers_Handler,
		},
		{
			MethodName: "GetNAppNofitUsers",
			Handler:    _Gateway_GetNAppNofitUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/notif/gw/v1/notif/user/user.proto",
}
