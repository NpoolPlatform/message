// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: npool/notif/gw/v1/notif/notifchannel/notifchannel.proto

package notifchannel

import (
	channel "github.com/NpoolPlatform/message/npool/notif/mgr/v1/channel"
	usedfor "github.com/NpoolPlatform/message/npool/third/mgr/v1/usedfor"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NotifChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        string               `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	AppID     string               `protobuf:"bytes,20,opt,name=AppID,proto3" json:"AppID,omitempty"`
	AppName   string               `protobuf:"bytes,30,opt,name=AppName,proto3" json:"AppName,omitempty"`
	EventType usedfor.UsedFor      `protobuf:"varint,40,opt,name=EventType,proto3,enum=third.manager.usedfor.v1.UsedFor" json:"EventType,omitempty"`
	Channel   channel.NotifChannel `protobuf:"varint,50,opt,name=Channel,proto3,enum=notif.manager.channel.v1.NotifChannel" json:"Channel,omitempty"`
	CreatedAt uint32               `protobuf:"varint,60,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
}

func (x *NotifChannel) Reset() {
	*x = NotifChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifChannel) ProtoMessage() {}

func (x *NotifChannel) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifChannel.ProtoReflect.Descriptor instead.
func (*NotifChannel) Descriptor() ([]byte, []int) {
	return file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_rawDescGZIP(), []int{0}
}

func (x *NotifChannel) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *NotifChannel) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *NotifChannel) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *NotifChannel) GetEventType() usedfor.UsedFor {
	if x != nil {
		return x.EventType
	}
	return usedfor.UsedFor(0)
}

func (x *NotifChannel) GetChannel() channel.NotifChannel {
	if x != nil {
		return x.Channel
	}
	return channel.NotifChannel(0)
}

func (x *NotifChannel) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

type CreateNotifChannelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID      string               `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
	EventTypes []usedfor.UsedFor    `protobuf:"varint,20,rep,packed,name=EventTypes,proto3,enum=third.manager.usedfor.v1.UsedFor" json:"EventTypes,omitempty"`
	Channel    channel.NotifChannel `protobuf:"varint,30,opt,name=Channel,proto3,enum=notif.manager.channel.v1.NotifChannel" json:"Channel,omitempty"`
}

func (x *CreateNotifChannelsRequest) Reset() {
	*x = CreateNotifChannelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNotifChannelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNotifChannelsRequest) ProtoMessage() {}

func (x *CreateNotifChannelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNotifChannelsRequest.ProtoReflect.Descriptor instead.
func (*CreateNotifChannelsRequest) Descriptor() ([]byte, []int) {
	return file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_rawDescGZIP(), []int{1}
}

func (x *CreateNotifChannelsRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *CreateNotifChannelsRequest) GetEventTypes() []usedfor.UsedFor {
	if x != nil {
		return x.EventTypes
	}
	return nil
}

func (x *CreateNotifChannelsRequest) GetChannel() channel.NotifChannel {
	if x != nil {
		return x.Channel
	}
	return channel.NotifChannel(0)
}

type CreateNotifChannelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*NotifChannel `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateNotifChannelsResponse) Reset() {
	*x = CreateNotifChannelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNotifChannelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNotifChannelsResponse) ProtoMessage() {}

func (x *CreateNotifChannelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNotifChannelsResponse.ProtoReflect.Descriptor instead.
func (*CreateNotifChannelsResponse) Descriptor() ([]byte, []int) {
	return file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_rawDescGZIP(), []int{2}
}

func (x *CreateNotifChannelsResponse) GetInfos() []*NotifChannel {
	if x != nil {
		return x.Infos
	}
	return nil
}

type DeleteNotifChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID    string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	AppID string `protobuf:"bytes,20,opt,name=AppID,proto3" json:"AppID,omitempty"`
}

func (x *DeleteNotifChannelRequest) Reset() {
	*x = DeleteNotifChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNotifChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNotifChannelRequest) ProtoMessage() {}

func (x *DeleteNotifChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNotifChannelRequest.ProtoReflect.Descriptor instead.
func (*DeleteNotifChannelRequest) Descriptor() ([]byte, []int) {
	return file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteNotifChannelRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *DeleteNotifChannelRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

type DeleteNotifChannelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *NotifChannel `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteNotifChannelResponse) Reset() {
	*x = DeleteNotifChannelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNotifChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNotifChannelResponse) ProtoMessage() {}

func (x *DeleteNotifChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNotifChannelResponse.ProtoReflect.Descriptor instead.
func (*DeleteNotifChannelResponse) Descriptor() ([]byte, []int) {
	return file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteNotifChannelResponse) GetInfo() *NotifChannel {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetAppNotifChannelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID  string `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
	Offset uint32 `protobuf:"varint,30,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  uint32 `protobuf:"varint,40,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetAppNotifChannelsRequest) Reset() {
	*x = GetAppNotifChannelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppNotifChannelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppNotifChannelsRequest) ProtoMessage() {}

func (x *GetAppNotifChannelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppNotifChannelsRequest.ProtoReflect.Descriptor instead.
func (*GetAppNotifChannelsRequest) Descriptor() ([]byte, []int) {
	return file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_rawDescGZIP(), []int{5}
}

func (x *GetAppNotifChannelsRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetAppNotifChannelsRequest) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetAppNotifChannelsRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetAppNotifChannelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*NotifChannel `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32          `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetAppNotifChannelsResponse) Reset() {
	*x = GetAppNotifChannelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppNotifChannelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppNotifChannelsResponse) ProtoMessage() {}

func (x *GetAppNotifChannelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppNotifChannelsResponse.ProtoReflect.Descriptor instead.
func (*GetAppNotifChannelsResponse) Descriptor() ([]byte, []int) {
	return file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_rawDescGZIP(), []int{6}
}

func (x *GetAppNotifChannelsResponse) GetInfos() []*NotifChannel {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetAppNotifChannelsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetNAppNotifChannelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetAppID string `protobuf:"bytes,10,opt,name=TargetAppID,proto3" json:"TargetAppID,omitempty"`
	Offset      uint32 `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit       uint32 `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetNAppNotifChannelsRequest) Reset() {
	*x = GetNAppNotifChannelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNAppNotifChannelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNAppNotifChannelsRequest) ProtoMessage() {}

func (x *GetNAppNotifChannelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNAppNotifChannelsRequest.ProtoReflect.Descriptor instead.
func (*GetNAppNotifChannelsRequest) Descriptor() ([]byte, []int) {
	return file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_rawDescGZIP(), []int{7}
}

func (x *GetNAppNotifChannelsRequest) GetTargetAppID() string {
	if x != nil {
		return x.TargetAppID
	}
	return ""
}

func (x *GetNAppNotifChannelsRequest) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetNAppNotifChannelsRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetNAppNotifChannelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*NotifChannel `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32          `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetNAppNotifChannelsResponse) Reset() {
	*x = GetNAppNotifChannelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNAppNotifChannelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNAppNotifChannelsResponse) ProtoMessage() {}

func (x *GetNAppNotifChannelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNAppNotifChannelsResponse.ProtoReflect.Descriptor instead.
func (*GetNAppNotifChannelsResponse) Descriptor() ([]byte, []int) {
	return file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_rawDescGZIP(), []int{8}
}

func (x *GetNAppNotifChannelsResponse) GetInfos() []*NotifChannel {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetNAppNotifChannelsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

var File_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto protoreflect.FileDescriptor

var file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_rawDesc = []byte{
	0x0a, 0x37, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2f, 0x67, 0x77,
	0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x32, 0x2e,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x6e,
	0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2f, 0x6d, 0x67, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x74,
	0x68, 0x69, 0x72, 0x64, 0x2f, 0x6d, 0x67, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x64,
	0x66, 0x6f, 0x72, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x64, 0x66, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xef, 0x01, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x70, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x70, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x75, 0x73, 0x65, 0x64, 0x66, 0x6f, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x73, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x52, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0x32, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x22, 0xb7, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x41, 0x0a, 0x0a, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x21, 0x2e,
	0x74, 0x68, 0x69, 0x72, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x75, 0x73,
	0x65, 0x64, 0x66, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x64, 0x46, 0x6f, 0x72,
	0x52, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x07,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x67,
	0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a,
	0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x32, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x41, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x22, 0x64, 0x0a, 0x1a, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x32, 0x2e, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x60, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0x7d, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x48, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x32, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x22, 0x6d, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4e, 0x41, 0x70, 0x70, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0x7e, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4e, 0x41, 0x70, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x48, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x32, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x32, 0x94, 0x06, 0x0a, 0x07, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0xbf, 0x01, 0x0a,
	0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x12, 0x40, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x32, 0x2e, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x32, 0x2e, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1d, 0x22, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xbb,
	0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x3f, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x32, 0x2e, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x32, 0x2e, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c,
	0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2f, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x3a, 0x01, 0x2a, 0x12, 0xc0, 0x01, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x12, 0x40, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x32, 0x2e, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x70, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x32, 0x2e, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x70, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1e, 0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x3a, 0x01, 0x2a, 0x12,
	0xc5, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4e, 0x41, 0x70, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x41, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x32, 0x2e,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4e, 0x41, 0x70, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x32, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x41, 0x70, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74,
	0x2f, 0x6e, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x3a, 0x01, 0x2a, 0x42, 0x47, 0x5a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f,
	0x6c, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x2f, 0x67, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_rawDescOnce sync.Once
	file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_rawDescData = file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_rawDesc
)

func file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_rawDescGZIP() []byte {
	file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_rawDescOnce.Do(func() {
		file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_rawDescData)
	})
	return file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_rawDescData
}

var file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_goTypes = []interface{}{
	(*NotifChannel)(nil),                 // 0: notif.gateway.notif2.notifchannel.v1.NotifChannel
	(*CreateNotifChannelsRequest)(nil),   // 1: notif.gateway.notif2.notifchannel.v1.CreateNotifChannelsRequest
	(*CreateNotifChannelsResponse)(nil),  // 2: notif.gateway.notif2.notifchannel.v1.CreateNotifChannelsResponse
	(*DeleteNotifChannelRequest)(nil),    // 3: notif.gateway.notif2.notifchannel.v1.DeleteNotifChannelRequest
	(*DeleteNotifChannelResponse)(nil),   // 4: notif.gateway.notif2.notifchannel.v1.DeleteNotifChannelResponse
	(*GetAppNotifChannelsRequest)(nil),   // 5: notif.gateway.notif2.notifchannel.v1.GetAppNotifChannelsRequest
	(*GetAppNotifChannelsResponse)(nil),  // 6: notif.gateway.notif2.notifchannel.v1.GetAppNotifChannelsResponse
	(*GetNAppNotifChannelsRequest)(nil),  // 7: notif.gateway.notif2.notifchannel.v1.GetNAppNotifChannelsRequest
	(*GetNAppNotifChannelsResponse)(nil), // 8: notif.gateway.notif2.notifchannel.v1.GetNAppNotifChannelsResponse
	(usedfor.UsedFor)(0),                 // 9: third.manager.usedfor.v1.UsedFor
	(channel.NotifChannel)(0),            // 10: notif.manager.channel.v1.NotifChannel
}
var file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_depIdxs = []int32{
	9,  // 0: notif.gateway.notif2.notifchannel.v1.NotifChannel.EventType:type_name -> third.manager.usedfor.v1.UsedFor
	10, // 1: notif.gateway.notif2.notifchannel.v1.NotifChannel.Channel:type_name -> notif.manager.channel.v1.NotifChannel
	9,  // 2: notif.gateway.notif2.notifchannel.v1.CreateNotifChannelsRequest.EventTypes:type_name -> third.manager.usedfor.v1.UsedFor
	10, // 3: notif.gateway.notif2.notifchannel.v1.CreateNotifChannelsRequest.Channel:type_name -> notif.manager.channel.v1.NotifChannel
	0,  // 4: notif.gateway.notif2.notifchannel.v1.CreateNotifChannelsResponse.Infos:type_name -> notif.gateway.notif2.notifchannel.v1.NotifChannel
	0,  // 5: notif.gateway.notif2.notifchannel.v1.DeleteNotifChannelResponse.Info:type_name -> notif.gateway.notif2.notifchannel.v1.NotifChannel
	0,  // 6: notif.gateway.notif2.notifchannel.v1.GetAppNotifChannelsResponse.Infos:type_name -> notif.gateway.notif2.notifchannel.v1.NotifChannel
	0,  // 7: notif.gateway.notif2.notifchannel.v1.GetNAppNotifChannelsResponse.Infos:type_name -> notif.gateway.notif2.notifchannel.v1.NotifChannel
	1,  // 8: notif.gateway.notif2.notifchannel.v1.Gateway.CreateNotifChannels:input_type -> notif.gateway.notif2.notifchannel.v1.CreateNotifChannelsRequest
	3,  // 9: notif.gateway.notif2.notifchannel.v1.Gateway.DeleteNotifChannel:input_type -> notif.gateway.notif2.notifchannel.v1.DeleteNotifChannelRequest
	5,  // 10: notif.gateway.notif2.notifchannel.v1.Gateway.GetAppNotifChannels:input_type -> notif.gateway.notif2.notifchannel.v1.GetAppNotifChannelsRequest
	7,  // 11: notif.gateway.notif2.notifchannel.v1.Gateway.GetNAppNotifChannels:input_type -> notif.gateway.notif2.notifchannel.v1.GetNAppNotifChannelsRequest
	2,  // 12: notif.gateway.notif2.notifchannel.v1.Gateway.CreateNotifChannels:output_type -> notif.gateway.notif2.notifchannel.v1.CreateNotifChannelsResponse
	4,  // 13: notif.gateway.notif2.notifchannel.v1.Gateway.DeleteNotifChannel:output_type -> notif.gateway.notif2.notifchannel.v1.DeleteNotifChannelResponse
	6,  // 14: notif.gateway.notif2.notifchannel.v1.Gateway.GetAppNotifChannels:output_type -> notif.gateway.notif2.notifchannel.v1.GetAppNotifChannelsResponse
	8,  // 15: notif.gateway.notif2.notifchannel.v1.Gateway.GetNAppNotifChannels:output_type -> notif.gateway.notif2.notifchannel.v1.GetNAppNotifChannelsResponse
	12, // [12:16] is the sub-list for method output_type
	8,  // [8:12] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_init() }
func file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_init() {
	if File_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNotifChannelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNotifChannelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNotifChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNotifChannelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppNotifChannelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppNotifChannelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNAppNotifChannelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNAppNotifChannelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_goTypes,
		DependencyIndexes: file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_depIdxs,
		MessageInfos:      file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_msgTypes,
	}.Build()
	File_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto = out.File
	file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_rawDesc = nil
	file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_goTypes = nil
	file_npool_notif_gw_v1_notif_notifchannel_notifchannel_proto_depIdxs = nil
}
