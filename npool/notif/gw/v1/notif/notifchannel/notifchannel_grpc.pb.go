// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/notif/gw/v1/notif/notifchannel/notifchannel.proto

package notifchannel

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	CreateNotifChannels(ctx context.Context, in *CreateNotifChannelsRequest, opts ...grpc.CallOption) (*CreateNotifChannelsResponse, error)
	DeleteNotifChannel(ctx context.Context, in *DeleteNotifChannelRequest, opts ...grpc.CallOption) (*DeleteNotifChannelResponse, error)
	GetAppNotifChannels(ctx context.Context, in *GetAppNotifChannelsRequest, opts ...grpc.CallOption) (*GetAppNotifChannelsResponse, error)
	GetNAppNotifChannels(ctx context.Context, in *GetNAppNotifChannelsRequest, opts ...grpc.CallOption) (*GetNAppNotifChannelsResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) CreateNotifChannels(ctx context.Context, in *CreateNotifChannelsRequest, opts ...grpc.CallOption) (*CreateNotifChannelsResponse, error) {
	out := new(CreateNotifChannelsResponse)
	err := c.cc.Invoke(ctx, "/notif.gateway.notif2.notifchannel.v1.Gateway/CreateNotifChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) DeleteNotifChannel(ctx context.Context, in *DeleteNotifChannelRequest, opts ...grpc.CallOption) (*DeleteNotifChannelResponse, error) {
	out := new(DeleteNotifChannelResponse)
	err := c.cc.Invoke(ctx, "/notif.gateway.notif2.notifchannel.v1.Gateway/DeleteNotifChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetAppNotifChannels(ctx context.Context, in *GetAppNotifChannelsRequest, opts ...grpc.CallOption) (*GetAppNotifChannelsResponse, error) {
	out := new(GetAppNotifChannelsResponse)
	err := c.cc.Invoke(ctx, "/notif.gateway.notif2.notifchannel.v1.Gateway/GetAppNotifChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetNAppNotifChannels(ctx context.Context, in *GetNAppNotifChannelsRequest, opts ...grpc.CallOption) (*GetNAppNotifChannelsResponse, error) {
	out := new(GetNAppNotifChannelsResponse)
	err := c.cc.Invoke(ctx, "/notif.gateway.notif2.notifchannel.v1.Gateway/GetNAppNotifChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	CreateNotifChannels(context.Context, *CreateNotifChannelsRequest) (*CreateNotifChannelsResponse, error)
	DeleteNotifChannel(context.Context, *DeleteNotifChannelRequest) (*DeleteNotifChannelResponse, error)
	GetAppNotifChannels(context.Context, *GetAppNotifChannelsRequest) (*GetAppNotifChannelsResponse, error)
	GetNAppNotifChannels(context.Context, *GetNAppNotifChannelsRequest) (*GetNAppNotifChannelsResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) CreateNotifChannels(context.Context, *CreateNotifChannelsRequest) (*CreateNotifChannelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotifChannels not implemented")
}
func (UnimplementedGatewayServer) DeleteNotifChannel(context.Context, *DeleteNotifChannelRequest) (*DeleteNotifChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNotifChannel not implemented")
}
func (UnimplementedGatewayServer) GetAppNotifChannels(context.Context, *GetAppNotifChannelsRequest) (*GetAppNotifChannelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppNotifChannels not implemented")
}
func (UnimplementedGatewayServer) GetNAppNotifChannels(context.Context, *GetNAppNotifChannelsRequest) (*GetNAppNotifChannelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNAppNotifChannels not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_CreateNotifChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNotifChannelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreateNotifChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.gateway.notif2.notifchannel.v1.Gateway/CreateNotifChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreateNotifChannels(ctx, req.(*CreateNotifChannelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_DeleteNotifChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNotifChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).DeleteNotifChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.gateway.notif2.notifchannel.v1.Gateway/DeleteNotifChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).DeleteNotifChannel(ctx, req.(*DeleteNotifChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetAppNotifChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppNotifChannelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetAppNotifChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.gateway.notif2.notifchannel.v1.Gateway/GetAppNotifChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetAppNotifChannels(ctx, req.(*GetAppNotifChannelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetNAppNotifChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNAppNotifChannelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetNAppNotifChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.gateway.notif2.notifchannel.v1.Gateway/GetNAppNotifChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetNAppNotifChannels(ctx, req.(*GetNAppNotifChannelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notif.gateway.notif2.notifchannel.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNotifChannels",
			Handler:    _Gateway_CreateNotifChannels_Handler,
		},
		{
			MethodName: "DeleteNotifChannel",
			Handler:    _Gateway_DeleteNotifChannel_Handler,
		},
		{
			MethodName: "GetAppNotifChannels",
			Handler:    _Gateway_GetAppNotifChannels_Handler,
		},
		{
			MethodName: "GetNAppNotifChannels",
			Handler:    _Gateway_GetNAppNotifChannels_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/notif/gw/v1/notif/notifchannel/notifchannel.proto",
}
