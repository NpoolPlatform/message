// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/notif/gw/v1/announcement/user/user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	CreateAnnouncementUser(ctx context.Context, in *CreateAnnouncementUserRequest, opts ...grpc.CallOption) (*CreateAnnouncementUserResponse, error)
	CreateAppAnnouncementUser(ctx context.Context, in *CreateAppAnnouncementUserRequest, opts ...grpc.CallOption) (*CreateAppAnnouncementUserResponse, error)
	DeleteAnnouncementUser(ctx context.Context, in *DeleteAnnouncementUserRequest, opts ...grpc.CallOption) (*DeleteAnnouncementUserResponse, error)
	DeleteAppAnnouncementUser(ctx context.Context, in *DeleteAppAnnouncementUserRequest, opts ...grpc.CallOption) (*DeleteAppAnnouncementUserResponse, error)
	GetAnnouncementUsers(ctx context.Context, in *GetAnnouncementUsersRequest, opts ...grpc.CallOption) (*GetAnnouncementUsersResponse, error)
	GetAppAnnouncementUsers(ctx context.Context, in *GetAppAnnouncementUsersRequest, opts ...grpc.CallOption) (*GetAppAnnouncementUsersResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) CreateAnnouncementUser(ctx context.Context, in *CreateAnnouncementUserRequest, opts ...grpc.CallOption) (*CreateAnnouncementUserResponse, error) {
	out := new(CreateAnnouncementUserResponse)
	err := c.cc.Invoke(ctx, "/notif.gateway.announcement.user.v1.Gateway/CreateAnnouncementUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) CreateAppAnnouncementUser(ctx context.Context, in *CreateAppAnnouncementUserRequest, opts ...grpc.CallOption) (*CreateAppAnnouncementUserResponse, error) {
	out := new(CreateAppAnnouncementUserResponse)
	err := c.cc.Invoke(ctx, "/notif.gateway.announcement.user.v1.Gateway/CreateAppAnnouncementUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) DeleteAnnouncementUser(ctx context.Context, in *DeleteAnnouncementUserRequest, opts ...grpc.CallOption) (*DeleteAnnouncementUserResponse, error) {
	out := new(DeleteAnnouncementUserResponse)
	err := c.cc.Invoke(ctx, "/notif.gateway.announcement.user.v1.Gateway/DeleteAnnouncementUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) DeleteAppAnnouncementUser(ctx context.Context, in *DeleteAppAnnouncementUserRequest, opts ...grpc.CallOption) (*DeleteAppAnnouncementUserResponse, error) {
	out := new(DeleteAppAnnouncementUserResponse)
	err := c.cc.Invoke(ctx, "/notif.gateway.announcement.user.v1.Gateway/DeleteAppAnnouncementUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetAnnouncementUsers(ctx context.Context, in *GetAnnouncementUsersRequest, opts ...grpc.CallOption) (*GetAnnouncementUsersResponse, error) {
	out := new(GetAnnouncementUsersResponse)
	err := c.cc.Invoke(ctx, "/notif.gateway.announcement.user.v1.Gateway/GetAnnouncementUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetAppAnnouncementUsers(ctx context.Context, in *GetAppAnnouncementUsersRequest, opts ...grpc.CallOption) (*GetAppAnnouncementUsersResponse, error) {
	out := new(GetAppAnnouncementUsersResponse)
	err := c.cc.Invoke(ctx, "/notif.gateway.announcement.user.v1.Gateway/GetAppAnnouncementUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	CreateAnnouncementUser(context.Context, *CreateAnnouncementUserRequest) (*CreateAnnouncementUserResponse, error)
	CreateAppAnnouncementUser(context.Context, *CreateAppAnnouncementUserRequest) (*CreateAppAnnouncementUserResponse, error)
	DeleteAnnouncementUser(context.Context, *DeleteAnnouncementUserRequest) (*DeleteAnnouncementUserResponse, error)
	DeleteAppAnnouncementUser(context.Context, *DeleteAppAnnouncementUserRequest) (*DeleteAppAnnouncementUserResponse, error)
	GetAnnouncementUsers(context.Context, *GetAnnouncementUsersRequest) (*GetAnnouncementUsersResponse, error)
	GetAppAnnouncementUsers(context.Context, *GetAppAnnouncementUsersRequest) (*GetAppAnnouncementUsersResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) CreateAnnouncementUser(context.Context, *CreateAnnouncementUserRequest) (*CreateAnnouncementUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnnouncementUser not implemented")
}
func (UnimplementedGatewayServer) CreateAppAnnouncementUser(context.Context, *CreateAppAnnouncementUserRequest) (*CreateAppAnnouncementUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppAnnouncementUser not implemented")
}
func (UnimplementedGatewayServer) DeleteAnnouncementUser(context.Context, *DeleteAnnouncementUserRequest) (*DeleteAnnouncementUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAnnouncementUser not implemented")
}
func (UnimplementedGatewayServer) DeleteAppAnnouncementUser(context.Context, *DeleteAppAnnouncementUserRequest) (*DeleteAppAnnouncementUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppAnnouncementUser not implemented")
}
func (UnimplementedGatewayServer) GetAnnouncementUsers(context.Context, *GetAnnouncementUsersRequest) (*GetAnnouncementUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnnouncementUsers not implemented")
}
func (UnimplementedGatewayServer) GetAppAnnouncementUsers(context.Context, *GetAppAnnouncementUsersRequest) (*GetAppAnnouncementUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppAnnouncementUsers not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_CreateAnnouncementUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnnouncementUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreateAnnouncementUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.gateway.announcement.user.v1.Gateway/CreateAnnouncementUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreateAnnouncementUser(ctx, req.(*CreateAnnouncementUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_CreateAppAnnouncementUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppAnnouncementUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreateAppAnnouncementUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.gateway.announcement.user.v1.Gateway/CreateAppAnnouncementUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreateAppAnnouncementUser(ctx, req.(*CreateAppAnnouncementUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_DeleteAnnouncementUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAnnouncementUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).DeleteAnnouncementUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.gateway.announcement.user.v1.Gateway/DeleteAnnouncementUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).DeleteAnnouncementUser(ctx, req.(*DeleteAnnouncementUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_DeleteAppAnnouncementUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppAnnouncementUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).DeleteAppAnnouncementUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.gateway.announcement.user.v1.Gateway/DeleteAppAnnouncementUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).DeleteAppAnnouncementUser(ctx, req.(*DeleteAppAnnouncementUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetAnnouncementUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnnouncementUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetAnnouncementUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.gateway.announcement.user.v1.Gateway/GetAnnouncementUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetAnnouncementUsers(ctx, req.(*GetAnnouncementUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetAppAnnouncementUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppAnnouncementUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetAppAnnouncementUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.gateway.announcement.user.v1.Gateway/GetAppAnnouncementUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetAppAnnouncementUsers(ctx, req.(*GetAppAnnouncementUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notif.gateway.announcement.user.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAnnouncementUser",
			Handler:    _Gateway_CreateAnnouncementUser_Handler,
		},
		{
			MethodName: "CreateAppAnnouncementUser",
			Handler:    _Gateway_CreateAppAnnouncementUser_Handler,
		},
		{
			MethodName: "DeleteAnnouncementUser",
			Handler:    _Gateway_DeleteAnnouncementUser_Handler,
		},
		{
			MethodName: "DeleteAppAnnouncementUser",
			Handler:    _Gateway_DeleteAppAnnouncementUser_Handler,
		},
		{
			MethodName: "GetAnnouncementUsers",
			Handler:    _Gateway_GetAnnouncementUsers_Handler,
		},
		{
			MethodName: "GetAppAnnouncementUsers",
			Handler:    _Gateway_GetAppAnnouncementUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/notif/gw/v1/announcement/user/user.proto",
}
