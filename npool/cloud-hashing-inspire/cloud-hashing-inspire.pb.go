// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: npool/cloud-hashing-inspire/cloud-hashing-inspire.proto

package cloud_hashing_inspire

import (
	npool "github.com/NpoolPlatform/message/npool"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// request body and response
type NewUserRewardSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                         string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	AppID                      string `protobuf:"bytes,20,opt,name=AppID,proto3" json:"AppID,omitempty"`
	RegistrationCouponID       string `protobuf:"bytes,30,opt,name=RegistrationCouponID,proto3" json:"RegistrationCouponID,omitempty"`
	KycCouponID                string `protobuf:"bytes,40,opt,name=KycCouponID,proto3" json:"KycCouponID,omitempty"`
	AutoGenerateInvitationCode bool   `protobuf:"varint,50,opt,name=AutoGenerateInvitationCode,proto3" json:"AutoGenerateInvitationCode,omitempty"`
}

func (x *NewUserRewardSetting) Reset() {
	*x = NewUserRewardSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewUserRewardSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewUserRewardSetting) ProtoMessage() {}

func (x *NewUserRewardSetting) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewUserRewardSetting.ProtoReflect.Descriptor instead.
func (*NewUserRewardSetting) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{0}
}

func (x *NewUserRewardSetting) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *NewUserRewardSetting) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *NewUserRewardSetting) GetRegistrationCouponID() string {
	if x != nil {
		return x.RegistrationCouponID
	}
	return ""
}

func (x *NewUserRewardSetting) GetKycCouponID() string {
	if x != nil {
		return x.KycCouponID
	}
	return ""
}

func (x *NewUserRewardSetting) GetAutoGenerateInvitationCode() bool {
	if x != nil {
		return x.AutoGenerateInvitationCode
	}
	return false
}

type CreateNewUserRewardSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *NewUserRewardSetting `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateNewUserRewardSettingRequest) Reset() {
	*x = CreateNewUserRewardSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNewUserRewardSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNewUserRewardSettingRequest) ProtoMessage() {}

func (x *CreateNewUserRewardSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNewUserRewardSettingRequest.ProtoReflect.Descriptor instead.
func (*CreateNewUserRewardSettingRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{1}
}

func (x *CreateNewUserRewardSettingRequest) GetInfo() *NewUserRewardSetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateNewUserRewardSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *NewUserRewardSetting `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateNewUserRewardSettingResponse) Reset() {
	*x = CreateNewUserRewardSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNewUserRewardSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNewUserRewardSettingResponse) ProtoMessage() {}

func (x *CreateNewUserRewardSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNewUserRewardSettingResponse.ProtoReflect.Descriptor instead.
func (*CreateNewUserRewardSettingResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{2}
}

func (x *CreateNewUserRewardSettingResponse) GetInfo() *NewUserRewardSetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetNewUserRewardSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetNewUserRewardSettingRequest) Reset() {
	*x = GetNewUserRewardSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewUserRewardSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewUserRewardSettingRequest) ProtoMessage() {}

func (x *GetNewUserRewardSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewUserRewardSettingRequest.ProtoReflect.Descriptor instead.
func (*GetNewUserRewardSettingRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{3}
}

func (x *GetNewUserRewardSettingRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetNewUserRewardSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *NewUserRewardSetting `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetNewUserRewardSettingResponse) Reset() {
	*x = GetNewUserRewardSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewUserRewardSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewUserRewardSettingResponse) ProtoMessage() {}

func (x *GetNewUserRewardSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewUserRewardSettingResponse.ProtoReflect.Descriptor instead.
func (*GetNewUserRewardSettingResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{4}
}

func (x *GetNewUserRewardSettingResponse) GetInfo() *NewUserRewardSetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetNewUserRewardSettingByAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID string `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
}

func (x *GetNewUserRewardSettingByAppRequest) Reset() {
	*x = GetNewUserRewardSettingByAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewUserRewardSettingByAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewUserRewardSettingByAppRequest) ProtoMessage() {}

func (x *GetNewUserRewardSettingByAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewUserRewardSettingByAppRequest.ProtoReflect.Descriptor instead.
func (*GetNewUserRewardSettingByAppRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{5}
}

func (x *GetNewUserRewardSettingByAppRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

type GetNewUserRewardSettingByAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *NewUserRewardSetting `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetNewUserRewardSettingByAppResponse) Reset() {
	*x = GetNewUserRewardSettingByAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewUserRewardSettingByAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewUserRewardSettingByAppResponse) ProtoMessage() {}

func (x *GetNewUserRewardSettingByAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewUserRewardSettingByAppResponse.ProtoReflect.Descriptor instead.
func (*GetNewUserRewardSettingByAppResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{6}
}

func (x *GetNewUserRewardSettingByAppResponse) GetInfo() *NewUserRewardSetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateNewUserRewardSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *NewUserRewardSetting `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateNewUserRewardSettingRequest) Reset() {
	*x = UpdateNewUserRewardSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNewUserRewardSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNewUserRewardSettingRequest) ProtoMessage() {}

func (x *UpdateNewUserRewardSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNewUserRewardSettingRequest.ProtoReflect.Descriptor instead.
func (*UpdateNewUserRewardSettingRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateNewUserRewardSettingRequest) GetInfo() *NewUserRewardSetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateNewUserRewardSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *NewUserRewardSetting `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateNewUserRewardSettingResponse) Reset() {
	*x = UpdateNewUserRewardSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNewUserRewardSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNewUserRewardSettingResponse) ProtoMessage() {}

func (x *UpdateNewUserRewardSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNewUserRewardSettingResponse.ProtoReflect.Descriptor instead.
func (*UpdateNewUserRewardSettingResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateNewUserRewardSettingResponse) GetInfo() *NewUserRewardSetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type AgencySetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                          string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	AppID                       string `protobuf:"bytes,20,opt,name=AppID,proto3" json:"AppID,omitempty"`
	GoodID                      string `protobuf:"bytes,30,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
	RegistrationRewardThreshold int32  `protobuf:"varint,40,opt,name=RegistrationRewardThreshold,proto3" json:"RegistrationRewardThreshold,omitempty"`
	RegistrationCouponID        string `protobuf:"bytes,50,opt,name=RegistrationCouponID,proto3" json:"RegistrationCouponID,omitempty"`
	KycRewardThreshold          int32  `protobuf:"varint,60,opt,name=KycRewardThreshold,proto3" json:"KycRewardThreshold,omitempty"`
	KycCouponID                 string `protobuf:"bytes,70,opt,name=KycCouponID,proto3" json:"KycCouponID,omitempty"`
	TotalPurchaseRewardPercent  int32  `protobuf:"varint,80,opt,name=TotalPurchaseRewardPercent,proto3" json:"TotalPurchaseRewardPercent,omitempty"`
	PurchaseRewardChainLevels   int32  `protobuf:"varint,90,opt,name=PurchaseRewardChainLevels,proto3" json:"PurchaseRewardChainLevels,omitempty"`
	LevelPurchaseRewardPercent  int32  `protobuf:"varint,100,opt,name=LevelPurchaseRewardPercent,proto3" json:"LevelPurchaseRewardPercent,omitempty"`
}

func (x *AgencySetting) Reset() {
	*x = AgencySetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgencySetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgencySetting) ProtoMessage() {}

func (x *AgencySetting) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgencySetting.ProtoReflect.Descriptor instead.
func (*AgencySetting) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{9}
}

func (x *AgencySetting) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *AgencySetting) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *AgencySetting) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *AgencySetting) GetRegistrationRewardThreshold() int32 {
	if x != nil {
		return x.RegistrationRewardThreshold
	}
	return 0
}

func (x *AgencySetting) GetRegistrationCouponID() string {
	if x != nil {
		return x.RegistrationCouponID
	}
	return ""
}

func (x *AgencySetting) GetKycRewardThreshold() int32 {
	if x != nil {
		return x.KycRewardThreshold
	}
	return 0
}

func (x *AgencySetting) GetKycCouponID() string {
	if x != nil {
		return x.KycCouponID
	}
	return ""
}

func (x *AgencySetting) GetTotalPurchaseRewardPercent() int32 {
	if x != nil {
		return x.TotalPurchaseRewardPercent
	}
	return 0
}

func (x *AgencySetting) GetPurchaseRewardChainLevels() int32 {
	if x != nil {
		return x.PurchaseRewardChainLevels
	}
	return 0
}

func (x *AgencySetting) GetLevelPurchaseRewardPercent() int32 {
	if x != nil {
		return x.LevelPurchaseRewardPercent
	}
	return 0
}

type CreateAgencySettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AgencySetting `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateAgencySettingRequest) Reset() {
	*x = CreateAgencySettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAgencySettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAgencySettingRequest) ProtoMessage() {}

func (x *CreateAgencySettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAgencySettingRequest.ProtoReflect.Descriptor instead.
func (*CreateAgencySettingRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{10}
}

func (x *CreateAgencySettingRequest) GetInfo() *AgencySetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateAgencySettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AgencySetting `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateAgencySettingResponse) Reset() {
	*x = CreateAgencySettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAgencySettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAgencySettingResponse) ProtoMessage() {}

func (x *CreateAgencySettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAgencySettingResponse.ProtoReflect.Descriptor instead.
func (*CreateAgencySettingResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{11}
}

func (x *CreateAgencySettingResponse) GetInfo() *AgencySetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetAgencySettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetAgencySettingRequest) Reset() {
	*x = GetAgencySettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAgencySettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAgencySettingRequest) ProtoMessage() {}

func (x *GetAgencySettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAgencySettingRequest.ProtoReflect.Descriptor instead.
func (*GetAgencySettingRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{12}
}

func (x *GetAgencySettingRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetAgencySettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AgencySetting `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetAgencySettingResponse) Reset() {
	*x = GetAgencySettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAgencySettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAgencySettingResponse) ProtoMessage() {}

func (x *GetAgencySettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAgencySettingResponse.ProtoReflect.Descriptor instead.
func (*GetAgencySettingResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{13}
}

func (x *GetAgencySettingResponse) GetInfo() *AgencySetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetAgencySettingByAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID string `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
}

func (x *GetAgencySettingByAppRequest) Reset() {
	*x = GetAgencySettingByAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAgencySettingByAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAgencySettingByAppRequest) ProtoMessage() {}

func (x *GetAgencySettingByAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAgencySettingByAppRequest.ProtoReflect.Descriptor instead.
func (*GetAgencySettingByAppRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{14}
}

func (x *GetAgencySettingByAppRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

type GetAgencySettingByAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AgencySetting `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetAgencySettingByAppResponse) Reset() {
	*x = GetAgencySettingByAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAgencySettingByAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAgencySettingByAppResponse) ProtoMessage() {}

func (x *GetAgencySettingByAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAgencySettingByAppResponse.ProtoReflect.Descriptor instead.
func (*GetAgencySettingByAppResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{15}
}

func (x *GetAgencySettingByAppResponse) GetInfo() *AgencySetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateAgencySettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AgencySetting `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateAgencySettingRequest) Reset() {
	*x = UpdateAgencySettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAgencySettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAgencySettingRequest) ProtoMessage() {}

func (x *UpdateAgencySettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAgencySettingRequest.ProtoReflect.Descriptor instead.
func (*UpdateAgencySettingRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateAgencySettingRequest) GetInfo() *AgencySetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateAgencySettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AgencySetting `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateAgencySettingResponse) Reset() {
	*x = UpdateAgencySettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAgencySettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAgencySettingResponse) ProtoMessage() {}

func (x *UpdateAgencySettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAgencySettingResponse.ProtoReflect.Descriptor instead.
func (*UpdateAgencySettingResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateAgencySettingResponse) GetInfo() *AgencySetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type PurchaseInvitation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	AppID            string `protobuf:"bytes,20,opt,name=AppID,proto3" json:"AppID,omitempty"`
	OrderID          string `protobuf:"bytes,30,opt,name=OrderID,proto3" json:"OrderID,omitempty"`
	InvitationCodeID string `protobuf:"bytes,40,opt,name=InvitationCodeID,proto3" json:"InvitationCodeID,omitempty"`
}

func (x *PurchaseInvitation) Reset() {
	*x = PurchaseInvitation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurchaseInvitation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurchaseInvitation) ProtoMessage() {}

func (x *PurchaseInvitation) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurchaseInvitation.ProtoReflect.Descriptor instead.
func (*PurchaseInvitation) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{18}
}

func (x *PurchaseInvitation) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *PurchaseInvitation) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *PurchaseInvitation) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

func (x *PurchaseInvitation) GetInvitationCodeID() string {
	if x != nil {
		return x.InvitationCodeID
	}
	return ""
}

type CreatePurchaseInvitationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PurchaseInvitation `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreatePurchaseInvitationRequest) Reset() {
	*x = CreatePurchaseInvitationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePurchaseInvitationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePurchaseInvitationRequest) ProtoMessage() {}

func (x *CreatePurchaseInvitationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePurchaseInvitationRequest.ProtoReflect.Descriptor instead.
func (*CreatePurchaseInvitationRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{19}
}

func (x *CreatePurchaseInvitationRequest) GetInfo() *PurchaseInvitation {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreatePurchaseInvitationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PurchaseInvitation `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreatePurchaseInvitationResponse) Reset() {
	*x = CreatePurchaseInvitationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePurchaseInvitationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePurchaseInvitationResponse) ProtoMessage() {}

func (x *CreatePurchaseInvitationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePurchaseInvitationResponse.ProtoReflect.Descriptor instead.
func (*CreatePurchaseInvitationResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{20}
}

func (x *CreatePurchaseInvitationResponse) GetInfo() *PurchaseInvitation {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdatePurchaseInvitationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PurchaseInvitation `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdatePurchaseInvitationRequest) Reset() {
	*x = UpdatePurchaseInvitationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePurchaseInvitationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePurchaseInvitationRequest) ProtoMessage() {}

func (x *UpdatePurchaseInvitationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePurchaseInvitationRequest.ProtoReflect.Descriptor instead.
func (*UpdatePurchaseInvitationRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{21}
}

func (x *UpdatePurchaseInvitationRequest) GetInfo() *PurchaseInvitation {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdatePurchaseInvitationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PurchaseInvitation `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdatePurchaseInvitationResponse) Reset() {
	*x = UpdatePurchaseInvitationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePurchaseInvitationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePurchaseInvitationResponse) ProtoMessage() {}

func (x *UpdatePurchaseInvitationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePurchaseInvitationResponse.ProtoReflect.Descriptor instead.
func (*UpdatePurchaseInvitationResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{22}
}

func (x *UpdatePurchaseInvitationResponse) GetInfo() *PurchaseInvitation {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetPurchaseInvitationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetPurchaseInvitationRequest) Reset() {
	*x = GetPurchaseInvitationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPurchaseInvitationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPurchaseInvitationRequest) ProtoMessage() {}

func (x *GetPurchaseInvitationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPurchaseInvitationRequest.ProtoReflect.Descriptor instead.
func (*GetPurchaseInvitationRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{23}
}

func (x *GetPurchaseInvitationRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetPurchaseInvitationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PurchaseInvitation `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetPurchaseInvitationResponse) Reset() {
	*x = GetPurchaseInvitationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPurchaseInvitationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPurchaseInvitationResponse) ProtoMessage() {}

func (x *GetPurchaseInvitationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPurchaseInvitationResponse.ProtoReflect.Descriptor instead.
func (*GetPurchaseInvitationResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{24}
}

func (x *GetPurchaseInvitationResponse) GetInfo() *PurchaseInvitation {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetPurchaseInvitationsByAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID string `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
}

func (x *GetPurchaseInvitationsByAppRequest) Reset() {
	*x = GetPurchaseInvitationsByAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPurchaseInvitationsByAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPurchaseInvitationsByAppRequest) ProtoMessage() {}

func (x *GetPurchaseInvitationsByAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPurchaseInvitationsByAppRequest.ProtoReflect.Descriptor instead.
func (*GetPurchaseInvitationsByAppRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{25}
}

func (x *GetPurchaseInvitationsByAppRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

type GetPurchaseInvitationsByAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*PurchaseInvitation `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *GetPurchaseInvitationsByAppResponse) Reset() {
	*x = GetPurchaseInvitationsByAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPurchaseInvitationsByAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPurchaseInvitationsByAppResponse) ProtoMessage() {}

func (x *GetPurchaseInvitationsByAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPurchaseInvitationsByAppResponse.ProtoReflect.Descriptor instead.
func (*GetPurchaseInvitationsByAppResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{26}
}

func (x *GetPurchaseInvitationsByAppResponse) GetInfos() []*PurchaseInvitation {
	if x != nil {
		return x.Infos
	}
	return nil
}

type GetPurchaseInvitationByAppOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID   string `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
	OrderID string `protobuf:"bytes,20,opt,name=OrderID,proto3" json:"OrderID,omitempty"`
}

func (x *GetPurchaseInvitationByAppOrderRequest) Reset() {
	*x = GetPurchaseInvitationByAppOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPurchaseInvitationByAppOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPurchaseInvitationByAppOrderRequest) ProtoMessage() {}

func (x *GetPurchaseInvitationByAppOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPurchaseInvitationByAppOrderRequest.ProtoReflect.Descriptor instead.
func (*GetPurchaseInvitationByAppOrderRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{27}
}

func (x *GetPurchaseInvitationByAppOrderRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetPurchaseInvitationByAppOrderRequest) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

type GetPurchaseInvitationByAppOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PurchaseInvitation `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetPurchaseInvitationByAppOrderResponse) Reset() {
	*x = GetPurchaseInvitationByAppOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPurchaseInvitationByAppOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPurchaseInvitationByAppOrderResponse) ProtoMessage() {}

func (x *GetPurchaseInvitationByAppOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPurchaseInvitationByAppOrderResponse.ProtoReflect.Descriptor instead.
func (*GetPurchaseInvitationByAppOrderResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{28}
}

func (x *GetPurchaseInvitationByAppOrderResponse) GetInfo() *PurchaseInvitation {
	if x != nil {
		return x.Info
	}
	return nil
}

type RegistrationInvitation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	AppID     string `protobuf:"bytes,20,opt,name=AppID,proto3" json:"AppID,omitempty"`
	InviterID string `protobuf:"bytes,30,opt,name=InviterID,proto3" json:"InviterID,omitempty"`
	InviteeID string `protobuf:"bytes,40,opt,name=InviteeID,proto3" json:"InviteeID,omitempty"`
	CreateAt  uint32 `protobuf:"varint,50,opt,name=CreateAt,proto3" json:"CreateAt,omitempty"`
}

func (x *RegistrationInvitation) Reset() {
	*x = RegistrationInvitation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistrationInvitation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistrationInvitation) ProtoMessage() {}

func (x *RegistrationInvitation) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistrationInvitation.ProtoReflect.Descriptor instead.
func (*RegistrationInvitation) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{29}
}

func (x *RegistrationInvitation) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *RegistrationInvitation) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *RegistrationInvitation) GetInviterID() string {
	if x != nil {
		return x.InviterID
	}
	return ""
}

func (x *RegistrationInvitation) GetInviteeID() string {
	if x != nil {
		return x.InviteeID
	}
	return ""
}

func (x *RegistrationInvitation) GetCreateAt() uint32 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

type CreateRegistrationInvitationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *RegistrationInvitation `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateRegistrationInvitationRequest) Reset() {
	*x = CreateRegistrationInvitationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRegistrationInvitationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRegistrationInvitationRequest) ProtoMessage() {}

func (x *CreateRegistrationInvitationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRegistrationInvitationRequest.ProtoReflect.Descriptor instead.
func (*CreateRegistrationInvitationRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{30}
}

func (x *CreateRegistrationInvitationRequest) GetInfo() *RegistrationInvitation {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateRegistrationInvitationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *RegistrationInvitation `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateRegistrationInvitationResponse) Reset() {
	*x = CreateRegistrationInvitationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRegistrationInvitationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRegistrationInvitationResponse) ProtoMessage() {}

func (x *CreateRegistrationInvitationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRegistrationInvitationResponse.ProtoReflect.Descriptor instead.
func (*CreateRegistrationInvitationResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{31}
}

func (x *CreateRegistrationInvitationResponse) GetInfo() *RegistrationInvitation {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateRegistrationInvitationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *RegistrationInvitation `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateRegistrationInvitationRequest) Reset() {
	*x = UpdateRegistrationInvitationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRegistrationInvitationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRegistrationInvitationRequest) ProtoMessage() {}

func (x *UpdateRegistrationInvitationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRegistrationInvitationRequest.ProtoReflect.Descriptor instead.
func (*UpdateRegistrationInvitationRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{32}
}

func (x *UpdateRegistrationInvitationRequest) GetInfo() *RegistrationInvitation {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateRegistrationInvitationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *RegistrationInvitation `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateRegistrationInvitationResponse) Reset() {
	*x = UpdateRegistrationInvitationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRegistrationInvitationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRegistrationInvitationResponse) ProtoMessage() {}

func (x *UpdateRegistrationInvitationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRegistrationInvitationResponse.ProtoReflect.Descriptor instead.
func (*UpdateRegistrationInvitationResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{33}
}

func (x *UpdateRegistrationInvitationResponse) GetInfo() *RegistrationInvitation {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetRegistrationInvitationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetRegistrationInvitationRequest) Reset() {
	*x = GetRegistrationInvitationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegistrationInvitationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegistrationInvitationRequest) ProtoMessage() {}

func (x *GetRegistrationInvitationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegistrationInvitationRequest.ProtoReflect.Descriptor instead.
func (*GetRegistrationInvitationRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{34}
}

func (x *GetRegistrationInvitationRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetRegistrationInvitationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *RegistrationInvitation `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetRegistrationInvitationResponse) Reset() {
	*x = GetRegistrationInvitationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegistrationInvitationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegistrationInvitationResponse) ProtoMessage() {}

func (x *GetRegistrationInvitationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegistrationInvitationResponse.ProtoReflect.Descriptor instead.
func (*GetRegistrationInvitationResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{35}
}

func (x *GetRegistrationInvitationResponse) GetInfo() *RegistrationInvitation {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetRegistrationInvitationsByAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID string `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
}

func (x *GetRegistrationInvitationsByAppRequest) Reset() {
	*x = GetRegistrationInvitationsByAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegistrationInvitationsByAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegistrationInvitationsByAppRequest) ProtoMessage() {}

func (x *GetRegistrationInvitationsByAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegistrationInvitationsByAppRequest.ProtoReflect.Descriptor instead.
func (*GetRegistrationInvitationsByAppRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{36}
}

func (x *GetRegistrationInvitationsByAppRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

type GetRegistrationInvitationsByAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*RegistrationInvitation `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *GetRegistrationInvitationsByAppResponse) Reset() {
	*x = GetRegistrationInvitationsByAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegistrationInvitationsByAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegistrationInvitationsByAppResponse) ProtoMessage() {}

func (x *GetRegistrationInvitationsByAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegistrationInvitationsByAppResponse.ProtoReflect.Descriptor instead.
func (*GetRegistrationInvitationsByAppResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{37}
}

func (x *GetRegistrationInvitationsByAppResponse) GetInfos() []*RegistrationInvitation {
	if x != nil {
		return x.Infos
	}
	return nil
}

type GetRegistrationInvitationsByAppInviterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID     string `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
	InviterID string `protobuf:"bytes,20,opt,name=InviterID,proto3" json:"InviterID,omitempty"`
}

func (x *GetRegistrationInvitationsByAppInviterRequest) Reset() {
	*x = GetRegistrationInvitationsByAppInviterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegistrationInvitationsByAppInviterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegistrationInvitationsByAppInviterRequest) ProtoMessage() {}

func (x *GetRegistrationInvitationsByAppInviterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegistrationInvitationsByAppInviterRequest.ProtoReflect.Descriptor instead.
func (*GetRegistrationInvitationsByAppInviterRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{38}
}

func (x *GetRegistrationInvitationsByAppInviterRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetRegistrationInvitationsByAppInviterRequest) GetInviterID() string {
	if x != nil {
		return x.InviterID
	}
	return ""
}

type GetRegistrationInvitationsByAppInviterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*RegistrationInvitation `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *GetRegistrationInvitationsByAppInviterResponse) Reset() {
	*x = GetRegistrationInvitationsByAppInviterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegistrationInvitationsByAppInviterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegistrationInvitationsByAppInviterResponse) ProtoMessage() {}

func (x *GetRegistrationInvitationsByAppInviterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegistrationInvitationsByAppInviterResponse.ProtoReflect.Descriptor instead.
func (*GetRegistrationInvitationsByAppInviterResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{39}
}

func (x *GetRegistrationInvitationsByAppInviterResponse) GetInfos() []*RegistrationInvitation {
	if x != nil {
		return x.Infos
	}
	return nil
}

type GetRegistrationInvitationByAppInviteeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID     string `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
	InviteeID string `protobuf:"bytes,20,opt,name=InviteeID,proto3" json:"InviteeID,omitempty"`
}

func (x *GetRegistrationInvitationByAppInviteeRequest) Reset() {
	*x = GetRegistrationInvitationByAppInviteeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegistrationInvitationByAppInviteeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegistrationInvitationByAppInviteeRequest) ProtoMessage() {}

func (x *GetRegistrationInvitationByAppInviteeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegistrationInvitationByAppInviteeRequest.ProtoReflect.Descriptor instead.
func (*GetRegistrationInvitationByAppInviteeRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{40}
}

func (x *GetRegistrationInvitationByAppInviteeRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetRegistrationInvitationByAppInviteeRequest) GetInviteeID() string {
	if x != nil {
		return x.InviteeID
	}
	return ""
}

type GetRegistrationInvitationByAppInviteeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *RegistrationInvitation `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetRegistrationInvitationByAppInviteeResponse) Reset() {
	*x = GetRegistrationInvitationByAppInviteeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegistrationInvitationByAppInviteeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegistrationInvitationByAppInviteeResponse) ProtoMessage() {}

func (x *GetRegistrationInvitationByAppInviteeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegistrationInvitationByAppInviteeResponse.ProtoReflect.Descriptor instead.
func (*GetRegistrationInvitationByAppInviteeResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{41}
}

func (x *GetRegistrationInvitationByAppInviteeResponse) GetInfo() *RegistrationInvitation {
	if x != nil {
		return x.Info
	}
	return nil
}

type UserInvitationCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	UserID         string `protobuf:"bytes,20,opt,name=UserID,proto3" json:"UserID,omitempty"`
	AppID          string `protobuf:"bytes,30,opt,name=AppID,proto3" json:"AppID,omitempty"`
	InvitationCode string `protobuf:"bytes,40,opt,name=InvitationCode,proto3" json:"InvitationCode,omitempty"`
}

func (x *UserInvitationCode) Reset() {
	*x = UserInvitationCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInvitationCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInvitationCode) ProtoMessage() {}

func (x *UserInvitationCode) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInvitationCode.ProtoReflect.Descriptor instead.
func (*UserInvitationCode) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{42}
}

func (x *UserInvitationCode) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *UserInvitationCode) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UserInvitationCode) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *UserInvitationCode) GetInvitationCode() string {
	if x != nil {
		return x.InvitationCode
	}
	return ""
}

type CreateUserInvitationCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *UserInvitationCode `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateUserInvitationCodeRequest) Reset() {
	*x = CreateUserInvitationCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserInvitationCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserInvitationCodeRequest) ProtoMessage() {}

func (x *CreateUserInvitationCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserInvitationCodeRequest.ProtoReflect.Descriptor instead.
func (*CreateUserInvitationCodeRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{43}
}

func (x *CreateUserInvitationCodeRequest) GetInfo() *UserInvitationCode {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateUserInvitationCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *UserInvitationCode `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateUserInvitationCodeResponse) Reset() {
	*x = CreateUserInvitationCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserInvitationCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserInvitationCodeResponse) ProtoMessage() {}

func (x *CreateUserInvitationCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserInvitationCodeResponse.ProtoReflect.Descriptor instead.
func (*CreateUserInvitationCodeResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{44}
}

func (x *CreateUserInvitationCodeResponse) GetInfo() *UserInvitationCode {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateUserInvitationCodeForOtherAppUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetAppID  string              `protobuf:"bytes,10,opt,name=TargetAppID,proto3" json:"TargetAppID,omitempty"`
	TargetUserID string              `protobuf:"bytes,20,opt,name=TargetUserID,proto3" json:"TargetUserID,omitempty"`
	Info         *UserInvitationCode `protobuf:"bytes,30,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateUserInvitationCodeForOtherAppUserRequest) Reset() {
	*x = CreateUserInvitationCodeForOtherAppUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserInvitationCodeForOtherAppUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserInvitationCodeForOtherAppUserRequest) ProtoMessage() {}

func (x *CreateUserInvitationCodeForOtherAppUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserInvitationCodeForOtherAppUserRequest.ProtoReflect.Descriptor instead.
func (*CreateUserInvitationCodeForOtherAppUserRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{45}
}

func (x *CreateUserInvitationCodeForOtherAppUserRequest) GetTargetAppID() string {
	if x != nil {
		return x.TargetAppID
	}
	return ""
}

func (x *CreateUserInvitationCodeForOtherAppUserRequest) GetTargetUserID() string {
	if x != nil {
		return x.TargetUserID
	}
	return ""
}

func (x *CreateUserInvitationCodeForOtherAppUserRequest) GetInfo() *UserInvitationCode {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateUserInvitationCodeForOtherAppUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *UserInvitationCode `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateUserInvitationCodeForOtherAppUserResponse) Reset() {
	*x = CreateUserInvitationCodeForOtherAppUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserInvitationCodeForOtherAppUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserInvitationCodeForOtherAppUserResponse) ProtoMessage() {}

func (x *CreateUserInvitationCodeForOtherAppUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserInvitationCodeForOtherAppUserResponse.ProtoReflect.Descriptor instead.
func (*CreateUserInvitationCodeForOtherAppUserResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{46}
}

func (x *CreateUserInvitationCodeForOtherAppUserResponse) GetInfo() *UserInvitationCode {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateUserInvitationCodeForAppOtherUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetUserID string              `protobuf:"bytes,10,opt,name=TargetUserID,proto3" json:"TargetUserID,omitempty"`
	Info         *UserInvitationCode `protobuf:"bytes,20,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateUserInvitationCodeForAppOtherUserRequest) Reset() {
	*x = CreateUserInvitationCodeForAppOtherUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserInvitationCodeForAppOtherUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserInvitationCodeForAppOtherUserRequest) ProtoMessage() {}

func (x *CreateUserInvitationCodeForAppOtherUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserInvitationCodeForAppOtherUserRequest.ProtoReflect.Descriptor instead.
func (*CreateUserInvitationCodeForAppOtherUserRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{47}
}

func (x *CreateUserInvitationCodeForAppOtherUserRequest) GetTargetUserID() string {
	if x != nil {
		return x.TargetUserID
	}
	return ""
}

func (x *CreateUserInvitationCodeForAppOtherUserRequest) GetInfo() *UserInvitationCode {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateUserInvitationCodeForAppOtherUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *UserInvitationCode `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateUserInvitationCodeForAppOtherUserResponse) Reset() {
	*x = CreateUserInvitationCodeForAppOtherUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserInvitationCodeForAppOtherUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserInvitationCodeForAppOtherUserResponse) ProtoMessage() {}

func (x *CreateUserInvitationCodeForAppOtherUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserInvitationCodeForAppOtherUserResponse.ProtoReflect.Descriptor instead.
func (*CreateUserInvitationCodeForAppOtherUserResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{48}
}

func (x *CreateUserInvitationCodeForAppOtherUserResponse) GetInfo() *UserInvitationCode {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetUserInvitationCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetUserInvitationCodeRequest) Reset() {
	*x = GetUserInvitationCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInvitationCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInvitationCodeRequest) ProtoMessage() {}

func (x *GetUserInvitationCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInvitationCodeRequest.ProtoReflect.Descriptor instead.
func (*GetUserInvitationCodeRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{49}
}

func (x *GetUserInvitationCodeRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetUserInvitationCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *UserInvitationCode `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetUserInvitationCodeResponse) Reset() {
	*x = GetUserInvitationCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInvitationCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInvitationCodeResponse) ProtoMessage() {}

func (x *GetUserInvitationCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInvitationCodeResponse.ProtoReflect.Descriptor instead.
func (*GetUserInvitationCodeResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{50}
}

func (x *GetUserInvitationCodeResponse) GetInfo() *UserInvitationCode {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetUserInvitationCodeByAppUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID  string `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
	UserID string `protobuf:"bytes,20,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *GetUserInvitationCodeByAppUserRequest) Reset() {
	*x = GetUserInvitationCodeByAppUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInvitationCodeByAppUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInvitationCodeByAppUserRequest) ProtoMessage() {}

func (x *GetUserInvitationCodeByAppUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInvitationCodeByAppUserRequest.ProtoReflect.Descriptor instead.
func (*GetUserInvitationCodeByAppUserRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{51}
}

func (x *GetUserInvitationCodeByAppUserRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetUserInvitationCodeByAppUserRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type GetUserInvitationCodeByAppUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *UserInvitationCode `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetUserInvitationCodeByAppUserResponse) Reset() {
	*x = GetUserInvitationCodeByAppUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInvitationCodeByAppUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInvitationCodeByAppUserResponse) ProtoMessage() {}

func (x *GetUserInvitationCodeByAppUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInvitationCodeByAppUserResponse.ProtoReflect.Descriptor instead.
func (*GetUserInvitationCodeByAppUserResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{52}
}

func (x *GetUserInvitationCodeByAppUserResponse) GetInfo() *UserInvitationCode {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetUserInvitationCodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetUserInvitationCodesRequest) Reset() {
	*x = GetUserInvitationCodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInvitationCodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInvitationCodesRequest) ProtoMessage() {}

func (x *GetUserInvitationCodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInvitationCodesRequest.ProtoReflect.Descriptor instead.
func (*GetUserInvitationCodesRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{53}
}

type GetUserInvitationCodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*UserInvitationCode `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *GetUserInvitationCodesResponse) Reset() {
	*x = GetUserInvitationCodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInvitationCodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInvitationCodesResponse) ProtoMessage() {}

func (x *GetUserInvitationCodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInvitationCodesResponse.ProtoReflect.Descriptor instead.
func (*GetUserInvitationCodesResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{54}
}

func (x *GetUserInvitationCodesResponse) GetInfos() []*UserInvitationCode {
	if x != nil {
		return x.Infos
	}
	return nil
}

type GetUserInvitationCodesByAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID string `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
}

func (x *GetUserInvitationCodesByAppRequest) Reset() {
	*x = GetUserInvitationCodesByAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInvitationCodesByAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInvitationCodesByAppRequest) ProtoMessage() {}

func (x *GetUserInvitationCodesByAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInvitationCodesByAppRequest.ProtoReflect.Descriptor instead.
func (*GetUserInvitationCodesByAppRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{55}
}

func (x *GetUserInvitationCodesByAppRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

type GetUserInvitationCodesByAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*UserInvitationCode `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *GetUserInvitationCodesByAppResponse) Reset() {
	*x = GetUserInvitationCodesByAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInvitationCodesByAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInvitationCodesByAppResponse) ProtoMessage() {}

func (x *GetUserInvitationCodesByAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInvitationCodesByAppResponse.ProtoReflect.Descriptor instead.
func (*GetUserInvitationCodesByAppResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{56}
}

func (x *GetUserInvitationCodesByAppResponse) GetInfos() []*UserInvitationCode {
	if x != nil {
		return x.Infos
	}
	return nil
}

type GetUserInvitationCodesByOtherAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetAppID string `protobuf:"bytes,10,opt,name=TargetAppID,proto3" json:"TargetAppID,omitempty"`
}

func (x *GetUserInvitationCodesByOtherAppRequest) Reset() {
	*x = GetUserInvitationCodesByOtherAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInvitationCodesByOtherAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInvitationCodesByOtherAppRequest) ProtoMessage() {}

func (x *GetUserInvitationCodesByOtherAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInvitationCodesByOtherAppRequest.ProtoReflect.Descriptor instead.
func (*GetUserInvitationCodesByOtherAppRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{57}
}

func (x *GetUserInvitationCodesByOtherAppRequest) GetTargetAppID() string {
	if x != nil {
		return x.TargetAppID
	}
	return ""
}

type GetUserInvitationCodesByOtherAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*UserInvitationCode `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *GetUserInvitationCodesByOtherAppResponse) Reset() {
	*x = GetUserInvitationCodesByOtherAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInvitationCodesByOtherAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInvitationCodesByOtherAppResponse) ProtoMessage() {}

func (x *GetUserInvitationCodesByOtherAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInvitationCodesByOtherAppResponse.ProtoReflect.Descriptor instead.
func (*GetUserInvitationCodesByOtherAppResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{58}
}

func (x *GetUserInvitationCodesByOtherAppResponse) GetInfos() []*UserInvitationCode {
	if x != nil {
		return x.Infos
	}
	return nil
}

type GetUserInvitationCodeByCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,10,opt,name=Code,proto3" json:"Code,omitempty"`
}

func (x *GetUserInvitationCodeByCodeRequest) Reset() {
	*x = GetUserInvitationCodeByCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInvitationCodeByCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInvitationCodeByCodeRequest) ProtoMessage() {}

func (x *GetUserInvitationCodeByCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInvitationCodeByCodeRequest.ProtoReflect.Descriptor instead.
func (*GetUserInvitationCodeByCodeRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{59}
}

func (x *GetUserInvitationCodeByCodeRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type GetUserInvitationCodeByCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *UserInvitationCode `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetUserInvitationCodeByCodeResponse) Reset() {
	*x = GetUserInvitationCodeByCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInvitationCodeByCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInvitationCodeByCodeResponse) ProtoMessage() {}

func (x *GetUserInvitationCodeByCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInvitationCodeByCodeResponse.ProtoReflect.Descriptor instead.
func (*GetUserInvitationCodeByCodeResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{60}
}

func (x *GetUserInvitationCodeByCodeResponse) GetInfo() *UserInvitationCode {
	if x != nil {
		return x.Info
	}
	return nil
}

type CouponAllocated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	UserID   string `protobuf:"bytes,20,opt,name=UserID,proto3" json:"UserID,omitempty"`
	AppID    string `protobuf:"bytes,30,opt,name=AppID,proto3" json:"AppID,omitempty"`
	Type     string `protobuf:"bytes,40,opt,name=Type,proto3" json:"Type,omitempty"`
	CouponID string `protobuf:"bytes,50,opt,name=CouponID,proto3" json:"CouponID,omitempty"`
}

func (x *CouponAllocated) Reset() {
	*x = CouponAllocated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CouponAllocated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CouponAllocated) ProtoMessage() {}

func (x *CouponAllocated) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CouponAllocated.ProtoReflect.Descriptor instead.
func (*CouponAllocated) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{61}
}

func (x *CouponAllocated) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *CouponAllocated) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CouponAllocated) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *CouponAllocated) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CouponAllocated) GetCouponID() string {
	if x != nil {
		return x.CouponID
	}
	return ""
}

type CreateCouponAllocatedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CouponAllocated `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateCouponAllocatedRequest) Reset() {
	*x = CreateCouponAllocatedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCouponAllocatedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCouponAllocatedRequest) ProtoMessage() {}

func (x *CreateCouponAllocatedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCouponAllocatedRequest.ProtoReflect.Descriptor instead.
func (*CreateCouponAllocatedRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{62}
}

func (x *CreateCouponAllocatedRequest) GetInfo() *CouponAllocated {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateCouponAllocatedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CouponAllocated `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateCouponAllocatedResponse) Reset() {
	*x = CreateCouponAllocatedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCouponAllocatedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCouponAllocatedResponse) ProtoMessage() {}

func (x *CreateCouponAllocatedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCouponAllocatedResponse.ProtoReflect.Descriptor instead.
func (*CreateCouponAllocatedResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{63}
}

func (x *CreateCouponAllocatedResponse) GetInfo() *CouponAllocated {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetCouponAllocatedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetCouponAllocatedRequest) Reset() {
	*x = GetCouponAllocatedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCouponAllocatedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCouponAllocatedRequest) ProtoMessage() {}

func (x *GetCouponAllocatedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCouponAllocatedRequest.ProtoReflect.Descriptor instead.
func (*GetCouponAllocatedRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{64}
}

func (x *GetCouponAllocatedRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetCouponAllocatedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CouponAllocated `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetCouponAllocatedResponse) Reset() {
	*x = GetCouponAllocatedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCouponAllocatedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCouponAllocatedResponse) ProtoMessage() {}

func (x *GetCouponAllocatedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCouponAllocatedResponse.ProtoReflect.Descriptor instead.
func (*GetCouponAllocatedResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{65}
}

func (x *GetCouponAllocatedResponse) GetInfo() *CouponAllocated {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetCouponsAllocatedByAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID string `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
}

func (x *GetCouponsAllocatedByAppRequest) Reset() {
	*x = GetCouponsAllocatedByAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCouponsAllocatedByAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCouponsAllocatedByAppRequest) ProtoMessage() {}

func (x *GetCouponsAllocatedByAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCouponsAllocatedByAppRequest.ProtoReflect.Descriptor instead.
func (*GetCouponsAllocatedByAppRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{66}
}

func (x *GetCouponsAllocatedByAppRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

type GetCouponsAllocatedByAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*CouponAllocated `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *GetCouponsAllocatedByAppResponse) Reset() {
	*x = GetCouponsAllocatedByAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCouponsAllocatedByAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCouponsAllocatedByAppResponse) ProtoMessage() {}

func (x *GetCouponsAllocatedByAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCouponsAllocatedByAppResponse.ProtoReflect.Descriptor instead.
func (*GetCouponsAllocatedByAppResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{67}
}

func (x *GetCouponsAllocatedByAppResponse) GetInfos() []*CouponAllocated {
	if x != nil {
		return x.Infos
	}
	return nil
}

type GetCouponsAllocatedByAppUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID  string `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
	UserID string `protobuf:"bytes,20,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *GetCouponsAllocatedByAppUserRequest) Reset() {
	*x = GetCouponsAllocatedByAppUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCouponsAllocatedByAppUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCouponsAllocatedByAppUserRequest) ProtoMessage() {}

func (x *GetCouponsAllocatedByAppUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCouponsAllocatedByAppUserRequest.ProtoReflect.Descriptor instead.
func (*GetCouponsAllocatedByAppUserRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{68}
}

func (x *GetCouponsAllocatedByAppUserRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetCouponsAllocatedByAppUserRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type GetCouponsAllocatedByAppUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*CouponAllocated `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *GetCouponsAllocatedByAppUserResponse) Reset() {
	*x = GetCouponsAllocatedByAppUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCouponsAllocatedByAppUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCouponsAllocatedByAppUserResponse) ProtoMessage() {}

func (x *GetCouponsAllocatedByAppUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCouponsAllocatedByAppUserResponse.ProtoReflect.Descriptor instead.
func (*GetCouponsAllocatedByAppUserResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{69}
}

func (x *GetCouponsAllocatedByAppUserResponse) GetInfos() []*CouponAllocated {
	if x != nil {
		return x.Infos
	}
	return nil
}

type UpdateCouponAllocatedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CouponAllocated `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateCouponAllocatedRequest) Reset() {
	*x = UpdateCouponAllocatedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCouponAllocatedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCouponAllocatedRequest) ProtoMessage() {}

func (x *UpdateCouponAllocatedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCouponAllocatedRequest.ProtoReflect.Descriptor instead.
func (*UpdateCouponAllocatedRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{70}
}

func (x *UpdateCouponAllocatedRequest) GetInfo() *CouponAllocated {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateCouponAllocatedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CouponAllocated `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateCouponAllocatedResponse) Reset() {
	*x = UpdateCouponAllocatedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCouponAllocatedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCouponAllocatedResponse) ProtoMessage() {}

func (x *UpdateCouponAllocatedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCouponAllocatedResponse.ProtoReflect.Descriptor instead.
func (*UpdateCouponAllocatedResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{71}
}

func (x *UpdateCouponAllocatedResponse) GetInfo() *CouponAllocated {
	if x != nil {
		return x.Info
	}
	return nil
}

type CouponPool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              string  `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	AppID           string  `protobuf:"bytes,20,opt,name=AppID,proto3" json:"AppID,omitempty"`
	ReleaseByUserID string  `protobuf:"bytes,30,opt,name=ReleaseByUserID,proto3" json:"ReleaseByUserID,omitempty"`
	Denomination    float64 `protobuf:"fixed64,40,opt,name=Denomination,proto3" json:"Denomination,omitempty"`
	Circulation     int32   `protobuf:"varint,50,opt,name=Circulation,proto3" json:"Circulation,omitempty"`
	Start           uint32  `protobuf:"varint,60,opt,name=Start,proto3" json:"Start,omitempty"`
	DurationDays    int32   `protobuf:"varint,70,opt,name=DurationDays,proto3" json:"DurationDays,omitempty"`
	Message         string  `protobuf:"bytes,80,opt,name=Message,proto3" json:"Message,omitempty"`
	Name            string  `protobuf:"bytes,90,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *CouponPool) Reset() {
	*x = CouponPool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CouponPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CouponPool) ProtoMessage() {}

func (x *CouponPool) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CouponPool.ProtoReflect.Descriptor instead.
func (*CouponPool) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{72}
}

func (x *CouponPool) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *CouponPool) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *CouponPool) GetReleaseByUserID() string {
	if x != nil {
		return x.ReleaseByUserID
	}
	return ""
}

func (x *CouponPool) GetDenomination() float64 {
	if x != nil {
		return x.Denomination
	}
	return 0
}

func (x *CouponPool) GetCirculation() int32 {
	if x != nil {
		return x.Circulation
	}
	return 0
}

func (x *CouponPool) GetStart() uint32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *CouponPool) GetDurationDays() int32 {
	if x != nil {
		return x.DurationDays
	}
	return 0
}

func (x *CouponPool) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CouponPool) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateCouponPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CouponPool `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateCouponPoolRequest) Reset() {
	*x = CreateCouponPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCouponPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCouponPoolRequest) ProtoMessage() {}

func (x *CreateCouponPoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCouponPoolRequest.ProtoReflect.Descriptor instead.
func (*CreateCouponPoolRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{73}
}

func (x *CreateCouponPoolRequest) GetInfo() *CouponPool {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateCouponPoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CouponPool `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateCouponPoolResponse) Reset() {
	*x = CreateCouponPoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCouponPoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCouponPoolResponse) ProtoMessage() {}

func (x *CreateCouponPoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCouponPoolResponse.ProtoReflect.Descriptor instead.
func (*CreateCouponPoolResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{74}
}

func (x *CreateCouponPoolResponse) GetInfo() *CouponPool {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateCouponPoolForOtherAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetAppID string      `protobuf:"bytes,10,opt,name=TargetAppID,proto3" json:"TargetAppID,omitempty"`
	Info        *CouponPool `protobuf:"bytes,20,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateCouponPoolForOtherAppRequest) Reset() {
	*x = CreateCouponPoolForOtherAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCouponPoolForOtherAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCouponPoolForOtherAppRequest) ProtoMessage() {}

func (x *CreateCouponPoolForOtherAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCouponPoolForOtherAppRequest.ProtoReflect.Descriptor instead.
func (*CreateCouponPoolForOtherAppRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{75}
}

func (x *CreateCouponPoolForOtherAppRequest) GetTargetAppID() string {
	if x != nil {
		return x.TargetAppID
	}
	return ""
}

func (x *CreateCouponPoolForOtherAppRequest) GetInfo() *CouponPool {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateCouponPoolForOtherAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CouponPool `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateCouponPoolForOtherAppResponse) Reset() {
	*x = CreateCouponPoolForOtherAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCouponPoolForOtherAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCouponPoolForOtherAppResponse) ProtoMessage() {}

func (x *CreateCouponPoolForOtherAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCouponPoolForOtherAppResponse.ProtoReflect.Descriptor instead.
func (*CreateCouponPoolForOtherAppResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{76}
}

func (x *CreateCouponPoolForOtherAppResponse) GetInfo() *CouponPool {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateCouponPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CouponPool `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateCouponPoolRequest) Reset() {
	*x = UpdateCouponPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCouponPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCouponPoolRequest) ProtoMessage() {}

func (x *UpdateCouponPoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCouponPoolRequest.ProtoReflect.Descriptor instead.
func (*UpdateCouponPoolRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{77}
}

func (x *UpdateCouponPoolRequest) GetInfo() *CouponPool {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateCouponPoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CouponPool `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateCouponPoolResponse) Reset() {
	*x = UpdateCouponPoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCouponPoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCouponPoolResponse) ProtoMessage() {}

func (x *UpdateCouponPoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCouponPoolResponse.ProtoReflect.Descriptor instead.
func (*UpdateCouponPoolResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{78}
}

func (x *UpdateCouponPoolResponse) GetInfo() *CouponPool {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetCouponPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetCouponPoolRequest) Reset() {
	*x = GetCouponPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCouponPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCouponPoolRequest) ProtoMessage() {}

func (x *GetCouponPoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCouponPoolRequest.ProtoReflect.Descriptor instead.
func (*GetCouponPoolRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{79}
}

func (x *GetCouponPoolRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetCouponPoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CouponPool `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetCouponPoolResponse) Reset() {
	*x = GetCouponPoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCouponPoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCouponPoolResponse) ProtoMessage() {}

func (x *GetCouponPoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCouponPoolResponse.ProtoReflect.Descriptor instead.
func (*GetCouponPoolResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{80}
}

func (x *GetCouponPoolResponse) GetInfo() *CouponPool {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetCouponPoolsByAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID string `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
}

func (x *GetCouponPoolsByAppRequest) Reset() {
	*x = GetCouponPoolsByAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCouponPoolsByAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCouponPoolsByAppRequest) ProtoMessage() {}

func (x *GetCouponPoolsByAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCouponPoolsByAppRequest.ProtoReflect.Descriptor instead.
func (*GetCouponPoolsByAppRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{81}
}

func (x *GetCouponPoolsByAppRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

type GetCouponPoolsByAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*CouponPool `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *GetCouponPoolsByAppResponse) Reset() {
	*x = GetCouponPoolsByAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCouponPoolsByAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCouponPoolsByAppResponse) ProtoMessage() {}

func (x *GetCouponPoolsByAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCouponPoolsByAppResponse.ProtoReflect.Descriptor instead.
func (*GetCouponPoolsByAppResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{82}
}

func (x *GetCouponPoolsByAppResponse) GetInfos() []*CouponPool {
	if x != nil {
		return x.Infos
	}
	return nil
}

type GetCouponPoolsByOtherAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetAppID string `protobuf:"bytes,10,opt,name=TargetAppID,proto3" json:"TargetAppID,omitempty"`
}

func (x *GetCouponPoolsByOtherAppRequest) Reset() {
	*x = GetCouponPoolsByOtherAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCouponPoolsByOtherAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCouponPoolsByOtherAppRequest) ProtoMessage() {}

func (x *GetCouponPoolsByOtherAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCouponPoolsByOtherAppRequest.ProtoReflect.Descriptor instead.
func (*GetCouponPoolsByOtherAppRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{83}
}

func (x *GetCouponPoolsByOtherAppRequest) GetTargetAppID() string {
	if x != nil {
		return x.TargetAppID
	}
	return ""
}

type GetCouponPoolsByOtherAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*CouponPool `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *GetCouponPoolsByOtherAppResponse) Reset() {
	*x = GetCouponPoolsByOtherAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCouponPoolsByOtherAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCouponPoolsByOtherAppResponse) ProtoMessage() {}

func (x *GetCouponPoolsByOtherAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCouponPoolsByOtherAppResponse.ProtoReflect.Descriptor instead.
func (*GetCouponPoolsByOtherAppResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{84}
}

func (x *GetCouponPoolsByOtherAppResponse) GetInfos() []*CouponPool {
	if x != nil {
		return x.Infos
	}
	return nil
}

type GetCouponPoolsByAppReleaserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID  string `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
	UserID string `protobuf:"bytes,20,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *GetCouponPoolsByAppReleaserRequest) Reset() {
	*x = GetCouponPoolsByAppReleaserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCouponPoolsByAppReleaserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCouponPoolsByAppReleaserRequest) ProtoMessage() {}

func (x *GetCouponPoolsByAppReleaserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCouponPoolsByAppReleaserRequest.ProtoReflect.Descriptor instead.
func (*GetCouponPoolsByAppReleaserRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{85}
}

func (x *GetCouponPoolsByAppReleaserRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetCouponPoolsByAppReleaserRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type GetCouponPoolsByAppReleaserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*CouponPool `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *GetCouponPoolsByAppReleaserResponse) Reset() {
	*x = GetCouponPoolsByAppReleaserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCouponPoolsByAppReleaserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCouponPoolsByAppReleaserResponse) ProtoMessage() {}

func (x *GetCouponPoolsByAppReleaserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCouponPoolsByAppReleaserResponse.ProtoReflect.Descriptor instead.
func (*GetCouponPoolsByAppReleaserResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{86}
}

func (x *GetCouponPoolsByAppReleaserResponse) GetInfos() []*CouponPool {
	if x != nil {
		return x.Infos
	}
	return nil
}

type GetCouponPoolsByOtherAppReleaserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetAppID  string `protobuf:"bytes,10,opt,name=TargetAppID,proto3" json:"TargetAppID,omitempty"`
	TargetUserID string `protobuf:"bytes,20,opt,name=TargetUserID,proto3" json:"TargetUserID,omitempty"`
}

func (x *GetCouponPoolsByOtherAppReleaserRequest) Reset() {
	*x = GetCouponPoolsByOtherAppReleaserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCouponPoolsByOtherAppReleaserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCouponPoolsByOtherAppReleaserRequest) ProtoMessage() {}

func (x *GetCouponPoolsByOtherAppReleaserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCouponPoolsByOtherAppReleaserRequest.ProtoReflect.Descriptor instead.
func (*GetCouponPoolsByOtherAppReleaserRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{87}
}

func (x *GetCouponPoolsByOtherAppReleaserRequest) GetTargetAppID() string {
	if x != nil {
		return x.TargetAppID
	}
	return ""
}

func (x *GetCouponPoolsByOtherAppReleaserRequest) GetTargetUserID() string {
	if x != nil {
		return x.TargetUserID
	}
	return ""
}

type GetCouponPoolsByOtherAppReleaserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*CouponPool `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *GetCouponPoolsByOtherAppReleaserResponse) Reset() {
	*x = GetCouponPoolsByOtherAppReleaserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCouponPoolsByOtherAppReleaserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCouponPoolsByOtherAppReleaserResponse) ProtoMessage() {}

func (x *GetCouponPoolsByOtherAppReleaserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCouponPoolsByOtherAppReleaserResponse.ProtoReflect.Descriptor instead.
func (*GetCouponPoolsByOtherAppReleaserResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{88}
}

func (x *GetCouponPoolsByOtherAppReleaserResponse) GetInfos() []*CouponPool {
	if x != nil {
		return x.Infos
	}
	return nil
}

type NewUserRewardSettingDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                         string      `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	AppID                      string      `protobuf:"bytes,20,opt,name=AppID,proto3" json:"AppID,omitempty"`
	AutoGenerateInvitationCode bool        `protobuf:"varint,30,opt,name=AutoGenerateInvitationCode,proto3" json:"AutoGenerateInvitationCode,omitempty"`
	RegistrationCoupon         *CouponPool `protobuf:"bytes,40,opt,name=RegistrationCoupon,proto3" json:"RegistrationCoupon,omitempty"`
	KycCoupon                  *CouponPool `protobuf:"bytes,50,opt,name=KycCoupon,proto3" json:"KycCoupon,omitempty"`
}

func (x *NewUserRewardSettingDetail) Reset() {
	*x = NewUserRewardSettingDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewUserRewardSettingDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewUserRewardSettingDetail) ProtoMessage() {}

func (x *NewUserRewardSettingDetail) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewUserRewardSettingDetail.ProtoReflect.Descriptor instead.
func (*NewUserRewardSettingDetail) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{89}
}

func (x *NewUserRewardSettingDetail) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *NewUserRewardSettingDetail) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *NewUserRewardSettingDetail) GetAutoGenerateInvitationCode() bool {
	if x != nil {
		return x.AutoGenerateInvitationCode
	}
	return false
}

func (x *NewUserRewardSettingDetail) GetRegistrationCoupon() *CouponPool {
	if x != nil {
		return x.RegistrationCoupon
	}
	return nil
}

func (x *NewUserRewardSettingDetail) GetKycCoupon() *CouponPool {
	if x != nil {
		return x.KycCoupon
	}
	return nil
}

type GetNewUserRewardSettingDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetNewUserRewardSettingDetailRequest) Reset() {
	*x = GetNewUserRewardSettingDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewUserRewardSettingDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewUserRewardSettingDetailRequest) ProtoMessage() {}

func (x *GetNewUserRewardSettingDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewUserRewardSettingDetailRequest.ProtoReflect.Descriptor instead.
func (*GetNewUserRewardSettingDetailRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{90}
}

func (x *GetNewUserRewardSettingDetailRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetNewUserRewardSettingDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *NewUserRewardSettingDetail `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetNewUserRewardSettingDetailResponse) Reset() {
	*x = GetNewUserRewardSettingDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewUserRewardSettingDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewUserRewardSettingDetailResponse) ProtoMessage() {}

func (x *GetNewUserRewardSettingDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewUserRewardSettingDetailResponse.ProtoReflect.Descriptor instead.
func (*GetNewUserRewardSettingDetailResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{91}
}

func (x *GetNewUserRewardSettingDetailResponse) GetInfo() *NewUserRewardSettingDetail {
	if x != nil {
		return x.Info
	}
	return nil
}

type AppCouponSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              string  `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	AppID           string  `protobuf:"bytes,20,opt,name=AppID,proto3" json:"AppID,omitempty"`
	DominationLimit float64 `protobuf:"fixed64,30,opt,name=DominationLimit,proto3" json:"DominationLimit,omitempty"`
	TotalLimit      int32   `protobuf:"varint,40,opt,name=TotalLimit,proto3" json:"TotalLimit,omitempty"`
}

func (x *AppCouponSetting) Reset() {
	*x = AppCouponSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppCouponSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppCouponSetting) ProtoMessage() {}

func (x *AppCouponSetting) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppCouponSetting.ProtoReflect.Descriptor instead.
func (*AppCouponSetting) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{92}
}

func (x *AppCouponSetting) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *AppCouponSetting) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *AppCouponSetting) GetDominationLimit() float64 {
	if x != nil {
		return x.DominationLimit
	}
	return 0
}

func (x *AppCouponSetting) GetTotalLimit() int32 {
	if x != nil {
		return x.TotalLimit
	}
	return 0
}

type CreateAppCouponSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppCouponSetting `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateAppCouponSettingRequest) Reset() {
	*x = CreateAppCouponSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAppCouponSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAppCouponSettingRequest) ProtoMessage() {}

func (x *CreateAppCouponSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAppCouponSettingRequest.ProtoReflect.Descriptor instead.
func (*CreateAppCouponSettingRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{93}
}

func (x *CreateAppCouponSettingRequest) GetInfo() *AppCouponSetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateAppCouponSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppCouponSetting `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateAppCouponSettingResponse) Reset() {
	*x = CreateAppCouponSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAppCouponSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAppCouponSettingResponse) ProtoMessage() {}

func (x *CreateAppCouponSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAppCouponSettingResponse.ProtoReflect.Descriptor instead.
func (*CreateAppCouponSettingResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{94}
}

func (x *CreateAppCouponSettingResponse) GetInfo() *AppCouponSetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetAppCouponSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetAppCouponSettingRequest) Reset() {
	*x = GetAppCouponSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppCouponSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppCouponSettingRequest) ProtoMessage() {}

func (x *GetAppCouponSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppCouponSettingRequest.ProtoReflect.Descriptor instead.
func (*GetAppCouponSettingRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{95}
}

func (x *GetAppCouponSettingRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetAppCouponSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppCouponSetting `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetAppCouponSettingResponse) Reset() {
	*x = GetAppCouponSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppCouponSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppCouponSettingResponse) ProtoMessage() {}

func (x *GetAppCouponSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppCouponSettingResponse.ProtoReflect.Descriptor instead.
func (*GetAppCouponSettingResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{96}
}

func (x *GetAppCouponSettingResponse) GetInfo() *AppCouponSetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetAppCouponSettingByAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID string `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
}

func (x *GetAppCouponSettingByAppRequest) Reset() {
	*x = GetAppCouponSettingByAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppCouponSettingByAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppCouponSettingByAppRequest) ProtoMessage() {}

func (x *GetAppCouponSettingByAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppCouponSettingByAppRequest.ProtoReflect.Descriptor instead.
func (*GetAppCouponSettingByAppRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{97}
}

func (x *GetAppCouponSettingByAppRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

type GetAppCouponSettingByAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppCouponSetting `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetAppCouponSettingByAppResponse) Reset() {
	*x = GetAppCouponSettingByAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppCouponSettingByAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppCouponSettingByAppResponse) ProtoMessage() {}

func (x *GetAppCouponSettingByAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppCouponSettingByAppResponse.ProtoReflect.Descriptor instead.
func (*GetAppCouponSettingByAppResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{98}
}

func (x *GetAppCouponSettingByAppResponse) GetInfo() *AppCouponSetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateAppCouponSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppCouponSetting `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateAppCouponSettingRequest) Reset() {
	*x = UpdateAppCouponSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAppCouponSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAppCouponSettingRequest) ProtoMessage() {}

func (x *UpdateAppCouponSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAppCouponSettingRequest.ProtoReflect.Descriptor instead.
func (*UpdateAppCouponSettingRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{99}
}

func (x *UpdateAppCouponSettingRequest) GetInfo() *AppCouponSetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateAppCouponSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppCouponSetting `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateAppCouponSettingResponse) Reset() {
	*x = UpdateAppCouponSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAppCouponSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAppCouponSettingResponse) ProtoMessage() {}

func (x *UpdateAppCouponSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAppCouponSettingResponse.ProtoReflect.Descriptor instead.
func (*UpdateAppCouponSettingResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{100}
}

func (x *UpdateAppCouponSettingResponse) GetInfo() *AppCouponSetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type DefaultKpiSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      string  `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	AppID   string  `protobuf:"bytes,20,opt,name=AppID,proto3" json:"AppID,omitempty"`
	GoodID  string  `protobuf:"bytes,30,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
	Amount  float64 `protobuf:"fixed64,40,opt,name=Amount,proto3" json:"Amount,omitempty"`
	Percent int32   `protobuf:"varint,50,opt,name=Percent,proto3" json:"Percent,omitempty"`
}

func (x *DefaultKpiSetting) Reset() {
	*x = DefaultKpiSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultKpiSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultKpiSetting) ProtoMessage() {}

func (x *DefaultKpiSetting) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultKpiSetting.ProtoReflect.Descriptor instead.
func (*DefaultKpiSetting) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{101}
}

func (x *DefaultKpiSetting) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *DefaultKpiSetting) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *DefaultKpiSetting) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *DefaultKpiSetting) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *DefaultKpiSetting) GetPercent() int32 {
	if x != nil {
		return x.Percent
	}
	return 0
}

type CreateDefaultKpiSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *DefaultKpiSetting `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateDefaultKpiSettingRequest) Reset() {
	*x = CreateDefaultKpiSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDefaultKpiSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDefaultKpiSettingRequest) ProtoMessage() {}

func (x *CreateDefaultKpiSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDefaultKpiSettingRequest.ProtoReflect.Descriptor instead.
func (*CreateDefaultKpiSettingRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{102}
}

func (x *CreateDefaultKpiSettingRequest) GetInfo() *DefaultKpiSetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateDefaultKpiSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *DefaultKpiSetting `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateDefaultKpiSettingResponse) Reset() {
	*x = CreateDefaultKpiSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDefaultKpiSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDefaultKpiSettingResponse) ProtoMessage() {}

func (x *CreateDefaultKpiSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDefaultKpiSettingResponse.ProtoReflect.Descriptor instead.
func (*CreateDefaultKpiSettingResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{103}
}

func (x *CreateDefaultKpiSettingResponse) GetInfo() *DefaultKpiSetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetDefaultKpiSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetDefaultKpiSettingRequest) Reset() {
	*x = GetDefaultKpiSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDefaultKpiSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDefaultKpiSettingRequest) ProtoMessage() {}

func (x *GetDefaultKpiSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDefaultKpiSettingRequest.ProtoReflect.Descriptor instead.
func (*GetDefaultKpiSettingRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{104}
}

func (x *GetDefaultKpiSettingRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetDefaultKpiSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *DefaultKpiSetting `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetDefaultKpiSettingResponse) Reset() {
	*x = GetDefaultKpiSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDefaultKpiSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDefaultKpiSettingResponse) ProtoMessage() {}

func (x *GetDefaultKpiSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDefaultKpiSettingResponse.ProtoReflect.Descriptor instead.
func (*GetDefaultKpiSettingResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{105}
}

func (x *GetDefaultKpiSettingResponse) GetInfo() *DefaultKpiSetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetDefaultKpiSettingByAppGoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID  string `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
	GoodID string `protobuf:"bytes,20,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
}

func (x *GetDefaultKpiSettingByAppGoodRequest) Reset() {
	*x = GetDefaultKpiSettingByAppGoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDefaultKpiSettingByAppGoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDefaultKpiSettingByAppGoodRequest) ProtoMessage() {}

func (x *GetDefaultKpiSettingByAppGoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDefaultKpiSettingByAppGoodRequest.ProtoReflect.Descriptor instead.
func (*GetDefaultKpiSettingByAppGoodRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{106}
}

func (x *GetDefaultKpiSettingByAppGoodRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetDefaultKpiSettingByAppGoodRequest) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

type GetDefaultKpiSettingByAppGoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *DefaultKpiSetting `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetDefaultKpiSettingByAppGoodResponse) Reset() {
	*x = GetDefaultKpiSettingByAppGoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDefaultKpiSettingByAppGoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDefaultKpiSettingByAppGoodResponse) ProtoMessage() {}

func (x *GetDefaultKpiSettingByAppGoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDefaultKpiSettingByAppGoodResponse.ProtoReflect.Descriptor instead.
func (*GetDefaultKpiSettingByAppGoodResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{107}
}

func (x *GetDefaultKpiSettingByAppGoodResponse) GetInfo() *DefaultKpiSetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateDefaultKpiSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *DefaultKpiSetting `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateDefaultKpiSettingRequest) Reset() {
	*x = UpdateDefaultKpiSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDefaultKpiSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDefaultKpiSettingRequest) ProtoMessage() {}

func (x *UpdateDefaultKpiSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDefaultKpiSettingRequest.ProtoReflect.Descriptor instead.
func (*UpdateDefaultKpiSettingRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{108}
}

func (x *UpdateDefaultKpiSettingRequest) GetInfo() *DefaultKpiSetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateDefaultKpiSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *DefaultKpiSetting `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateDefaultKpiSettingResponse) Reset() {
	*x = UpdateDefaultKpiSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDefaultKpiSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDefaultKpiSettingResponse) ProtoMessage() {}

func (x *UpdateDefaultKpiSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDefaultKpiSettingResponse.ProtoReflect.Descriptor instead.
func (*UpdateDefaultKpiSettingResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{109}
}

func (x *UpdateDefaultKpiSettingResponse) GetInfo() *DefaultKpiSetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type UserKpiSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      string  `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	AppID   string  `protobuf:"bytes,20,opt,name=AppID,proto3" json:"AppID,omitempty"`
	UserID  string  `protobuf:"bytes,30,opt,name=UserID,proto3" json:"UserID,omitempty"`
	GoodID  string  `protobuf:"bytes,40,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
	Amount  float64 `protobuf:"fixed64,50,opt,name=Amount,proto3" json:"Amount,omitempty"`
	Percent int32   `protobuf:"varint,60,opt,name=Percent,proto3" json:"Percent,omitempty"`
}

func (x *UserKpiSetting) Reset() {
	*x = UserKpiSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserKpiSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserKpiSetting) ProtoMessage() {}

func (x *UserKpiSetting) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserKpiSetting.ProtoReflect.Descriptor instead.
func (*UserKpiSetting) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{110}
}

func (x *UserKpiSetting) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *UserKpiSetting) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *UserKpiSetting) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UserKpiSetting) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *UserKpiSetting) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *UserKpiSetting) GetPercent() int32 {
	if x != nil {
		return x.Percent
	}
	return 0
}

type CreateUserKpiSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *UserKpiSetting `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateUserKpiSettingRequest) Reset() {
	*x = CreateUserKpiSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserKpiSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserKpiSettingRequest) ProtoMessage() {}

func (x *CreateUserKpiSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserKpiSettingRequest.ProtoReflect.Descriptor instead.
func (*CreateUserKpiSettingRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{111}
}

func (x *CreateUserKpiSettingRequest) GetInfo() *UserKpiSetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateUserKpiSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *UserKpiSetting `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateUserKpiSettingResponse) Reset() {
	*x = CreateUserKpiSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserKpiSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserKpiSettingResponse) ProtoMessage() {}

func (x *CreateUserKpiSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserKpiSettingResponse.ProtoReflect.Descriptor instead.
func (*CreateUserKpiSettingResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{112}
}

func (x *CreateUserKpiSettingResponse) GetInfo() *UserKpiSetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetUserKpiSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetUserKpiSettingRequest) Reset() {
	*x = GetUserKpiSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserKpiSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserKpiSettingRequest) ProtoMessage() {}

func (x *GetUserKpiSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserKpiSettingRequest.ProtoReflect.Descriptor instead.
func (*GetUserKpiSettingRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{113}
}

func (x *GetUserKpiSettingRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetUserKpiSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *UserKpiSetting `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetUserKpiSettingResponse) Reset() {
	*x = GetUserKpiSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserKpiSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserKpiSettingResponse) ProtoMessage() {}

func (x *GetUserKpiSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserKpiSettingResponse.ProtoReflect.Descriptor instead.
func (*GetUserKpiSettingResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{114}
}

func (x *GetUserKpiSettingResponse) GetInfo() *UserKpiSetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetUserKpiSettingByAppGoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID  string `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
	GoodID string `protobuf:"bytes,20,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
}

func (x *GetUserKpiSettingByAppGoodRequest) Reset() {
	*x = GetUserKpiSettingByAppGoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserKpiSettingByAppGoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserKpiSettingByAppGoodRequest) ProtoMessage() {}

func (x *GetUserKpiSettingByAppGoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserKpiSettingByAppGoodRequest.ProtoReflect.Descriptor instead.
func (*GetUserKpiSettingByAppGoodRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{115}
}

func (x *GetUserKpiSettingByAppGoodRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetUserKpiSettingByAppGoodRequest) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

type GetUserKpiSettingByAppGoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *UserKpiSetting `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetUserKpiSettingByAppGoodResponse) Reset() {
	*x = GetUserKpiSettingByAppGoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserKpiSettingByAppGoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserKpiSettingByAppGoodResponse) ProtoMessage() {}

func (x *GetUserKpiSettingByAppGoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserKpiSettingByAppGoodResponse.ProtoReflect.Descriptor instead.
func (*GetUserKpiSettingByAppGoodResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{116}
}

func (x *GetUserKpiSettingByAppGoodResponse) GetInfo() *UserKpiSetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateUserKpiSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *UserKpiSetting `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateUserKpiSettingRequest) Reset() {
	*x = UpdateUserKpiSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserKpiSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserKpiSettingRequest) ProtoMessage() {}

func (x *UpdateUserKpiSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserKpiSettingRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserKpiSettingRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{117}
}

func (x *UpdateUserKpiSettingRequest) GetInfo() *UserKpiSetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateUserKpiSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *UserKpiSetting `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateUserKpiSettingResponse) Reset() {
	*x = UpdateUserKpiSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserKpiSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserKpiSettingResponse) ProtoMessage() {}

func (x *UpdateUserKpiSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserKpiSettingResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserKpiSettingResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{118}
}

func (x *UpdateUserKpiSettingResponse) GetInfo() *UserKpiSetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type AgencySettingDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                          string      `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	AppID                       string      `protobuf:"bytes,20,opt,name=AppID,proto3" json:"AppID,omitempty"`
	GoodID                      string      `protobuf:"bytes,30,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
	RegistrationRewardThreshold int32       `protobuf:"varint,40,opt,name=RegistrationRewardThreshold,proto3" json:"RegistrationRewardThreshold,omitempty"`
	RegistrationCoupon          *CouponPool `protobuf:"bytes,50,opt,name=RegistrationCoupon,proto3" json:"RegistrationCoupon,omitempty"`
	KycRewardThreshold          int32       `protobuf:"varint,60,opt,name=KycRewardThreshold,proto3" json:"KycRewardThreshold,omitempty"`
	KycCoupon                   *CouponPool `protobuf:"bytes,70,opt,name=KycCoupon,proto3" json:"KycCoupon,omitempty"`
	TotalPurchaseRewardPercent  int32       `protobuf:"varint,80,opt,name=TotalPurchaseRewardPercent,proto3" json:"TotalPurchaseRewardPercent,omitempty"`
	PurchaseRewardChainLevels   int32       `protobuf:"varint,90,opt,name=PurchaseRewardChainLevels,proto3" json:"PurchaseRewardChainLevels,omitempty"`
	LevelPurchaseRewardPercent  int32       `protobuf:"varint,100,opt,name=LevelPurchaseRewardPercent,proto3" json:"LevelPurchaseRewardPercent,omitempty"`
}

func (x *AgencySettingDetail) Reset() {
	*x = AgencySettingDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgencySettingDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgencySettingDetail) ProtoMessage() {}

func (x *AgencySettingDetail) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgencySettingDetail.ProtoReflect.Descriptor instead.
func (*AgencySettingDetail) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{119}
}

func (x *AgencySettingDetail) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *AgencySettingDetail) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *AgencySettingDetail) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *AgencySettingDetail) GetRegistrationRewardThreshold() int32 {
	if x != nil {
		return x.RegistrationRewardThreshold
	}
	return 0
}

func (x *AgencySettingDetail) GetRegistrationCoupon() *CouponPool {
	if x != nil {
		return x.RegistrationCoupon
	}
	return nil
}

func (x *AgencySettingDetail) GetKycRewardThreshold() int32 {
	if x != nil {
		return x.KycRewardThreshold
	}
	return 0
}

func (x *AgencySettingDetail) GetKycCoupon() *CouponPool {
	if x != nil {
		return x.KycCoupon
	}
	return nil
}

func (x *AgencySettingDetail) GetTotalPurchaseRewardPercent() int32 {
	if x != nil {
		return x.TotalPurchaseRewardPercent
	}
	return 0
}

func (x *AgencySettingDetail) GetPurchaseRewardChainLevels() int32 {
	if x != nil {
		return x.PurchaseRewardChainLevels
	}
	return 0
}

func (x *AgencySettingDetail) GetLevelPurchaseRewardPercent() int32 {
	if x != nil {
		return x.LevelPurchaseRewardPercent
	}
	return 0
}

type GetAgencySettingDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetAgencySettingDetailRequest) Reset() {
	*x = GetAgencySettingDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAgencySettingDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAgencySettingDetailRequest) ProtoMessage() {}

func (x *GetAgencySettingDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAgencySettingDetailRequest.ProtoReflect.Descriptor instead.
func (*GetAgencySettingDetailRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{120}
}

func (x *GetAgencySettingDetailRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetAgencySettingDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AgencySettingDetail `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetAgencySettingDetailResponse) Reset() {
	*x = GetAgencySettingDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAgencySettingDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAgencySettingDetailResponse) ProtoMessage() {}

func (x *GetAgencySettingDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAgencySettingDetailResponse.ProtoReflect.Descriptor instead.
func (*GetAgencySettingDetailResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{121}
}

func (x *GetAgencySettingDetailResponse) GetInfo() *AgencySettingDetail {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetAgencySettingDetailByAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID string `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
}

func (x *GetAgencySettingDetailByAppRequest) Reset() {
	*x = GetAgencySettingDetailByAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAgencySettingDetailByAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAgencySettingDetailByAppRequest) ProtoMessage() {}

func (x *GetAgencySettingDetailByAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAgencySettingDetailByAppRequest.ProtoReflect.Descriptor instead.
func (*GetAgencySettingDetailByAppRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{122}
}

func (x *GetAgencySettingDetailByAppRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

type GetAgencySettingDetailByAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AgencySettingDetail `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetAgencySettingDetailByAppResponse) Reset() {
	*x = GetAgencySettingDetailByAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAgencySettingDetailByAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAgencySettingDetailByAppResponse) ProtoMessage() {}

func (x *GetAgencySettingDetailByAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAgencySettingDetailByAppResponse.ProtoReflect.Descriptor instead.
func (*GetAgencySettingDetailByAppResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{123}
}

func (x *GetAgencySettingDetailByAppResponse) GetInfo() *AgencySettingDetail {
	if x != nil {
		return x.Info
	}
	return nil
}

type CouponAllocatedDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       string        `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	UserID   string        `protobuf:"bytes,20,opt,name=UserID,proto3" json:"UserID,omitempty"`
	AppID    string        `protobuf:"bytes,30,opt,name=AppID,proto3" json:"AppID,omitempty"`
	Type     string        `protobuf:"bytes,40,opt,name=Type,proto3" json:"Type,omitempty"`
	Coupon   *CouponPool   `protobuf:"bytes,50,opt,name=Coupon,proto3" json:"Coupon,omitempty"`
	Discount *DiscountPool `protobuf:"bytes,60,opt,name=Discount,proto3" json:"Discount,omitempty"`
}

func (x *CouponAllocatedDetail) Reset() {
	*x = CouponAllocatedDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CouponAllocatedDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CouponAllocatedDetail) ProtoMessage() {}

func (x *CouponAllocatedDetail) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CouponAllocatedDetail.ProtoReflect.Descriptor instead.
func (*CouponAllocatedDetail) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{124}
}

func (x *CouponAllocatedDetail) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *CouponAllocatedDetail) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CouponAllocatedDetail) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *CouponAllocatedDetail) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CouponAllocatedDetail) GetCoupon() *CouponPool {
	if x != nil {
		return x.Coupon
	}
	return nil
}

func (x *CouponAllocatedDetail) GetDiscount() *DiscountPool {
	if x != nil {
		return x.Discount
	}
	return nil
}

type GetCouponAllocatedDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetCouponAllocatedDetailRequest) Reset() {
	*x = GetCouponAllocatedDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCouponAllocatedDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCouponAllocatedDetailRequest) ProtoMessage() {}

func (x *GetCouponAllocatedDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCouponAllocatedDetailRequest.ProtoReflect.Descriptor instead.
func (*GetCouponAllocatedDetailRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{125}
}

func (x *GetCouponAllocatedDetailRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetCouponAllocatedDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CouponAllocatedDetail `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetCouponAllocatedDetailResponse) Reset() {
	*x = GetCouponAllocatedDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCouponAllocatedDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCouponAllocatedDetailResponse) ProtoMessage() {}

func (x *GetCouponAllocatedDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCouponAllocatedDetailResponse.ProtoReflect.Descriptor instead.
func (*GetCouponAllocatedDetailResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{126}
}

func (x *GetCouponAllocatedDetailResponse) GetInfo() *CouponAllocatedDetail {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetCouponsAllocatedDetailByAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID string `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
}

func (x *GetCouponsAllocatedDetailByAppRequest) Reset() {
	*x = GetCouponsAllocatedDetailByAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCouponsAllocatedDetailByAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCouponsAllocatedDetailByAppRequest) ProtoMessage() {}

func (x *GetCouponsAllocatedDetailByAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCouponsAllocatedDetailByAppRequest.ProtoReflect.Descriptor instead.
func (*GetCouponsAllocatedDetailByAppRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{127}
}

func (x *GetCouponsAllocatedDetailByAppRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

type GetCouponsAllocatedDetailByAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*CouponAllocatedDetail `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *GetCouponsAllocatedDetailByAppResponse) Reset() {
	*x = GetCouponsAllocatedDetailByAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCouponsAllocatedDetailByAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCouponsAllocatedDetailByAppResponse) ProtoMessage() {}

func (x *GetCouponsAllocatedDetailByAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCouponsAllocatedDetailByAppResponse.ProtoReflect.Descriptor instead.
func (*GetCouponsAllocatedDetailByAppResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{128}
}

func (x *GetCouponsAllocatedDetailByAppResponse) GetInfos() []*CouponAllocatedDetail {
	if x != nil {
		return x.Infos
	}
	return nil
}

type GetCouponsAllocatedDetailByAppUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID  string `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
	UserID string `protobuf:"bytes,20,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *GetCouponsAllocatedDetailByAppUserRequest) Reset() {
	*x = GetCouponsAllocatedDetailByAppUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCouponsAllocatedDetailByAppUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCouponsAllocatedDetailByAppUserRequest) ProtoMessage() {}

func (x *GetCouponsAllocatedDetailByAppUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCouponsAllocatedDetailByAppUserRequest.ProtoReflect.Descriptor instead.
func (*GetCouponsAllocatedDetailByAppUserRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{129}
}

func (x *GetCouponsAllocatedDetailByAppUserRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetCouponsAllocatedDetailByAppUserRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type GetCouponsAllocatedDetailByAppUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*CouponAllocatedDetail `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *GetCouponsAllocatedDetailByAppUserResponse) Reset() {
	*x = GetCouponsAllocatedDetailByAppUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCouponsAllocatedDetailByAppUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCouponsAllocatedDetailByAppUserResponse) ProtoMessage() {}

func (x *GetCouponsAllocatedDetailByAppUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCouponsAllocatedDetailByAppUserResponse.ProtoReflect.Descriptor instead.
func (*GetCouponsAllocatedDetailByAppUserResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{130}
}

func (x *GetCouponsAllocatedDetailByAppUserResponse) GetInfos() []*CouponAllocatedDetail {
	if x != nil {
		return x.Infos
	}
	return nil
}

type DiscountPool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	AppID           string `protobuf:"bytes,20,opt,name=AppID,proto3" json:"AppID,omitempty"`
	ReleaseByUserID string `protobuf:"bytes,30,opt,name=ReleaseByUserID,proto3" json:"ReleaseByUserID,omitempty"`
	Discount        uint32 `protobuf:"varint,40,opt,name=Discount,proto3" json:"Discount,omitempty"`
	Start           uint32 `protobuf:"varint,50,opt,name=Start,proto3" json:"Start,omitempty"`
	DurationDays    int32  `protobuf:"varint,60,opt,name=DurationDays,proto3" json:"DurationDays,omitempty"`
	Message         string `protobuf:"bytes,70,opt,name=Message,proto3" json:"Message,omitempty"`
	Name            string `protobuf:"bytes,80,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *DiscountPool) Reset() {
	*x = DiscountPool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscountPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscountPool) ProtoMessage() {}

func (x *DiscountPool) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscountPool.ProtoReflect.Descriptor instead.
func (*DiscountPool) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{131}
}

func (x *DiscountPool) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *DiscountPool) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *DiscountPool) GetReleaseByUserID() string {
	if x != nil {
		return x.ReleaseByUserID
	}
	return ""
}

func (x *DiscountPool) GetDiscount() uint32 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *DiscountPool) GetStart() uint32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *DiscountPool) GetDurationDays() int32 {
	if x != nil {
		return x.DurationDays
	}
	return 0
}

func (x *DiscountPool) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DiscountPool) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateDiscountPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *DiscountPool `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateDiscountPoolRequest) Reset() {
	*x = CreateDiscountPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDiscountPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDiscountPoolRequest) ProtoMessage() {}

func (x *CreateDiscountPoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDiscountPoolRequest.ProtoReflect.Descriptor instead.
func (*CreateDiscountPoolRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{132}
}

func (x *CreateDiscountPoolRequest) GetInfo() *DiscountPool {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateDiscountPoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *DiscountPool `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateDiscountPoolResponse) Reset() {
	*x = CreateDiscountPoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDiscountPoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDiscountPoolResponse) ProtoMessage() {}

func (x *CreateDiscountPoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDiscountPoolResponse.ProtoReflect.Descriptor instead.
func (*CreateDiscountPoolResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{133}
}

func (x *CreateDiscountPoolResponse) GetInfo() *DiscountPool {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateDiscountPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *DiscountPool `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateDiscountPoolRequest) Reset() {
	*x = UpdateDiscountPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDiscountPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDiscountPoolRequest) ProtoMessage() {}

func (x *UpdateDiscountPoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDiscountPoolRequest.ProtoReflect.Descriptor instead.
func (*UpdateDiscountPoolRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{134}
}

func (x *UpdateDiscountPoolRequest) GetInfo() *DiscountPool {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateDiscountPoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *DiscountPool `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateDiscountPoolResponse) Reset() {
	*x = UpdateDiscountPoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDiscountPoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDiscountPoolResponse) ProtoMessage() {}

func (x *UpdateDiscountPoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDiscountPoolResponse.ProtoReflect.Descriptor instead.
func (*UpdateDiscountPoolResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{135}
}

func (x *UpdateDiscountPoolResponse) GetInfo() *DiscountPool {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetDiscountPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetDiscountPoolRequest) Reset() {
	*x = GetDiscountPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiscountPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiscountPoolRequest) ProtoMessage() {}

func (x *GetDiscountPoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiscountPoolRequest.ProtoReflect.Descriptor instead.
func (*GetDiscountPoolRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{136}
}

func (x *GetDiscountPoolRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetDiscountPoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *DiscountPool `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetDiscountPoolResponse) Reset() {
	*x = GetDiscountPoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiscountPoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiscountPoolResponse) ProtoMessage() {}

func (x *GetDiscountPoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiscountPoolResponse.ProtoReflect.Descriptor instead.
func (*GetDiscountPoolResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{137}
}

func (x *GetDiscountPoolResponse) GetInfo() *DiscountPool {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetDiscountPoolsByAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID string `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
}

func (x *GetDiscountPoolsByAppRequest) Reset() {
	*x = GetDiscountPoolsByAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiscountPoolsByAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiscountPoolsByAppRequest) ProtoMessage() {}

func (x *GetDiscountPoolsByAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiscountPoolsByAppRequest.ProtoReflect.Descriptor instead.
func (*GetDiscountPoolsByAppRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{138}
}

func (x *GetDiscountPoolsByAppRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

type GetDiscountPoolsByAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*DiscountPool `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *GetDiscountPoolsByAppResponse) Reset() {
	*x = GetDiscountPoolsByAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiscountPoolsByAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiscountPoolsByAppResponse) ProtoMessage() {}

func (x *GetDiscountPoolsByAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiscountPoolsByAppResponse.ProtoReflect.Descriptor instead.
func (*GetDiscountPoolsByAppResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{139}
}

func (x *GetDiscountPoolsByAppResponse) GetInfos() []*DiscountPool {
	if x != nil {
		return x.Infos
	}
	return nil
}

type GetDiscountPoolsByAppReleaserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID  string `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
	UserID string `protobuf:"bytes,20,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *GetDiscountPoolsByAppReleaserRequest) Reset() {
	*x = GetDiscountPoolsByAppReleaserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiscountPoolsByAppReleaserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiscountPoolsByAppReleaserRequest) ProtoMessage() {}

func (x *GetDiscountPoolsByAppReleaserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiscountPoolsByAppReleaserRequest.ProtoReflect.Descriptor instead.
func (*GetDiscountPoolsByAppReleaserRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{140}
}

func (x *GetDiscountPoolsByAppReleaserRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetDiscountPoolsByAppReleaserRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type GetDiscountPoolsByAppReleaserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*DiscountPool `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *GetDiscountPoolsByAppReleaserResponse) Reset() {
	*x = GetDiscountPoolsByAppReleaserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiscountPoolsByAppReleaserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiscountPoolsByAppReleaserResponse) ProtoMessage() {}

func (x *GetDiscountPoolsByAppReleaserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiscountPoolsByAppReleaserResponse.ProtoReflect.Descriptor instead.
func (*GetDiscountPoolsByAppReleaserResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{141}
}

func (x *GetDiscountPoolsByAppReleaserResponse) GetInfos() []*DiscountPool {
	if x != nil {
		return x.Infos
	}
	return nil
}

type UserSpecialReduction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              string  `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	AppID           string  `protobuf:"bytes,20,opt,name=AppID,proto3" json:"AppID,omitempty"`
	UserID          string  `protobuf:"bytes,30,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Amount          float64 `protobuf:"fixed64,40,opt,name=Amount,proto3" json:"Amount,omitempty"`
	ReleaseByUserID string  `protobuf:"bytes,50,opt,name=ReleaseByUserID,proto3" json:"ReleaseByUserID,omitempty"`
	Start           uint32  `protobuf:"varint,60,opt,name=Start,proto3" json:"Start,omitempty"`
	DurationDays    int32   `protobuf:"varint,70,opt,name=DurationDays,proto3" json:"DurationDays,omitempty"`
	Message         string  `protobuf:"bytes,80,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *UserSpecialReduction) Reset() {
	*x = UserSpecialReduction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSpecialReduction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSpecialReduction) ProtoMessage() {}

func (x *UserSpecialReduction) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSpecialReduction.ProtoReflect.Descriptor instead.
func (*UserSpecialReduction) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{142}
}

func (x *UserSpecialReduction) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *UserSpecialReduction) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *UserSpecialReduction) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UserSpecialReduction) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *UserSpecialReduction) GetReleaseByUserID() string {
	if x != nil {
		return x.ReleaseByUserID
	}
	return ""
}

func (x *UserSpecialReduction) GetStart() uint32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *UserSpecialReduction) GetDurationDays() int32 {
	if x != nil {
		return x.DurationDays
	}
	return 0
}

func (x *UserSpecialReduction) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CreateUserSpecialReductionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *UserSpecialReduction `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateUserSpecialReductionRequest) Reset() {
	*x = CreateUserSpecialReductionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserSpecialReductionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserSpecialReductionRequest) ProtoMessage() {}

func (x *CreateUserSpecialReductionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserSpecialReductionRequest.ProtoReflect.Descriptor instead.
func (*CreateUserSpecialReductionRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{143}
}

func (x *CreateUserSpecialReductionRequest) GetInfo() *UserSpecialReduction {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateUserSpecialReductionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *UserSpecialReduction `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateUserSpecialReductionResponse) Reset() {
	*x = CreateUserSpecialReductionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserSpecialReductionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserSpecialReductionResponse) ProtoMessage() {}

func (x *CreateUserSpecialReductionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserSpecialReductionResponse.ProtoReflect.Descriptor instead.
func (*CreateUserSpecialReductionResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{144}
}

func (x *CreateUserSpecialReductionResponse) GetInfo() *UserSpecialReduction {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetUserSpecialReductionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetUserSpecialReductionRequest) Reset() {
	*x = GetUserSpecialReductionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserSpecialReductionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserSpecialReductionRequest) ProtoMessage() {}

func (x *GetUserSpecialReductionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserSpecialReductionRequest.ProtoReflect.Descriptor instead.
func (*GetUserSpecialReductionRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{145}
}

func (x *GetUserSpecialReductionRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetUserSpecialReductionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *UserSpecialReduction `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetUserSpecialReductionResponse) Reset() {
	*x = GetUserSpecialReductionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserSpecialReductionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserSpecialReductionResponse) ProtoMessage() {}

func (x *GetUserSpecialReductionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserSpecialReductionResponse.ProtoReflect.Descriptor instead.
func (*GetUserSpecialReductionResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{146}
}

func (x *GetUserSpecialReductionResponse) GetInfo() *UserSpecialReduction {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetUserSpecialReductionsByAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID string `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
}

func (x *GetUserSpecialReductionsByAppRequest) Reset() {
	*x = GetUserSpecialReductionsByAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserSpecialReductionsByAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserSpecialReductionsByAppRequest) ProtoMessage() {}

func (x *GetUserSpecialReductionsByAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserSpecialReductionsByAppRequest.ProtoReflect.Descriptor instead.
func (*GetUserSpecialReductionsByAppRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{147}
}

func (x *GetUserSpecialReductionsByAppRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

type GetUserSpecialReductionsByAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*UserSpecialReduction `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *GetUserSpecialReductionsByAppResponse) Reset() {
	*x = GetUserSpecialReductionsByAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserSpecialReductionsByAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserSpecialReductionsByAppResponse) ProtoMessage() {}

func (x *GetUserSpecialReductionsByAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserSpecialReductionsByAppResponse.ProtoReflect.Descriptor instead.
func (*GetUserSpecialReductionsByAppResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{148}
}

func (x *GetUserSpecialReductionsByAppResponse) GetInfos() []*UserSpecialReduction {
	if x != nil {
		return x.Infos
	}
	return nil
}

type GetUserSpecialReductionsByAppUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID  string `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
	UserID string `protobuf:"bytes,20,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *GetUserSpecialReductionsByAppUserRequest) Reset() {
	*x = GetUserSpecialReductionsByAppUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserSpecialReductionsByAppUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserSpecialReductionsByAppUserRequest) ProtoMessage() {}

func (x *GetUserSpecialReductionsByAppUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserSpecialReductionsByAppUserRequest.ProtoReflect.Descriptor instead.
func (*GetUserSpecialReductionsByAppUserRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{149}
}

func (x *GetUserSpecialReductionsByAppUserRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetUserSpecialReductionsByAppUserRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type GetUserSpecialReductionsByAppUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*UserSpecialReduction `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *GetUserSpecialReductionsByAppUserResponse) Reset() {
	*x = GetUserSpecialReductionsByAppUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserSpecialReductionsByAppUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserSpecialReductionsByAppUserResponse) ProtoMessage() {}

func (x *GetUserSpecialReductionsByAppUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserSpecialReductionsByAppUserResponse.ProtoReflect.Descriptor instead.
func (*GetUserSpecialReductionsByAppUserResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{150}
}

func (x *GetUserSpecialReductionsByAppUserResponse) GetInfos() []*UserSpecialReduction {
	if x != nil {
		return x.Infos
	}
	return nil
}

type UpdateUserSpecialReductionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *UserSpecialReduction `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateUserSpecialReductionRequest) Reset() {
	*x = UpdateUserSpecialReductionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserSpecialReductionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserSpecialReductionRequest) ProtoMessage() {}

func (x *UpdateUserSpecialReductionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserSpecialReductionRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserSpecialReductionRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{151}
}

func (x *UpdateUserSpecialReductionRequest) GetInfo() *UserSpecialReduction {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateUserSpecialReductionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *UserSpecialReduction `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateUserSpecialReductionResponse) Reset() {
	*x = UpdateUserSpecialReductionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserSpecialReductionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserSpecialReductionResponse) ProtoMessage() {}

func (x *UpdateUserSpecialReductionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserSpecialReductionResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserSpecialReductionResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{152}
}

func (x *UpdateUserSpecialReductionResponse) GetInfo() *UserSpecialReduction {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetUserSpecialReductionsByAppReleaserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID  string `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
	UserID string `protobuf:"bytes,20,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *GetUserSpecialReductionsByAppReleaserRequest) Reset() {
	*x = GetUserSpecialReductionsByAppReleaserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserSpecialReductionsByAppReleaserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserSpecialReductionsByAppReleaserRequest) ProtoMessage() {}

func (x *GetUserSpecialReductionsByAppReleaserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserSpecialReductionsByAppReleaserRequest.ProtoReflect.Descriptor instead.
func (*GetUserSpecialReductionsByAppReleaserRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{153}
}

func (x *GetUserSpecialReductionsByAppReleaserRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetUserSpecialReductionsByAppReleaserRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type GetUserSpecialReductionsByAppReleaserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*UserSpecialReduction `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *GetUserSpecialReductionsByAppReleaserResponse) Reset() {
	*x = GetUserSpecialReductionsByAppReleaserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserSpecialReductionsByAppReleaserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserSpecialReductionsByAppReleaserResponse) ProtoMessage() {}

func (x *GetUserSpecialReductionsByAppReleaserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserSpecialReductionsByAppReleaserResponse.ProtoReflect.Descriptor instead.
func (*GetUserSpecialReductionsByAppReleaserResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{154}
}

func (x *GetUserSpecialReductionsByAppReleaserResponse) GetInfos() []*UserSpecialReduction {
	if x != nil {
		return x.Infos
	}
	return nil
}

type Activity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	AppID          string `protobuf:"bytes,20,opt,name=AppID,proto3" json:"AppID,omitempty"`
	CreatedBy      string `protobuf:"bytes,30,opt,name=CreatedBy,proto3" json:"CreatedBy,omitempty"`
	Name           string `protobuf:"bytes,40,opt,name=Name,proto3" json:"Name,omitempty"`
	Start          uint32 `protobuf:"varint,50,opt,name=Start,proto3" json:"Start,omitempty"`
	End            uint32 `protobuf:"varint,60,opt,name=End,proto3" json:"End,omitempty"`
	SystemActivity bool   `protobuf:"varint,70,opt,name=SystemActivity,proto3" json:"SystemActivity,omitempty"`
}

func (x *Activity) Reset() {
	*x = Activity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Activity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Activity) ProtoMessage() {}

func (x *Activity) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Activity.ProtoReflect.Descriptor instead.
func (*Activity) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{155}
}

func (x *Activity) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Activity) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *Activity) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *Activity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Activity) GetStart() uint32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *Activity) GetEnd() uint32 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *Activity) GetSystemActivity() bool {
	if x != nil {
		return x.SystemActivity
	}
	return false
}

type CreateActivityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Activity `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateActivityRequest) Reset() {
	*x = CreateActivityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateActivityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateActivityRequest) ProtoMessage() {}

func (x *CreateActivityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateActivityRequest.ProtoReflect.Descriptor instead.
func (*CreateActivityRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{156}
}

func (x *CreateActivityRequest) GetInfo() *Activity {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateActivityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Activity `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateActivityResponse) Reset() {
	*x = CreateActivityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateActivityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateActivityResponse) ProtoMessage() {}

func (x *CreateActivityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateActivityResponse.ProtoReflect.Descriptor instead.
func (*CreateActivityResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{157}
}

func (x *CreateActivityResponse) GetInfo() *Activity {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateActivityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Activity `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateActivityRequest) Reset() {
	*x = UpdateActivityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateActivityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateActivityRequest) ProtoMessage() {}

func (x *UpdateActivityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateActivityRequest.ProtoReflect.Descriptor instead.
func (*UpdateActivityRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{158}
}

func (x *UpdateActivityRequest) GetInfo() *Activity {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateActivityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Activity `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateActivityResponse) Reset() {
	*x = UpdateActivityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateActivityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateActivityResponse) ProtoMessage() {}

func (x *UpdateActivityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateActivityResponse.ProtoReflect.Descriptor instead.
func (*UpdateActivityResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{159}
}

func (x *UpdateActivityResponse) GetInfo() *Activity {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateActivityForOtherAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetAppID string    `protobuf:"bytes,10,opt,name=TargetAppID,proto3" json:"TargetAppID,omitempty"`
	Info        *Activity `protobuf:"bytes,20,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateActivityForOtherAppRequest) Reset() {
	*x = CreateActivityForOtherAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateActivityForOtherAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateActivityForOtherAppRequest) ProtoMessage() {}

func (x *CreateActivityForOtherAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateActivityForOtherAppRequest.ProtoReflect.Descriptor instead.
func (*CreateActivityForOtherAppRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{160}
}

func (x *CreateActivityForOtherAppRequest) GetTargetAppID() string {
	if x != nil {
		return x.TargetAppID
	}
	return ""
}

func (x *CreateActivityForOtherAppRequest) GetInfo() *Activity {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateActivityForOtherAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Activity `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateActivityForOtherAppResponse) Reset() {
	*x = CreateActivityForOtherAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateActivityForOtherAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateActivityForOtherAppResponse) ProtoMessage() {}

func (x *CreateActivityForOtherAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateActivityForOtherAppResponse.ProtoReflect.Descriptor instead.
func (*CreateActivityForOtherAppResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{161}
}

func (x *CreateActivityForOtherAppResponse) GetInfo() *Activity {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetActivityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetActivityRequest) Reset() {
	*x = GetActivityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActivityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActivityRequest) ProtoMessage() {}

func (x *GetActivityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActivityRequest.ProtoReflect.Descriptor instead.
func (*GetActivityRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{162}
}

func (x *GetActivityRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetActivityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Activity `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetActivityResponse) Reset() {
	*x = GetActivityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActivityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActivityResponse) ProtoMessage() {}

func (x *GetActivityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActivityResponse.ProtoReflect.Descriptor instead.
func (*GetActivityResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{163}
}

func (x *GetActivityResponse) GetInfo() *Activity {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetActivityByAppNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID string `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
	Name  string `protobuf:"bytes,20,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *GetActivityByAppNameRequest) Reset() {
	*x = GetActivityByAppNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActivityByAppNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActivityByAppNameRequest) ProtoMessage() {}

func (x *GetActivityByAppNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActivityByAppNameRequest.ProtoReflect.Descriptor instead.
func (*GetActivityByAppNameRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{164}
}

func (x *GetActivityByAppNameRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetActivityByAppNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetActivityByAppNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Activity `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetActivityByAppNameResponse) Reset() {
	*x = GetActivityByAppNameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActivityByAppNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActivityByAppNameResponse) ProtoMessage() {}

func (x *GetActivityByAppNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActivityByAppNameResponse.ProtoReflect.Descriptor instead.
func (*GetActivityByAppNameResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{165}
}

func (x *GetActivityByAppNameResponse) GetInfo() *Activity {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetActivitiesByAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID string `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
}

func (x *GetActivitiesByAppRequest) Reset() {
	*x = GetActivitiesByAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActivitiesByAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActivitiesByAppRequest) ProtoMessage() {}

func (x *GetActivitiesByAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActivitiesByAppRequest.ProtoReflect.Descriptor instead.
func (*GetActivitiesByAppRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{166}
}

func (x *GetActivitiesByAppRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

type GetActivitiesByAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*Activity `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *GetActivitiesByAppResponse) Reset() {
	*x = GetActivitiesByAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActivitiesByAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActivitiesByAppResponse) ProtoMessage() {}

func (x *GetActivitiesByAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActivitiesByAppResponse.ProtoReflect.Descriptor instead.
func (*GetActivitiesByAppResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{167}
}

func (x *GetActivitiesByAppResponse) GetInfos() []*Activity {
	if x != nil {
		return x.Infos
	}
	return nil
}

type GetActivitiesByOtherAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetAppID string `protobuf:"bytes,10,opt,name=TargetAppID,proto3" json:"TargetAppID,omitempty"`
}

func (x *GetActivitiesByOtherAppRequest) Reset() {
	*x = GetActivitiesByOtherAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActivitiesByOtherAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActivitiesByOtherAppRequest) ProtoMessage() {}

func (x *GetActivitiesByOtherAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActivitiesByOtherAppRequest.ProtoReflect.Descriptor instead.
func (*GetActivitiesByOtherAppRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{168}
}

func (x *GetActivitiesByOtherAppRequest) GetTargetAppID() string {
	if x != nil {
		return x.TargetAppID
	}
	return ""
}

type GetActivitiesByOtherAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*Activity `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *GetActivitiesByOtherAppResponse) Reset() {
	*x = GetActivitiesByOtherAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActivitiesByOtherAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActivitiesByOtherAppResponse) ProtoMessage() {}

func (x *GetActivitiesByOtherAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActivitiesByOtherAppResponse.ProtoReflect.Descriptor instead.
func (*GetActivitiesByOtherAppResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{169}
}

func (x *GetActivitiesByOtherAppResponse) GetInfos() []*Activity {
	if x != nil {
		return x.Infos
	}
	return nil
}

type EventCoupon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	AppID      string `protobuf:"bytes,20,opt,name=AppID,proto3" json:"AppID,omitempty"`
	ActivityID string `protobuf:"bytes,30,opt,name=ActivityID,proto3" json:"ActivityID,omitempty"`
	Event      string `protobuf:"bytes,40,opt,name=Event,proto3" json:"Event,omitempty"`
	CouponID   string `protobuf:"bytes,50,opt,name=CouponID,proto3" json:"CouponID,omitempty"`
}

func (x *EventCoupon) Reset() {
	*x = EventCoupon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventCoupon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventCoupon) ProtoMessage() {}

func (x *EventCoupon) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventCoupon.ProtoReflect.Descriptor instead.
func (*EventCoupon) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{170}
}

func (x *EventCoupon) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *EventCoupon) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *EventCoupon) GetActivityID() string {
	if x != nil {
		return x.ActivityID
	}
	return ""
}

func (x *EventCoupon) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *EventCoupon) GetCouponID() string {
	if x != nil {
		return x.CouponID
	}
	return ""
}

type CreateEventCouponRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *EventCoupon `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateEventCouponRequest) Reset() {
	*x = CreateEventCouponRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEventCouponRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEventCouponRequest) ProtoMessage() {}

func (x *CreateEventCouponRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEventCouponRequest.ProtoReflect.Descriptor instead.
func (*CreateEventCouponRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{171}
}

func (x *CreateEventCouponRequest) GetInfo() *EventCoupon {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateEventCouponResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *EventCoupon `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateEventCouponResponse) Reset() {
	*x = CreateEventCouponResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEventCouponResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEventCouponResponse) ProtoMessage() {}

func (x *CreateEventCouponResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEventCouponResponse.ProtoReflect.Descriptor instead.
func (*CreateEventCouponResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{172}
}

func (x *CreateEventCouponResponse) GetInfo() *EventCoupon {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateEventCouponForOtherAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetAppID string       `protobuf:"bytes,10,opt,name=TargetAppID,proto3" json:"TargetAppID,omitempty"`
	Info        *EventCoupon `protobuf:"bytes,20,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateEventCouponForOtherAppRequest) Reset() {
	*x = CreateEventCouponForOtherAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEventCouponForOtherAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEventCouponForOtherAppRequest) ProtoMessage() {}

func (x *CreateEventCouponForOtherAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEventCouponForOtherAppRequest.ProtoReflect.Descriptor instead.
func (*CreateEventCouponForOtherAppRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{173}
}

func (x *CreateEventCouponForOtherAppRequest) GetTargetAppID() string {
	if x != nil {
		return x.TargetAppID
	}
	return ""
}

func (x *CreateEventCouponForOtherAppRequest) GetInfo() *EventCoupon {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateEventCouponForOtherAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *EventCoupon `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateEventCouponForOtherAppResponse) Reset() {
	*x = CreateEventCouponForOtherAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEventCouponForOtherAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEventCouponForOtherAppResponse) ProtoMessage() {}

func (x *CreateEventCouponForOtherAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEventCouponForOtherAppResponse.ProtoReflect.Descriptor instead.
func (*CreateEventCouponForOtherAppResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{174}
}

func (x *CreateEventCouponForOtherAppResponse) GetInfo() *EventCoupon {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateEventCouponRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *EventCoupon `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateEventCouponRequest) Reset() {
	*x = UpdateEventCouponRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateEventCouponRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEventCouponRequest) ProtoMessage() {}

func (x *UpdateEventCouponRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEventCouponRequest.ProtoReflect.Descriptor instead.
func (*UpdateEventCouponRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{175}
}

func (x *UpdateEventCouponRequest) GetInfo() *EventCoupon {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateEventCouponResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *EventCoupon `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateEventCouponResponse) Reset() {
	*x = UpdateEventCouponResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateEventCouponResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEventCouponResponse) ProtoMessage() {}

func (x *UpdateEventCouponResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEventCouponResponse.ProtoReflect.Descriptor instead.
func (*UpdateEventCouponResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{176}
}

func (x *UpdateEventCouponResponse) GetInfo() *EventCoupon {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetEventCouponRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetEventCouponRequest) Reset() {
	*x = GetEventCouponRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEventCouponRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventCouponRequest) ProtoMessage() {}

func (x *GetEventCouponRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventCouponRequest.ProtoReflect.Descriptor instead.
func (*GetEventCouponRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{177}
}

func (x *GetEventCouponRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetEventCouponResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *EventCoupon `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetEventCouponResponse) Reset() {
	*x = GetEventCouponResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEventCouponResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventCouponResponse) ProtoMessage() {}

func (x *GetEventCouponResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventCouponResponse.ProtoReflect.Descriptor instead.
func (*GetEventCouponResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{178}
}

func (x *GetEventCouponResponse) GetInfo() *EventCoupon {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetEventCouponsByAppActivityEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID      string `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
	ActivityID string `protobuf:"bytes,20,opt,name=ActivityID,proto3" json:"ActivityID,omitempty"`
	Event      string `protobuf:"bytes,30,opt,name=Event,proto3" json:"Event,omitempty"`
}

func (x *GetEventCouponsByAppActivityEventRequest) Reset() {
	*x = GetEventCouponsByAppActivityEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEventCouponsByAppActivityEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventCouponsByAppActivityEventRequest) ProtoMessage() {}

func (x *GetEventCouponsByAppActivityEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventCouponsByAppActivityEventRequest.ProtoReflect.Descriptor instead.
func (*GetEventCouponsByAppActivityEventRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{179}
}

func (x *GetEventCouponsByAppActivityEventRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetEventCouponsByAppActivityEventRequest) GetActivityID() string {
	if x != nil {
		return x.ActivityID
	}
	return ""
}

func (x *GetEventCouponsByAppActivityEventRequest) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

type GetEventCouponsByAppActivityEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*EventCoupon `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *GetEventCouponsByAppActivityEventResponse) Reset() {
	*x = GetEventCouponsByAppActivityEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEventCouponsByAppActivityEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventCouponsByAppActivityEventResponse) ProtoMessage() {}

func (x *GetEventCouponsByAppActivityEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventCouponsByAppActivityEventResponse.ProtoReflect.Descriptor instead.
func (*GetEventCouponsByAppActivityEventResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{180}
}

func (x *GetEventCouponsByAppActivityEventResponse) GetInfos() []*EventCoupon {
	if x != nil {
		return x.Infos
	}
	return nil
}

type GetEventCouponsByAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID string `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
}

func (x *GetEventCouponsByAppRequest) Reset() {
	*x = GetEventCouponsByAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEventCouponsByAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventCouponsByAppRequest) ProtoMessage() {}

func (x *GetEventCouponsByAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventCouponsByAppRequest.ProtoReflect.Descriptor instead.
func (*GetEventCouponsByAppRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{181}
}

func (x *GetEventCouponsByAppRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

type GetEventCouponsByAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*EventCoupon `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *GetEventCouponsByAppResponse) Reset() {
	*x = GetEventCouponsByAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEventCouponsByAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventCouponsByAppResponse) ProtoMessage() {}

func (x *GetEventCouponsByAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventCouponsByAppResponse.ProtoReflect.Descriptor instead.
func (*GetEventCouponsByAppResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{182}
}

func (x *GetEventCouponsByAppResponse) GetInfos() []*EventCoupon {
	if x != nil {
		return x.Infos
	}
	return nil
}

type GetEventCouponsByOtherAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetAppID string `protobuf:"bytes,10,opt,name=TargetAppID,proto3" json:"TargetAppID,omitempty"`
}

func (x *GetEventCouponsByOtherAppRequest) Reset() {
	*x = GetEventCouponsByOtherAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEventCouponsByOtherAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventCouponsByOtherAppRequest) ProtoMessage() {}

func (x *GetEventCouponsByOtherAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventCouponsByOtherAppRequest.ProtoReflect.Descriptor instead.
func (*GetEventCouponsByOtherAppRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{183}
}

func (x *GetEventCouponsByOtherAppRequest) GetTargetAppID() string {
	if x != nil {
		return x.TargetAppID
	}
	return ""
}

type GetEventCouponsByOtherAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*EventCoupon `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *GetEventCouponsByOtherAppResponse) Reset() {
	*x = GetEventCouponsByOtherAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEventCouponsByOtherAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventCouponsByOtherAppResponse) ProtoMessage() {}

func (x *GetEventCouponsByOtherAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventCouponsByOtherAppResponse.ProtoReflect.Descriptor instead.
func (*GetEventCouponsByOtherAppResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP(), []int{184}
}

func (x *GetEventCouponsByOtherAppResponse) GetInfos() []*EventCoupon {
	if x != nil {
		return x.Infos
	}
	return nil
}

var File_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto protoreflect.FileDescriptor

var file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDesc = []byte{
	0x0a, 0x37, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x2d, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2d, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2d, 0x69, 0x6e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11,
	0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xd2, 0x01, 0x0a, 0x14, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x12, 0x32, 0x0a, 0x14, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x4b, 0x79, 0x63, 0x43, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4b, 0x79, 0x63, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x3e, 0x0a, 0x1a, 0x41, 0x75, 0x74, 0x6f, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x41, 0x75, 0x74, 0x6f,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x67, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x68, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x30, 0x0a, 0x1e, 0x47, 0x65, 0x74,
	0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x65, 0x0a, 0x1f, 0x47,
	0x65, 0x74, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x3b, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x41,
	0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x22,
	0x6a, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x67, 0x0a, 0x21, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x42, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69,
	0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x68, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65,
	0x77, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xd3,
	0x03, 0x0a, 0x0d, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x40,
	0x0a, 0x1b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x1b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x12, 0x32, 0x0a, 0x14, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12, 0x4b, 0x79, 0x63, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x12, 0x4b, 0x79, 0x63, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x4b, 0x79, 0x63, 0x43, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4b, 0x79, 0x63, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x3e, 0x0a, 0x1a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x18, 0x50, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x73, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x73, 0x12, 0x3e, 0x0a, 0x1a, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x22, 0x59, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x67,
	0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3b, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e,
	0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x5a, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x29, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x57, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65,
	0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e,
	0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x34, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x22, 0x5c, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e,
	0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x59, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65,
	0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3b, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x63,
	0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5a,
	0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x80, 0x01, 0x0a, 0x12, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x2a, 0x0a, 0x10, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x22, 0x63, 0x0a,
	0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x40, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69,
	0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x64, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x63, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x64, 0x0a,
	0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x40, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x2e, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x44, 0x22, 0x61, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x3a, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x22, 0x69, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x41, 0x70,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x05, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x58, 0x0a,
	0x26, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x41, 0x70, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x22, 0x6b, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x79, 0x41, 0x70, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x96, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x49, 0x44,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x22, 0x6b, 0x0a,
	0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x6c, 0x0a, 0x24, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x44, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x6b, 0x0a, 0x23, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x44, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x6c, 0x0a, 0x24, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x32, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x69, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x3e, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x22, 0x71, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a,
	0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x63, 0x0a, 0x2d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x49, 0x44, 0x22, 0x78, 0x0a, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x05,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x22, 0x62, 0x0a, 0x2c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x79, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x65, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x49, 0x44, 0x22, 0x75, 0x0a, 0x2d, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x7a, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a,
	0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x63, 0x0a, 0x1f, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x64, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xb8, 0x01, 0x0a, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x70, 0x70, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x40, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x73, 0x0a, 0x2f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72,
	0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x96, 0x01, 0x0a, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x40, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x73, 0x0a, 0x2f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x41, 0x70,
	0x70, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2e, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x44, 0x22, 0x61, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x55, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x42, 0x79, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x6a,
	0x0a, 0x26, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x1f, 0x0a, 0x1d, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x64, 0x0a, 0x1e, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a,
	0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x22, 0x3a, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x22, 0x69, 0x0a,
	0x23, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x4b, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x73, 0x42, 0x79, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x22, 0x6e, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x42,
	0x79, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x42, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x05,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x38, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x67, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x7f, 0x0a, 0x0f, 0x43, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x5d, 0x0a, 0x1c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5e, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2b, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x5b, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x37, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x22, 0x63, 0x0a, 0x20, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3f, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69,
	0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x22, 0x53, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x67, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x41, 0x70,
	0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a,
	0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x5d,
	0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5e, 0x0a,
	0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x8a, 0x02,
	0x0a, 0x0a, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x42, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c,
	0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x43, 0x69, 0x72, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x32, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x43, 0x69, 0x72, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x18, 0x46, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x5a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x53, 0x0a, 0x17, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x54, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50,
	0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x80, 0x01, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x46, 0x6f, 0x72, 0x4f, 0x74, 0x68,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x38,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f,
	0x6f, 0x6c, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5f, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x46, 0x6f, 0x72, 0x4f,
	0x74, 0x68, 0x65, 0x72, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x38, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50,
	0x6f, 0x6f, 0x6c, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x53, 0x0a, 0x17, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x54,
	0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f,
	0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x26, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x51, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x32, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c,
	0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x22, 0x59, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x43,
	0x0a, 0x1f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73,
	0x42, 0x79, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x22, 0x5e, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x42, 0x79, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x70, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x05, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x22, 0x52, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x61, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a,
	0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50,
	0x6f, 0x6f, 0x6c, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x6f, 0x0a, 0x27, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x42, 0x79, 0x4f, 0x74,
	0x68, 0x65, 0x72, 0x41, 0x70, 0x70, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x66, 0x0a, 0x28, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x42, 0x79, 0x4f,
	0x74, 0x68, 0x65, 0x72, 0x41, 0x70, 0x70, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x05, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x22, 0x9c, 0x02, 0x0a, 0x1a, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x3e, 0x0a, 0x1a, 0x41, 0x75, 0x74, 0x6f,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x41, 0x75,
	0x74, 0x6f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x54, 0x0a, 0x12, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x12, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x12, 0x42,
	0x0a, 0x09, 0x4b, 0x79, 0x63, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x09, 0x4b, 0x79, 0x63, 0x43, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x22, 0x36, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x71, 0x0a, 0x25, 0x47, 0x65,
	0x74, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x77,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x82, 0x01,
	0x0a, 0x10, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0f, 0x44, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0x5f, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x43,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x60, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x70, 0x70, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2c, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x43,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x44, 0x22, 0x5d, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x43,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x37, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x22, 0x62, 0x0a, 0x20, 0x47,
	0x65, 0x74, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3e, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x5f, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3e, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69,
	0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x60, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x43,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x83, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4b, 0x70,
	0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x22, 0x61, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4b, 0x70, 0x69, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x62, 0x0a, 0x1f, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4b, 0x70, 0x69, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4b,
	0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x2d, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4b, 0x70, 0x69,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x5f,
	0x0a, 0x1c, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4b, 0x70, 0x69, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4b,
	0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x54, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4b, 0x70, 0x69,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47,
	0x6f, 0x6f, 0x64, 0x49, 0x44, 0x22, 0x68, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x41,
	0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4b,
	0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x61, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3f, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x62, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x98, 0x01, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x4b,
	0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49,
	0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x22, 0x5b, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b,
	0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3c, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69,
	0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x70,
	0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5c,
	0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x70, 0x69, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x70, 0x69, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2a, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x59, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x51, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x70,
	0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x22, 0x62, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x41, 0x70, 0x70,
	0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5b, 0x0a, 0x1b, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5c, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x9d, 0x04, 0x0a, 0x13, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a,
	0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x40, 0x0a, 0x1b, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x1b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x54, 0x0a,
	0x12, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x52,
	0x12, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x4b, 0x79, 0x63, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x12, 0x4b, 0x79, 0x63, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x12, 0x42, 0x0a, 0x09, 0x4b, 0x79, 0x63, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x09, 0x4b, 0x79,
	0x63, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x1a, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x50, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x73, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x3e, 0x0a, 0x1a, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x22, 0x2f, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e,
	0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x63, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65,
	0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x3a, 0x0a, 0x22, 0x47,
	0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x22, 0x68, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x41, 0x67,
	0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0xeb, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a,
	0x06, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50,
	0x6f, 0x6f, 0x6c, 0x52, 0x06, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x08, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x08, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x31, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x44, 0x22, 0x67, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x3d, 0x0a, 0x25, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x22, 0x6f, 0x0a, 0x26, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x59, 0x0a, 0x29, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x73, 0x0a, 0x2a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x42, 0x79, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0xe2, 0x01, 0x0a, 0x0c,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x42, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x18, 0x3c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x79, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x46, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x57, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x6f, 0x6f, 0x6c, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x58, 0x0a, 0x1a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x57, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3a, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69,
	0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x58, 0x0a, 0x1a,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f,
	0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c,
	0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x28, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44,
	0x22, 0x55, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f,
	0x6c, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x34, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x22, 0x5d, 0x0a,
	0x1d, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c,
	0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c,
	0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x54, 0x0a, 0x24,
	0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73,
	0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x22, 0x65, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f,
	0x6f, 0x6c, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0xea, 0x01, 0x0a, 0x14, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x18, 0x46, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x67, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x68, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x30, 0x0a, 0x1e, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x65, 0x0a, 0x1f, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x3c, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79,
	0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x22, 0x6d, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x41, 0x70,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22,
	0x58, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x71, 0x0a, 0x29, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x67, 0x0a, 0x21,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x42, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x68, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x5c, 0x0a, 0x2c, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x75, 0x0a,
	0x2d, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44,
	0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x22, 0xb2, 0x01, 0x0a, 0x08, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x45, 0x6e, 0x64, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x45, 0x6e,
	0x64, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x18, 0x46, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x22, 0x4f, 0x0a, 0x15, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x36, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x50, 0x0a, 0x16, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4f, 0x0a, 0x15,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x50, 0x0a,
	0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x7c, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x46, 0x6f, 0x72, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5b, 0x0a,
	0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x46,
	0x6f, 0x72, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x24, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44,
	0x22, 0x4d, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x47, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x79,
	0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x56, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x79, 0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x31, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x22, 0x56, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x38, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x42, 0x0a, 0x1e, 0x47,
	0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x42, 0x79, 0x4f, 0x74,
	0x68, 0x65, 0x72, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x22,
	0x5b, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x42, 0x79, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x85, 0x01, 0x0a,
	0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x44,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x49, 0x44, 0x22, 0x55, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x39, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69,
	0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x56, 0x0a, 0x19, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x82, 0x01, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x4f, 0x74, 0x68, 0x65,
	0x72, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x39, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x61, 0x0a, 0x24, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x46, 0x6f, 0x72,
	0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x39, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69,
	0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x55, 0x0a, 0x18, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x56, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x39, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x27, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x44, 0x22, 0x53, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x76, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x22, 0x68, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a,
	0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x33, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x41,
	0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x22,
	0x5b, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3b, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69,
	0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x44, 0x0a, 0x20,
	0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x42,
	0x79, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x22, 0x60, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x70, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x05, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x32, 0xc3, 0x7f, 0x0a, 0x13, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x48, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x12, 0x51, 0x0a, 0x07,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x19, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0d, 0x22, 0x08, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12,
	0xc6, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x3b,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69,
	0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x27, 0x22, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x65,
	0x77, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x01, 0x2a, 0x12, 0xba, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69,
	0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x24, 0x22, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x6e, 0x65, 0x77, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x3a, 0x01, 0x2a, 0x12, 0xd3, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x3e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b,
	0x22, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x6e, 0x65, 0x77, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x3a, 0x01, 0x2a, 0x12, 0xd0, 0x01, 0x0a, 0x1c,
	0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x41, 0x70, 0x70, 0x12, 0x3d, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42,
	0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79,
	0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2b, 0x22, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x6e, 0x65, 0x77,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x2f, 0x62, 0x79, 0x2f, 0x61, 0x70, 0x70, 0x3a, 0x01, 0x2a, 0x12, 0xc6,
	0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e,
	0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27,
	0x22, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x3a, 0x01, 0x2a, 0x12, 0xa8, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x34, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x2f, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x3a,
	0x01, 0x2a, 0x12, 0x9c, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x31, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f,
	0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x01,
	0x2a, 0x12, 0xb2, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x41, 0x70, 0x70, 0x12, 0x36, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42,
	0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x22, 0x22, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x61, 0x67,
	0x65, 0x6e, 0x63, 0x79, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x62, 0x79, 0x2f,
	0x61, 0x70, 0x70, 0x3a, 0x01, 0x2a, 0x12, 0xa8, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x34,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69,
	0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x01,
	0x2a, 0x12, 0xb5, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x37, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x63,
	0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74,
	0x2f, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x3a, 0x01, 0x2a, 0x12, 0xcb, 0x01, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x41, 0x70, 0x70, 0x12, 0x3c, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x41, 0x70, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x22, 0x24,
	0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x2f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2f, 0x62, 0x79,
	0x2f, 0x61, 0x70, 0x70, 0x3a, 0x01, 0x2a, 0x12, 0xbc, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x23, 0x22, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f,
	0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x2f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0xbc, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x39, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69,
	0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x23, 0x22, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x70,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x2f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0xb0, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x36, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65,
	0x74, 0x2f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x2f, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0xca, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x12, 0x3c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x22, 0x23, 0x2f,
	0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x2f,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x79, 0x2f, 0x61,
	0x70, 0x70, 0x3a, 0x01, 0x2a, 0x12, 0xdb, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x79, 0x41, 0x70, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x40, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x41, 0x70, 0x70, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x41, 0x70,
	0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x22, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f,
	0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x2f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x62, 0x79, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x3a, 0x01, 0x2a, 0x12, 0xcc, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x22, 0x22, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a,
	0x01, 0x2a, 0x12, 0xcc, 0x01, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x22, 0x22, 0x2f, 0x76, 0x31, 0x2f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01,
	0x2a, 0x12, 0xc0, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24,
	0x22, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x3a, 0x01, 0x2a, 0x12, 0xda, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x12, 0x40, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79,
	0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x22, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x79, 0x2f, 0x61, 0x70, 0x70, 0x3a, 0x01,
	0x2a, 0x12, 0xf7, 0x01, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x42, 0x79, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x12, 0x47, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x48, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x22, 0x2f, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74,
	0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x79, 0x2f, 0x61, 0x70, 0x70,
	0x2f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0xf4, 0x01, 0x0a, 0x25,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x41, 0x70, 0x70, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x65, 0x12, 0x46, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x41, 0x70, 0x70, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x47, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x79, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x22, 0x2f,
	0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x62, 0x79, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x3a,
	0x01, 0x2a, 0x12, 0xbd, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x39, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x1f,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x3a,
	0x01, 0x2a, 0x12, 0xfd, 0x01, 0x0a, 0x27, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x46,
	0x6f, 0x72, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x12, 0x48,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69,
	0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x46, 0x6f, 0x72, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x49, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x4f,
	0x74, 0x68, 0x65, 0x72, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x22, 0x32, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x66, 0x6f, 0x72,
	0x2f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x3a,
	0x01, 0x2a, 0x12, 0xfd, 0x01, 0x0a, 0x27, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x46,
	0x6f, 0x72, 0x41, 0x70, 0x70, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x48,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69,
	0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x49, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x41,
	0x70, 0x70, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x22, 0x32, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x66, 0x6f, 0x72,
	0x2f, 0x61, 0x70, 0x70, 0x2f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x3a,
	0x01, 0x2a, 0x12, 0xb1, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63,
	0x6f, 0x64, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0xd8, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x42, 0x79, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x12, 0x3f, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x41, 0x70, 0x70, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x41, 0x70, 0x70,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2d, 0x22, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x2f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f,
	0x64, 0x65, 0x2f, 0x62, 0x79, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x3a, 0x01,
	0x2a, 0x12, 0xb5, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x37, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xcb, 0x01, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x12, 0x3c, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x22, 0x24,
	0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x62, 0x79,
	0x2f, 0x61, 0x70, 0x70, 0x3a, 0x01, 0x2a, 0x12, 0xe0, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x73, 0x42, 0x79, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x70, 0x70, 0x12, 0x41, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x42, 0x79,
	0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x42, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x73, 0x42, 0x79, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x22, 0x2a, 0x2f, 0x76, 0x31,
	0x2f, 0x67, 0x65, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x62, 0x79, 0x2f, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x70, 0x3a, 0x01, 0x2a, 0x12, 0xcb, 0x01, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x22,
	0x24, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x62, 0x79,
	0x2f, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0xb0, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x36, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2f, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0xa4, 0x01, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x33, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x63,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x3a,
	0x01, 0x2a, 0x12, 0xbe, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x41, 0x70, 0x70, 0x12,
	0x39, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x22, 0x20,
	0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x62, 0x79, 0x2f, 0x61, 0x70, 0x70,
	0x3a, 0x01, 0x2a, 0x12, 0xcf, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x41, 0x70, 0x70,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x3d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x22, 0x25, 0x2f, 0x76, 0x31,
	0x2f, 0x67, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x62, 0x79, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0xb0, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x36, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2f, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0xbd, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x39, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x24, 0x22, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x63, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x3a, 0x01, 0x2a, 0x12, 0xd7, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x41, 0x70, 0x70, 0x12, 0x3f, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x22, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f,
	0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2f, 0x62, 0x79, 0x2f, 0x61, 0x70, 0x70, 0x3a,
	0x01, 0x2a, 0x12, 0xe8, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x42, 0x79, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x12, 0x43, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79,
	0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69,
	0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x42, 0x79, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x22, 0x2c, 0x2f, 0x76,
	0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2f, 0x62,
	0x79, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0x9c, 0x01,
	0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f,
	0x6f, 0x6c, 0x12, 0x31, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1b, 0x22, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x3a, 0x01, 0x2a, 0x12, 0xcb, 0x01, 0x0a,
	0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f,
	0x6c, 0x46, 0x6f, 0x72, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x70, 0x70, 0x12, 0x3c, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x46, 0x6f, 0x72, 0x4f, 0x74, 0x68, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x46, 0x6f, 0x72, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x29, 0x22, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x66, 0x6f, 0x72, 0x2f, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x70, 0x3a, 0x01, 0x2a, 0x12, 0x9c, 0x01, 0x0a, 0x10, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x12,
	0x31, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x32, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16,
	0x2f, 0x76, 0x31, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x3a, 0x01, 0x2a, 0x12, 0x90, 0x01, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x2e, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x63, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x3a, 0x01, 0x2a, 0x12, 0xaa, 0x01, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x42,
	0x79, 0x41, 0x70, 0x70, 0x12, 0x34, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x42, 0x79,
	0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50,
	0x6f, 0x6f, 0x6c, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x67,
	0x65, 0x74, 0x2f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2f,
	0x62, 0x79, 0x2f, 0x61, 0x70, 0x70, 0x3a, 0x01, 0x2a, 0x12, 0xbf, 0x01, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x42, 0x79, 0x4f, 0x74,
	0x68, 0x65, 0x72, 0x41, 0x70, 0x70, 0x12, 0x39, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73,
	0x42, 0x79, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x42, 0x79, 0x4f, 0x74, 0x68,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x26, 0x22, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x63,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x62, 0x79, 0x2f, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x70, 0x3a, 0x01, 0x2a, 0x12, 0xcb, 0x01, 0x0a, 0x1b,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x42, 0x79,
	0x41, 0x70, 0x70, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x72, 0x12, 0x3c, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f,
	0x6f, 0x6c, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29,
	0x22, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x62, 0x79, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0xe0, 0x01, 0x0a, 0x20, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x42, 0x79, 0x4f, 0x74,
	0x68, 0x65, 0x72, 0x41, 0x70, 0x70, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x72, 0x12, 0x41,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69,
	0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x42, 0x79, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x42, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x42, 0x79, 0x4f, 0x74, 0x68,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x22, 0x2a, 0x2f,
	0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2f, 0x70, 0x6f,
	0x6f, 0x6c, 0x73, 0x2f, 0x62, 0x79, 0x2f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x70,
	0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0xa4, 0x01, 0x0a,
	0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x6f, 0x6f, 0x6c, 0x12, 0x33, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x70, 0x6f, 0x6f, 0x6c,
	0x3a, 0x01, 0x2a, 0x12, 0xa4, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x33, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x34, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f,
	0x76, 0x31, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x3a, 0x01, 0x2a, 0x12, 0x98, 0x01, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x30,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69,
	0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x31, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x15, 0x2f, 0x76, 0x31,
	0x2f, 0x67, 0x65, 0x74, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x70, 0x6f,
	0x6f, 0x6c, 0x3a, 0x01, 0x2a, 0x12, 0xb2, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x12,
	0x36, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f,
	0x6f, 0x6c, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65,
	0x74, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x73,
	0x2f, 0x62, 0x79, 0x2f, 0x61, 0x70, 0x70, 0x3a, 0x01, 0x2a, 0x12, 0xd3, 0x01, 0x0a, 0x1d, 0x47,
	0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x42,
	0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x72, 0x12, 0x3e, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x22, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x62, 0x79,
	0x2f, 0x61, 0x70, 0x70, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x72, 0x3a, 0x01, 0x2a,
	0x12, 0xb5, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x37, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x01, 0x2a, 0x12, 0xa9, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x41, 0x70, 0x70, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x34, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x70, 0x70, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x61,
	0x70, 0x70, 0x2f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x3a, 0x01, 0x2a, 0x12, 0xbf, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x43,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x41, 0x70,
	0x70, 0x12, 0x39, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x70, 0x70, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x41, 0x70, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26,
	0x22, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x63, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x62, 0x79, 0x2f,
	0x61, 0x70, 0x70, 0x3a, 0x01, 0x2a, 0x12, 0xb5, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x37, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x43,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x1d, 0x2f, 0x76,
	0x31, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x63, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x01, 0x2a, 0x12, 0xb9,
	0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4b, 0x70, 0x69,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2f, 0x6b, 0x70, 0x69, 0x2f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x01, 0x2a, 0x12, 0xad, 0x01, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x35, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f,
	0x67, 0x65, 0x74, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2f, 0x6b, 0x70, 0x69, 0x2f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x01, 0x2a, 0x12, 0xd4, 0x01, 0x0a, 0x1d, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x42, 0x79, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x12, 0x3e, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x41, 0x70,
	0x70, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x41, 0x70,
	0x70, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x22, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2f, 0x6b, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x2f, 0x62, 0x79, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x3a, 0x01,
	0x2a, 0x12, 0xb9, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22, 0x1e, 0x2f, 0x76, 0x31, 0x2f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2f, 0x6b,
	0x70, 0x69, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x01, 0x2a, 0x12, 0xad, 0x01,
	0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x70, 0x69, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x70, 0x69, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x6b,
	0x70, 0x69, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x01, 0x2a, 0x12, 0xa1, 0x01,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x32, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x2f, 0x6b, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x01,
	0x2a, 0x12, 0xc8, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x70, 0x69,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64,
	0x12, 0x3b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x41,
	0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x41, 0x70, 0x70, 0x47,
	0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x29, 0x22, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x2f, 0x6b, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x62, 0x79,
	0x2f, 0x61, 0x70, 0x70, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0xad, 0x01, 0x0a,
	0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x70, 0x69, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x70, 0x69, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x4b, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x76,
	0x31, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x6b, 0x70,
	0x69, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x01, 0x2a, 0x12, 0xc5, 0x01, 0x0a,
	0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x22, 0x21,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x2f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x3a, 0x01, 0x2a, 0x12, 0xb9, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x38, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22, 0x1e, 0x2f,
	0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x2f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a,
	0x12, 0xd3, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x41,
	0x70, 0x70, 0x12, 0x3e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x22, 0x26, 0x2f, 0x76, 0x31,
	0x2f, 0x67, 0x65, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x2f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x79, 0x2f,
	0x61, 0x70, 0x70, 0x3a, 0x01, 0x2a, 0x12, 0xf4, 0x01, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x72,
	0x12, 0x46, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x47, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x41, 0x70,
	0x70, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x22, 0x2f, 0x2f, 0x76, 0x31, 0x2f, 0x67,
	0x65, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x2f,
	0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x79, 0x2f, 0x61, 0x70,
	0x70, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0xe4, 0x01,
	0x0a, 0x21, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x42, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x30, 0x22, 0x2b, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x2f, 0x72, 0x65, 0x64, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x79, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x3a, 0x01, 0x2a, 0x12, 0xc5, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x22, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x2f,
	0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x93, 0x01, 0x0a,
	0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12,
	0x2f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x30, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x3a,
	0x01, 0x2a, 0x12, 0xc2, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x46, 0x6f, 0x72, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x70, 0x70,
	0x12, 0x3a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x46, 0x6f, 0x72, 0x4f, 0x74, 0x68,
	0x65, 0x72, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x46, 0x6f, 0x72, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x26, 0x22, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2f, 0x66, 0x6f, 0x72, 0x2f, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x2f, 0x61, 0x70, 0x70, 0x3a, 0x01, 0x2a, 0x12, 0x93, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x2f, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x3a, 0x01, 0x2a, 0x12, 0x87, 0x01,
	0x0a, 0x0b, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x15, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x3a, 0x01, 0x2a, 0x12, 0xae, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x79, 0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x35, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x79, 0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x79,
	0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74,
	0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2f, 0x62, 0x79, 0x2f, 0x61, 0x70, 0x70,
	0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0xa5, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x12,
	0x33, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x42, 0x79, 0x41,
	0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1e, 0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x62, 0x79, 0x2f, 0x61, 0x70, 0x70, 0x3a, 0x01, 0x2a,
	0x12, 0xba, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x42, 0x79, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x70, 0x70, 0x12, 0x38, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x42, 0x79, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x70, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x42,
	0x79, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x67,
	0x65, 0x74, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x62, 0x79,
	0x2f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x70, 0x3a, 0x01, 0x2a, 0x12, 0xa0, 0x01,
	0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x12, 0x32, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x3a, 0x01, 0x2a,
	0x12, 0xcf, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x12, 0x3d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x46, 0x6f,
	0x72, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x46, 0x6f, 0x72,
	0x4f, 0x74, 0x68, 0x65, 0x72, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x22, 0x25, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x2f, 0x66, 0x6f, 0x72, 0x2f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x70, 0x3a,
	0x01, 0x2a, 0x12, 0xa0, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x12, 0x32, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x94, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x12, 0x2f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x19, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0xe4, 0x01, 0x0a,
	0x21, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73,
	0x42, 0x79, 0x41, 0x70, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x42, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x41,
	0x70, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x30, 0x22, 0x2b, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x79, 0x2f, 0x61, 0x70,
	0x70, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x3a, 0x01, 0x2a, 0x12, 0xae, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x12, 0x35, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x42, 0x79,
	0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x21, 0x22, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x79, 0x2f, 0x61, 0x70,
	0x70, 0x3a, 0x01, 0x2a, 0x12, 0xc3, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x12, 0x3a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x4f,
	0x74, 0x68, 0x65, 0x72, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x69,
	0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x4f, 0x74, 0x68, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x27, 0x22, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x79, 0x2f, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x70, 0x3a, 0x01, 0x2a, 0x42, 0x3e, 0x5a, 0x3c, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e,
	0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x2d, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescOnce sync.Once
	file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescData = file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDesc
)

func file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescGZIP() []byte {
	file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescOnce.Do(func() {
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescData)
	})
	return file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDescData
}

var file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes = make([]protoimpl.MessageInfo, 185)
var file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_goTypes = []interface{}{
	(*NewUserRewardSetting)(nil),                            // 0: cloud.hashing.inspire.v1.NewUserRewardSetting
	(*CreateNewUserRewardSettingRequest)(nil),               // 1: cloud.hashing.inspire.v1.CreateNewUserRewardSettingRequest
	(*CreateNewUserRewardSettingResponse)(nil),              // 2: cloud.hashing.inspire.v1.CreateNewUserRewardSettingResponse
	(*GetNewUserRewardSettingRequest)(nil),                  // 3: cloud.hashing.inspire.v1.GetNewUserRewardSettingRequest
	(*GetNewUserRewardSettingResponse)(nil),                 // 4: cloud.hashing.inspire.v1.GetNewUserRewardSettingResponse
	(*GetNewUserRewardSettingByAppRequest)(nil),             // 5: cloud.hashing.inspire.v1.GetNewUserRewardSettingByAppRequest
	(*GetNewUserRewardSettingByAppResponse)(nil),            // 6: cloud.hashing.inspire.v1.GetNewUserRewardSettingByAppResponse
	(*UpdateNewUserRewardSettingRequest)(nil),               // 7: cloud.hashing.inspire.v1.UpdateNewUserRewardSettingRequest
	(*UpdateNewUserRewardSettingResponse)(nil),              // 8: cloud.hashing.inspire.v1.UpdateNewUserRewardSettingResponse
	(*AgencySetting)(nil),                                   // 9: cloud.hashing.inspire.v1.AgencySetting
	(*CreateAgencySettingRequest)(nil),                      // 10: cloud.hashing.inspire.v1.CreateAgencySettingRequest
	(*CreateAgencySettingResponse)(nil),                     // 11: cloud.hashing.inspire.v1.CreateAgencySettingResponse
	(*GetAgencySettingRequest)(nil),                         // 12: cloud.hashing.inspire.v1.GetAgencySettingRequest
	(*GetAgencySettingResponse)(nil),                        // 13: cloud.hashing.inspire.v1.GetAgencySettingResponse
	(*GetAgencySettingByAppRequest)(nil),                    // 14: cloud.hashing.inspire.v1.GetAgencySettingByAppRequest
	(*GetAgencySettingByAppResponse)(nil),                   // 15: cloud.hashing.inspire.v1.GetAgencySettingByAppResponse
	(*UpdateAgencySettingRequest)(nil),                      // 16: cloud.hashing.inspire.v1.UpdateAgencySettingRequest
	(*UpdateAgencySettingResponse)(nil),                     // 17: cloud.hashing.inspire.v1.UpdateAgencySettingResponse
	(*PurchaseInvitation)(nil),                              // 18: cloud.hashing.inspire.v1.PurchaseInvitation
	(*CreatePurchaseInvitationRequest)(nil),                 // 19: cloud.hashing.inspire.v1.CreatePurchaseInvitationRequest
	(*CreatePurchaseInvitationResponse)(nil),                // 20: cloud.hashing.inspire.v1.CreatePurchaseInvitationResponse
	(*UpdatePurchaseInvitationRequest)(nil),                 // 21: cloud.hashing.inspire.v1.UpdatePurchaseInvitationRequest
	(*UpdatePurchaseInvitationResponse)(nil),                // 22: cloud.hashing.inspire.v1.UpdatePurchaseInvitationResponse
	(*GetPurchaseInvitationRequest)(nil),                    // 23: cloud.hashing.inspire.v1.GetPurchaseInvitationRequest
	(*GetPurchaseInvitationResponse)(nil),                   // 24: cloud.hashing.inspire.v1.GetPurchaseInvitationResponse
	(*GetPurchaseInvitationsByAppRequest)(nil),              // 25: cloud.hashing.inspire.v1.GetPurchaseInvitationsByAppRequest
	(*GetPurchaseInvitationsByAppResponse)(nil),             // 26: cloud.hashing.inspire.v1.GetPurchaseInvitationsByAppResponse
	(*GetPurchaseInvitationByAppOrderRequest)(nil),          // 27: cloud.hashing.inspire.v1.GetPurchaseInvitationByAppOrderRequest
	(*GetPurchaseInvitationByAppOrderResponse)(nil),         // 28: cloud.hashing.inspire.v1.GetPurchaseInvitationByAppOrderResponse
	(*RegistrationInvitation)(nil),                          // 29: cloud.hashing.inspire.v1.RegistrationInvitation
	(*CreateRegistrationInvitationRequest)(nil),             // 30: cloud.hashing.inspire.v1.CreateRegistrationInvitationRequest
	(*CreateRegistrationInvitationResponse)(nil),            // 31: cloud.hashing.inspire.v1.CreateRegistrationInvitationResponse
	(*UpdateRegistrationInvitationRequest)(nil),             // 32: cloud.hashing.inspire.v1.UpdateRegistrationInvitationRequest
	(*UpdateRegistrationInvitationResponse)(nil),            // 33: cloud.hashing.inspire.v1.UpdateRegistrationInvitationResponse
	(*GetRegistrationInvitationRequest)(nil),                // 34: cloud.hashing.inspire.v1.GetRegistrationInvitationRequest
	(*GetRegistrationInvitationResponse)(nil),               // 35: cloud.hashing.inspire.v1.GetRegistrationInvitationResponse
	(*GetRegistrationInvitationsByAppRequest)(nil),          // 36: cloud.hashing.inspire.v1.GetRegistrationInvitationsByAppRequest
	(*GetRegistrationInvitationsByAppResponse)(nil),         // 37: cloud.hashing.inspire.v1.GetRegistrationInvitationsByAppResponse
	(*GetRegistrationInvitationsByAppInviterRequest)(nil),   // 38: cloud.hashing.inspire.v1.GetRegistrationInvitationsByAppInviterRequest
	(*GetRegistrationInvitationsByAppInviterResponse)(nil),  // 39: cloud.hashing.inspire.v1.GetRegistrationInvitationsByAppInviterResponse
	(*GetRegistrationInvitationByAppInviteeRequest)(nil),    // 40: cloud.hashing.inspire.v1.GetRegistrationInvitationByAppInviteeRequest
	(*GetRegistrationInvitationByAppInviteeResponse)(nil),   // 41: cloud.hashing.inspire.v1.GetRegistrationInvitationByAppInviteeResponse
	(*UserInvitationCode)(nil),                              // 42: cloud.hashing.inspire.v1.UserInvitationCode
	(*CreateUserInvitationCodeRequest)(nil),                 // 43: cloud.hashing.inspire.v1.CreateUserInvitationCodeRequest
	(*CreateUserInvitationCodeResponse)(nil),                // 44: cloud.hashing.inspire.v1.CreateUserInvitationCodeResponse
	(*CreateUserInvitationCodeForOtherAppUserRequest)(nil),  // 45: cloud.hashing.inspire.v1.CreateUserInvitationCodeForOtherAppUserRequest
	(*CreateUserInvitationCodeForOtherAppUserResponse)(nil), // 46: cloud.hashing.inspire.v1.CreateUserInvitationCodeForOtherAppUserResponse
	(*CreateUserInvitationCodeForAppOtherUserRequest)(nil),  // 47: cloud.hashing.inspire.v1.CreateUserInvitationCodeForAppOtherUserRequest
	(*CreateUserInvitationCodeForAppOtherUserResponse)(nil), // 48: cloud.hashing.inspire.v1.CreateUserInvitationCodeForAppOtherUserResponse
	(*GetUserInvitationCodeRequest)(nil),                    // 49: cloud.hashing.inspire.v1.GetUserInvitationCodeRequest
	(*GetUserInvitationCodeResponse)(nil),                   // 50: cloud.hashing.inspire.v1.GetUserInvitationCodeResponse
	(*GetUserInvitationCodeByAppUserRequest)(nil),           // 51: cloud.hashing.inspire.v1.GetUserInvitationCodeByAppUserRequest
	(*GetUserInvitationCodeByAppUserResponse)(nil),          // 52: cloud.hashing.inspire.v1.GetUserInvitationCodeByAppUserResponse
	(*GetUserInvitationCodesRequest)(nil),                   // 53: cloud.hashing.inspire.v1.GetUserInvitationCodesRequest
	(*GetUserInvitationCodesResponse)(nil),                  // 54: cloud.hashing.inspire.v1.GetUserInvitationCodesResponse
	(*GetUserInvitationCodesByAppRequest)(nil),              // 55: cloud.hashing.inspire.v1.GetUserInvitationCodesByAppRequest
	(*GetUserInvitationCodesByAppResponse)(nil),             // 56: cloud.hashing.inspire.v1.GetUserInvitationCodesByAppResponse
	(*GetUserInvitationCodesByOtherAppRequest)(nil),         // 57: cloud.hashing.inspire.v1.GetUserInvitationCodesByOtherAppRequest
	(*GetUserInvitationCodesByOtherAppResponse)(nil),        // 58: cloud.hashing.inspire.v1.GetUserInvitationCodesByOtherAppResponse
	(*GetUserInvitationCodeByCodeRequest)(nil),              // 59: cloud.hashing.inspire.v1.GetUserInvitationCodeByCodeRequest
	(*GetUserInvitationCodeByCodeResponse)(nil),             // 60: cloud.hashing.inspire.v1.GetUserInvitationCodeByCodeResponse
	(*CouponAllocated)(nil),                                 // 61: cloud.hashing.inspire.v1.CouponAllocated
	(*CreateCouponAllocatedRequest)(nil),                    // 62: cloud.hashing.inspire.v1.CreateCouponAllocatedRequest
	(*CreateCouponAllocatedResponse)(nil),                   // 63: cloud.hashing.inspire.v1.CreateCouponAllocatedResponse
	(*GetCouponAllocatedRequest)(nil),                       // 64: cloud.hashing.inspire.v1.GetCouponAllocatedRequest
	(*GetCouponAllocatedResponse)(nil),                      // 65: cloud.hashing.inspire.v1.GetCouponAllocatedResponse
	(*GetCouponsAllocatedByAppRequest)(nil),                 // 66: cloud.hashing.inspire.v1.GetCouponsAllocatedByAppRequest
	(*GetCouponsAllocatedByAppResponse)(nil),                // 67: cloud.hashing.inspire.v1.GetCouponsAllocatedByAppResponse
	(*GetCouponsAllocatedByAppUserRequest)(nil),             // 68: cloud.hashing.inspire.v1.GetCouponsAllocatedByAppUserRequest
	(*GetCouponsAllocatedByAppUserResponse)(nil),            // 69: cloud.hashing.inspire.v1.GetCouponsAllocatedByAppUserResponse
	(*UpdateCouponAllocatedRequest)(nil),                    // 70: cloud.hashing.inspire.v1.UpdateCouponAllocatedRequest
	(*UpdateCouponAllocatedResponse)(nil),                   // 71: cloud.hashing.inspire.v1.UpdateCouponAllocatedResponse
	(*CouponPool)(nil),                                      // 72: cloud.hashing.inspire.v1.CouponPool
	(*CreateCouponPoolRequest)(nil),                         // 73: cloud.hashing.inspire.v1.CreateCouponPoolRequest
	(*CreateCouponPoolResponse)(nil),                        // 74: cloud.hashing.inspire.v1.CreateCouponPoolResponse
	(*CreateCouponPoolForOtherAppRequest)(nil),              // 75: cloud.hashing.inspire.v1.CreateCouponPoolForOtherAppRequest
	(*CreateCouponPoolForOtherAppResponse)(nil),             // 76: cloud.hashing.inspire.v1.CreateCouponPoolForOtherAppResponse
	(*UpdateCouponPoolRequest)(nil),                         // 77: cloud.hashing.inspire.v1.UpdateCouponPoolRequest
	(*UpdateCouponPoolResponse)(nil),                        // 78: cloud.hashing.inspire.v1.UpdateCouponPoolResponse
	(*GetCouponPoolRequest)(nil),                            // 79: cloud.hashing.inspire.v1.GetCouponPoolRequest
	(*GetCouponPoolResponse)(nil),                           // 80: cloud.hashing.inspire.v1.GetCouponPoolResponse
	(*GetCouponPoolsByAppRequest)(nil),                      // 81: cloud.hashing.inspire.v1.GetCouponPoolsByAppRequest
	(*GetCouponPoolsByAppResponse)(nil),                     // 82: cloud.hashing.inspire.v1.GetCouponPoolsByAppResponse
	(*GetCouponPoolsByOtherAppRequest)(nil),                 // 83: cloud.hashing.inspire.v1.GetCouponPoolsByOtherAppRequest
	(*GetCouponPoolsByOtherAppResponse)(nil),                // 84: cloud.hashing.inspire.v1.GetCouponPoolsByOtherAppResponse
	(*GetCouponPoolsByAppReleaserRequest)(nil),              // 85: cloud.hashing.inspire.v1.GetCouponPoolsByAppReleaserRequest
	(*GetCouponPoolsByAppReleaserResponse)(nil),             // 86: cloud.hashing.inspire.v1.GetCouponPoolsByAppReleaserResponse
	(*GetCouponPoolsByOtherAppReleaserRequest)(nil),         // 87: cloud.hashing.inspire.v1.GetCouponPoolsByOtherAppReleaserRequest
	(*GetCouponPoolsByOtherAppReleaserResponse)(nil),        // 88: cloud.hashing.inspire.v1.GetCouponPoolsByOtherAppReleaserResponse
	(*NewUserRewardSettingDetail)(nil),                      // 89: cloud.hashing.inspire.v1.NewUserRewardSettingDetail
	(*GetNewUserRewardSettingDetailRequest)(nil),            // 90: cloud.hashing.inspire.v1.GetNewUserRewardSettingDetailRequest
	(*GetNewUserRewardSettingDetailResponse)(nil),           // 91: cloud.hashing.inspire.v1.GetNewUserRewardSettingDetailResponse
	(*AppCouponSetting)(nil),                                // 92: cloud.hashing.inspire.v1.AppCouponSetting
	(*CreateAppCouponSettingRequest)(nil),                   // 93: cloud.hashing.inspire.v1.CreateAppCouponSettingRequest
	(*CreateAppCouponSettingResponse)(nil),                  // 94: cloud.hashing.inspire.v1.CreateAppCouponSettingResponse
	(*GetAppCouponSettingRequest)(nil),                      // 95: cloud.hashing.inspire.v1.GetAppCouponSettingRequest
	(*GetAppCouponSettingResponse)(nil),                     // 96: cloud.hashing.inspire.v1.GetAppCouponSettingResponse
	(*GetAppCouponSettingByAppRequest)(nil),                 // 97: cloud.hashing.inspire.v1.GetAppCouponSettingByAppRequest
	(*GetAppCouponSettingByAppResponse)(nil),                // 98: cloud.hashing.inspire.v1.GetAppCouponSettingByAppResponse
	(*UpdateAppCouponSettingRequest)(nil),                   // 99: cloud.hashing.inspire.v1.UpdateAppCouponSettingRequest
	(*UpdateAppCouponSettingResponse)(nil),                  // 100: cloud.hashing.inspire.v1.UpdateAppCouponSettingResponse
	(*DefaultKpiSetting)(nil),                               // 101: cloud.hashing.inspire.v1.DefaultKpiSetting
	(*CreateDefaultKpiSettingRequest)(nil),                  // 102: cloud.hashing.inspire.v1.CreateDefaultKpiSettingRequest
	(*CreateDefaultKpiSettingResponse)(nil),                 // 103: cloud.hashing.inspire.v1.CreateDefaultKpiSettingResponse
	(*GetDefaultKpiSettingRequest)(nil),                     // 104: cloud.hashing.inspire.v1.GetDefaultKpiSettingRequest
	(*GetDefaultKpiSettingResponse)(nil),                    // 105: cloud.hashing.inspire.v1.GetDefaultKpiSettingResponse
	(*GetDefaultKpiSettingByAppGoodRequest)(nil),            // 106: cloud.hashing.inspire.v1.GetDefaultKpiSettingByAppGoodRequest
	(*GetDefaultKpiSettingByAppGoodResponse)(nil),           // 107: cloud.hashing.inspire.v1.GetDefaultKpiSettingByAppGoodResponse
	(*UpdateDefaultKpiSettingRequest)(nil),                  // 108: cloud.hashing.inspire.v1.UpdateDefaultKpiSettingRequest
	(*UpdateDefaultKpiSettingResponse)(nil),                 // 109: cloud.hashing.inspire.v1.UpdateDefaultKpiSettingResponse
	(*UserKpiSetting)(nil),                                  // 110: cloud.hashing.inspire.v1.UserKpiSetting
	(*CreateUserKpiSettingRequest)(nil),                     // 111: cloud.hashing.inspire.v1.CreateUserKpiSettingRequest
	(*CreateUserKpiSettingResponse)(nil),                    // 112: cloud.hashing.inspire.v1.CreateUserKpiSettingResponse
	(*GetUserKpiSettingRequest)(nil),                        // 113: cloud.hashing.inspire.v1.GetUserKpiSettingRequest
	(*GetUserKpiSettingResponse)(nil),                       // 114: cloud.hashing.inspire.v1.GetUserKpiSettingResponse
	(*GetUserKpiSettingByAppGoodRequest)(nil),               // 115: cloud.hashing.inspire.v1.GetUserKpiSettingByAppGoodRequest
	(*GetUserKpiSettingByAppGoodResponse)(nil),              // 116: cloud.hashing.inspire.v1.GetUserKpiSettingByAppGoodResponse
	(*UpdateUserKpiSettingRequest)(nil),                     // 117: cloud.hashing.inspire.v1.UpdateUserKpiSettingRequest
	(*UpdateUserKpiSettingResponse)(nil),                    // 118: cloud.hashing.inspire.v1.UpdateUserKpiSettingResponse
	(*AgencySettingDetail)(nil),                             // 119: cloud.hashing.inspire.v1.AgencySettingDetail
	(*GetAgencySettingDetailRequest)(nil),                   // 120: cloud.hashing.inspire.v1.GetAgencySettingDetailRequest
	(*GetAgencySettingDetailResponse)(nil),                  // 121: cloud.hashing.inspire.v1.GetAgencySettingDetailResponse
	(*GetAgencySettingDetailByAppRequest)(nil),              // 122: cloud.hashing.inspire.v1.GetAgencySettingDetailByAppRequest
	(*GetAgencySettingDetailByAppResponse)(nil),             // 123: cloud.hashing.inspire.v1.GetAgencySettingDetailByAppResponse
	(*CouponAllocatedDetail)(nil),                           // 124: cloud.hashing.inspire.v1.CouponAllocatedDetail
	(*GetCouponAllocatedDetailRequest)(nil),                 // 125: cloud.hashing.inspire.v1.GetCouponAllocatedDetailRequest
	(*GetCouponAllocatedDetailResponse)(nil),                // 126: cloud.hashing.inspire.v1.GetCouponAllocatedDetailResponse
	(*GetCouponsAllocatedDetailByAppRequest)(nil),           // 127: cloud.hashing.inspire.v1.GetCouponsAllocatedDetailByAppRequest
	(*GetCouponsAllocatedDetailByAppResponse)(nil),          // 128: cloud.hashing.inspire.v1.GetCouponsAllocatedDetailByAppResponse
	(*GetCouponsAllocatedDetailByAppUserRequest)(nil),       // 129: cloud.hashing.inspire.v1.GetCouponsAllocatedDetailByAppUserRequest
	(*GetCouponsAllocatedDetailByAppUserResponse)(nil),      // 130: cloud.hashing.inspire.v1.GetCouponsAllocatedDetailByAppUserResponse
	(*DiscountPool)(nil),                                    // 131: cloud.hashing.inspire.v1.DiscountPool
	(*CreateDiscountPoolRequest)(nil),                       // 132: cloud.hashing.inspire.v1.CreateDiscountPoolRequest
	(*CreateDiscountPoolResponse)(nil),                      // 133: cloud.hashing.inspire.v1.CreateDiscountPoolResponse
	(*UpdateDiscountPoolRequest)(nil),                       // 134: cloud.hashing.inspire.v1.UpdateDiscountPoolRequest
	(*UpdateDiscountPoolResponse)(nil),                      // 135: cloud.hashing.inspire.v1.UpdateDiscountPoolResponse
	(*GetDiscountPoolRequest)(nil),                          // 136: cloud.hashing.inspire.v1.GetDiscountPoolRequest
	(*GetDiscountPoolResponse)(nil),                         // 137: cloud.hashing.inspire.v1.GetDiscountPoolResponse
	(*GetDiscountPoolsByAppRequest)(nil),                    // 138: cloud.hashing.inspire.v1.GetDiscountPoolsByAppRequest
	(*GetDiscountPoolsByAppResponse)(nil),                   // 139: cloud.hashing.inspire.v1.GetDiscountPoolsByAppResponse
	(*GetDiscountPoolsByAppReleaserRequest)(nil),            // 140: cloud.hashing.inspire.v1.GetDiscountPoolsByAppReleaserRequest
	(*GetDiscountPoolsByAppReleaserResponse)(nil),           // 141: cloud.hashing.inspire.v1.GetDiscountPoolsByAppReleaserResponse
	(*UserSpecialReduction)(nil),                            // 142: cloud.hashing.inspire.v1.UserSpecialReduction
	(*CreateUserSpecialReductionRequest)(nil),               // 143: cloud.hashing.inspire.v1.CreateUserSpecialReductionRequest
	(*CreateUserSpecialReductionResponse)(nil),              // 144: cloud.hashing.inspire.v1.CreateUserSpecialReductionResponse
	(*GetUserSpecialReductionRequest)(nil),                  // 145: cloud.hashing.inspire.v1.GetUserSpecialReductionRequest
	(*GetUserSpecialReductionResponse)(nil),                 // 146: cloud.hashing.inspire.v1.GetUserSpecialReductionResponse
	(*GetUserSpecialReductionsByAppRequest)(nil),            // 147: cloud.hashing.inspire.v1.GetUserSpecialReductionsByAppRequest
	(*GetUserSpecialReductionsByAppResponse)(nil),           // 148: cloud.hashing.inspire.v1.GetUserSpecialReductionsByAppResponse
	(*GetUserSpecialReductionsByAppUserRequest)(nil),        // 149: cloud.hashing.inspire.v1.GetUserSpecialReductionsByAppUserRequest
	(*GetUserSpecialReductionsByAppUserResponse)(nil),       // 150: cloud.hashing.inspire.v1.GetUserSpecialReductionsByAppUserResponse
	(*UpdateUserSpecialReductionRequest)(nil),               // 151: cloud.hashing.inspire.v1.UpdateUserSpecialReductionRequest
	(*UpdateUserSpecialReductionResponse)(nil),              // 152: cloud.hashing.inspire.v1.UpdateUserSpecialReductionResponse
	(*GetUserSpecialReductionsByAppReleaserRequest)(nil),    // 153: cloud.hashing.inspire.v1.GetUserSpecialReductionsByAppReleaserRequest
	(*GetUserSpecialReductionsByAppReleaserResponse)(nil),   // 154: cloud.hashing.inspire.v1.GetUserSpecialReductionsByAppReleaserResponse
	(*Activity)(nil),                                        // 155: cloud.hashing.inspire.v1.Activity
	(*CreateActivityRequest)(nil),                           // 156: cloud.hashing.inspire.v1.CreateActivityRequest
	(*CreateActivityResponse)(nil),                          // 157: cloud.hashing.inspire.v1.CreateActivityResponse
	(*UpdateActivityRequest)(nil),                           // 158: cloud.hashing.inspire.v1.UpdateActivityRequest
	(*UpdateActivityResponse)(nil),                          // 159: cloud.hashing.inspire.v1.UpdateActivityResponse
	(*CreateActivityForOtherAppRequest)(nil),                // 160: cloud.hashing.inspire.v1.CreateActivityForOtherAppRequest
	(*CreateActivityForOtherAppResponse)(nil),               // 161: cloud.hashing.inspire.v1.CreateActivityForOtherAppResponse
	(*GetActivityRequest)(nil),                              // 162: cloud.hashing.inspire.v1.GetActivityRequest
	(*GetActivityResponse)(nil),                             // 163: cloud.hashing.inspire.v1.GetActivityResponse
	(*GetActivityByAppNameRequest)(nil),                     // 164: cloud.hashing.inspire.v1.GetActivityByAppNameRequest
	(*GetActivityByAppNameResponse)(nil),                    // 165: cloud.hashing.inspire.v1.GetActivityByAppNameResponse
	(*GetActivitiesByAppRequest)(nil),                       // 166: cloud.hashing.inspire.v1.GetActivitiesByAppRequest
	(*GetActivitiesByAppResponse)(nil),                      // 167: cloud.hashing.inspire.v1.GetActivitiesByAppResponse
	(*GetActivitiesByOtherAppRequest)(nil),                  // 168: cloud.hashing.inspire.v1.GetActivitiesByOtherAppRequest
	(*GetActivitiesByOtherAppResponse)(nil),                 // 169: cloud.hashing.inspire.v1.GetActivitiesByOtherAppResponse
	(*EventCoupon)(nil),                                     // 170: cloud.hashing.inspire.v1.EventCoupon
	(*CreateEventCouponRequest)(nil),                        // 171: cloud.hashing.inspire.v1.CreateEventCouponRequest
	(*CreateEventCouponResponse)(nil),                       // 172: cloud.hashing.inspire.v1.CreateEventCouponResponse
	(*CreateEventCouponForOtherAppRequest)(nil),             // 173: cloud.hashing.inspire.v1.CreateEventCouponForOtherAppRequest
	(*CreateEventCouponForOtherAppResponse)(nil),            // 174: cloud.hashing.inspire.v1.CreateEventCouponForOtherAppResponse
	(*UpdateEventCouponRequest)(nil),                        // 175: cloud.hashing.inspire.v1.UpdateEventCouponRequest
	(*UpdateEventCouponResponse)(nil),                       // 176: cloud.hashing.inspire.v1.UpdateEventCouponResponse
	(*GetEventCouponRequest)(nil),                           // 177: cloud.hashing.inspire.v1.GetEventCouponRequest
	(*GetEventCouponResponse)(nil),                          // 178: cloud.hashing.inspire.v1.GetEventCouponResponse
	(*GetEventCouponsByAppActivityEventRequest)(nil),        // 179: cloud.hashing.inspire.v1.GetEventCouponsByAppActivityEventRequest
	(*GetEventCouponsByAppActivityEventResponse)(nil),       // 180: cloud.hashing.inspire.v1.GetEventCouponsByAppActivityEventResponse
	(*GetEventCouponsByAppRequest)(nil),                     // 181: cloud.hashing.inspire.v1.GetEventCouponsByAppRequest
	(*GetEventCouponsByAppResponse)(nil),                    // 182: cloud.hashing.inspire.v1.GetEventCouponsByAppResponse
	(*GetEventCouponsByOtherAppRequest)(nil),                // 183: cloud.hashing.inspire.v1.GetEventCouponsByOtherAppRequest
	(*GetEventCouponsByOtherAppResponse)(nil),               // 184: cloud.hashing.inspire.v1.GetEventCouponsByOtherAppResponse
	(*emptypb.Empty)(nil),                                   // 185: google.protobuf.Empty
	(*npool.VersionResponse)(nil),                           // 186: npool.v1.VersionResponse
}
var file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_depIdxs = []int32{
	0,   // 0: cloud.hashing.inspire.v1.CreateNewUserRewardSettingRequest.Info:type_name -> cloud.hashing.inspire.v1.NewUserRewardSetting
	0,   // 1: cloud.hashing.inspire.v1.CreateNewUserRewardSettingResponse.Info:type_name -> cloud.hashing.inspire.v1.NewUserRewardSetting
	0,   // 2: cloud.hashing.inspire.v1.GetNewUserRewardSettingResponse.Info:type_name -> cloud.hashing.inspire.v1.NewUserRewardSetting
	0,   // 3: cloud.hashing.inspire.v1.GetNewUserRewardSettingByAppResponse.Info:type_name -> cloud.hashing.inspire.v1.NewUserRewardSetting
	0,   // 4: cloud.hashing.inspire.v1.UpdateNewUserRewardSettingRequest.Info:type_name -> cloud.hashing.inspire.v1.NewUserRewardSetting
	0,   // 5: cloud.hashing.inspire.v1.UpdateNewUserRewardSettingResponse.Info:type_name -> cloud.hashing.inspire.v1.NewUserRewardSetting
	9,   // 6: cloud.hashing.inspire.v1.CreateAgencySettingRequest.Info:type_name -> cloud.hashing.inspire.v1.AgencySetting
	9,   // 7: cloud.hashing.inspire.v1.CreateAgencySettingResponse.Info:type_name -> cloud.hashing.inspire.v1.AgencySetting
	9,   // 8: cloud.hashing.inspire.v1.GetAgencySettingResponse.Info:type_name -> cloud.hashing.inspire.v1.AgencySetting
	9,   // 9: cloud.hashing.inspire.v1.GetAgencySettingByAppResponse.Info:type_name -> cloud.hashing.inspire.v1.AgencySetting
	9,   // 10: cloud.hashing.inspire.v1.UpdateAgencySettingRequest.Info:type_name -> cloud.hashing.inspire.v1.AgencySetting
	9,   // 11: cloud.hashing.inspire.v1.UpdateAgencySettingResponse.Info:type_name -> cloud.hashing.inspire.v1.AgencySetting
	18,  // 12: cloud.hashing.inspire.v1.CreatePurchaseInvitationRequest.Info:type_name -> cloud.hashing.inspire.v1.PurchaseInvitation
	18,  // 13: cloud.hashing.inspire.v1.CreatePurchaseInvitationResponse.Info:type_name -> cloud.hashing.inspire.v1.PurchaseInvitation
	18,  // 14: cloud.hashing.inspire.v1.UpdatePurchaseInvitationRequest.Info:type_name -> cloud.hashing.inspire.v1.PurchaseInvitation
	18,  // 15: cloud.hashing.inspire.v1.UpdatePurchaseInvitationResponse.Info:type_name -> cloud.hashing.inspire.v1.PurchaseInvitation
	18,  // 16: cloud.hashing.inspire.v1.GetPurchaseInvitationResponse.Info:type_name -> cloud.hashing.inspire.v1.PurchaseInvitation
	18,  // 17: cloud.hashing.inspire.v1.GetPurchaseInvitationsByAppResponse.Infos:type_name -> cloud.hashing.inspire.v1.PurchaseInvitation
	18,  // 18: cloud.hashing.inspire.v1.GetPurchaseInvitationByAppOrderResponse.Info:type_name -> cloud.hashing.inspire.v1.PurchaseInvitation
	29,  // 19: cloud.hashing.inspire.v1.CreateRegistrationInvitationRequest.Info:type_name -> cloud.hashing.inspire.v1.RegistrationInvitation
	29,  // 20: cloud.hashing.inspire.v1.CreateRegistrationInvitationResponse.Info:type_name -> cloud.hashing.inspire.v1.RegistrationInvitation
	29,  // 21: cloud.hashing.inspire.v1.UpdateRegistrationInvitationRequest.Info:type_name -> cloud.hashing.inspire.v1.RegistrationInvitation
	29,  // 22: cloud.hashing.inspire.v1.UpdateRegistrationInvitationResponse.Info:type_name -> cloud.hashing.inspire.v1.RegistrationInvitation
	29,  // 23: cloud.hashing.inspire.v1.GetRegistrationInvitationResponse.Info:type_name -> cloud.hashing.inspire.v1.RegistrationInvitation
	29,  // 24: cloud.hashing.inspire.v1.GetRegistrationInvitationsByAppResponse.Infos:type_name -> cloud.hashing.inspire.v1.RegistrationInvitation
	29,  // 25: cloud.hashing.inspire.v1.GetRegistrationInvitationsByAppInviterResponse.Infos:type_name -> cloud.hashing.inspire.v1.RegistrationInvitation
	29,  // 26: cloud.hashing.inspire.v1.GetRegistrationInvitationByAppInviteeResponse.Info:type_name -> cloud.hashing.inspire.v1.RegistrationInvitation
	42,  // 27: cloud.hashing.inspire.v1.CreateUserInvitationCodeRequest.Info:type_name -> cloud.hashing.inspire.v1.UserInvitationCode
	42,  // 28: cloud.hashing.inspire.v1.CreateUserInvitationCodeResponse.Info:type_name -> cloud.hashing.inspire.v1.UserInvitationCode
	42,  // 29: cloud.hashing.inspire.v1.CreateUserInvitationCodeForOtherAppUserRequest.Info:type_name -> cloud.hashing.inspire.v1.UserInvitationCode
	42,  // 30: cloud.hashing.inspire.v1.CreateUserInvitationCodeForOtherAppUserResponse.Info:type_name -> cloud.hashing.inspire.v1.UserInvitationCode
	42,  // 31: cloud.hashing.inspire.v1.CreateUserInvitationCodeForAppOtherUserRequest.Info:type_name -> cloud.hashing.inspire.v1.UserInvitationCode
	42,  // 32: cloud.hashing.inspire.v1.CreateUserInvitationCodeForAppOtherUserResponse.Info:type_name -> cloud.hashing.inspire.v1.UserInvitationCode
	42,  // 33: cloud.hashing.inspire.v1.GetUserInvitationCodeResponse.Info:type_name -> cloud.hashing.inspire.v1.UserInvitationCode
	42,  // 34: cloud.hashing.inspire.v1.GetUserInvitationCodeByAppUserResponse.Info:type_name -> cloud.hashing.inspire.v1.UserInvitationCode
	42,  // 35: cloud.hashing.inspire.v1.GetUserInvitationCodesResponse.Infos:type_name -> cloud.hashing.inspire.v1.UserInvitationCode
	42,  // 36: cloud.hashing.inspire.v1.GetUserInvitationCodesByAppResponse.Infos:type_name -> cloud.hashing.inspire.v1.UserInvitationCode
	42,  // 37: cloud.hashing.inspire.v1.GetUserInvitationCodesByOtherAppResponse.Infos:type_name -> cloud.hashing.inspire.v1.UserInvitationCode
	42,  // 38: cloud.hashing.inspire.v1.GetUserInvitationCodeByCodeResponse.Info:type_name -> cloud.hashing.inspire.v1.UserInvitationCode
	61,  // 39: cloud.hashing.inspire.v1.CreateCouponAllocatedRequest.Info:type_name -> cloud.hashing.inspire.v1.CouponAllocated
	61,  // 40: cloud.hashing.inspire.v1.CreateCouponAllocatedResponse.Info:type_name -> cloud.hashing.inspire.v1.CouponAllocated
	61,  // 41: cloud.hashing.inspire.v1.GetCouponAllocatedResponse.Info:type_name -> cloud.hashing.inspire.v1.CouponAllocated
	61,  // 42: cloud.hashing.inspire.v1.GetCouponsAllocatedByAppResponse.Infos:type_name -> cloud.hashing.inspire.v1.CouponAllocated
	61,  // 43: cloud.hashing.inspire.v1.GetCouponsAllocatedByAppUserResponse.Infos:type_name -> cloud.hashing.inspire.v1.CouponAllocated
	61,  // 44: cloud.hashing.inspire.v1.UpdateCouponAllocatedRequest.Info:type_name -> cloud.hashing.inspire.v1.CouponAllocated
	61,  // 45: cloud.hashing.inspire.v1.UpdateCouponAllocatedResponse.Info:type_name -> cloud.hashing.inspire.v1.CouponAllocated
	72,  // 46: cloud.hashing.inspire.v1.CreateCouponPoolRequest.Info:type_name -> cloud.hashing.inspire.v1.CouponPool
	72,  // 47: cloud.hashing.inspire.v1.CreateCouponPoolResponse.Info:type_name -> cloud.hashing.inspire.v1.CouponPool
	72,  // 48: cloud.hashing.inspire.v1.CreateCouponPoolForOtherAppRequest.Info:type_name -> cloud.hashing.inspire.v1.CouponPool
	72,  // 49: cloud.hashing.inspire.v1.CreateCouponPoolForOtherAppResponse.Info:type_name -> cloud.hashing.inspire.v1.CouponPool
	72,  // 50: cloud.hashing.inspire.v1.UpdateCouponPoolRequest.Info:type_name -> cloud.hashing.inspire.v1.CouponPool
	72,  // 51: cloud.hashing.inspire.v1.UpdateCouponPoolResponse.Info:type_name -> cloud.hashing.inspire.v1.CouponPool
	72,  // 52: cloud.hashing.inspire.v1.GetCouponPoolResponse.Info:type_name -> cloud.hashing.inspire.v1.CouponPool
	72,  // 53: cloud.hashing.inspire.v1.GetCouponPoolsByAppResponse.Infos:type_name -> cloud.hashing.inspire.v1.CouponPool
	72,  // 54: cloud.hashing.inspire.v1.GetCouponPoolsByOtherAppResponse.Infos:type_name -> cloud.hashing.inspire.v1.CouponPool
	72,  // 55: cloud.hashing.inspire.v1.GetCouponPoolsByAppReleaserResponse.Infos:type_name -> cloud.hashing.inspire.v1.CouponPool
	72,  // 56: cloud.hashing.inspire.v1.GetCouponPoolsByOtherAppReleaserResponse.Infos:type_name -> cloud.hashing.inspire.v1.CouponPool
	72,  // 57: cloud.hashing.inspire.v1.NewUserRewardSettingDetail.RegistrationCoupon:type_name -> cloud.hashing.inspire.v1.CouponPool
	72,  // 58: cloud.hashing.inspire.v1.NewUserRewardSettingDetail.KycCoupon:type_name -> cloud.hashing.inspire.v1.CouponPool
	89,  // 59: cloud.hashing.inspire.v1.GetNewUserRewardSettingDetailResponse.Info:type_name -> cloud.hashing.inspire.v1.NewUserRewardSettingDetail
	92,  // 60: cloud.hashing.inspire.v1.CreateAppCouponSettingRequest.Info:type_name -> cloud.hashing.inspire.v1.AppCouponSetting
	92,  // 61: cloud.hashing.inspire.v1.CreateAppCouponSettingResponse.Info:type_name -> cloud.hashing.inspire.v1.AppCouponSetting
	92,  // 62: cloud.hashing.inspire.v1.GetAppCouponSettingResponse.Info:type_name -> cloud.hashing.inspire.v1.AppCouponSetting
	92,  // 63: cloud.hashing.inspire.v1.GetAppCouponSettingByAppResponse.Info:type_name -> cloud.hashing.inspire.v1.AppCouponSetting
	92,  // 64: cloud.hashing.inspire.v1.UpdateAppCouponSettingRequest.Info:type_name -> cloud.hashing.inspire.v1.AppCouponSetting
	92,  // 65: cloud.hashing.inspire.v1.UpdateAppCouponSettingResponse.Info:type_name -> cloud.hashing.inspire.v1.AppCouponSetting
	101, // 66: cloud.hashing.inspire.v1.CreateDefaultKpiSettingRequest.Info:type_name -> cloud.hashing.inspire.v1.DefaultKpiSetting
	101, // 67: cloud.hashing.inspire.v1.CreateDefaultKpiSettingResponse.Info:type_name -> cloud.hashing.inspire.v1.DefaultKpiSetting
	101, // 68: cloud.hashing.inspire.v1.GetDefaultKpiSettingResponse.Info:type_name -> cloud.hashing.inspire.v1.DefaultKpiSetting
	101, // 69: cloud.hashing.inspire.v1.GetDefaultKpiSettingByAppGoodResponse.Info:type_name -> cloud.hashing.inspire.v1.DefaultKpiSetting
	101, // 70: cloud.hashing.inspire.v1.UpdateDefaultKpiSettingRequest.Info:type_name -> cloud.hashing.inspire.v1.DefaultKpiSetting
	101, // 71: cloud.hashing.inspire.v1.UpdateDefaultKpiSettingResponse.Info:type_name -> cloud.hashing.inspire.v1.DefaultKpiSetting
	110, // 72: cloud.hashing.inspire.v1.CreateUserKpiSettingRequest.Info:type_name -> cloud.hashing.inspire.v1.UserKpiSetting
	110, // 73: cloud.hashing.inspire.v1.CreateUserKpiSettingResponse.Info:type_name -> cloud.hashing.inspire.v1.UserKpiSetting
	110, // 74: cloud.hashing.inspire.v1.GetUserKpiSettingResponse.Info:type_name -> cloud.hashing.inspire.v1.UserKpiSetting
	110, // 75: cloud.hashing.inspire.v1.GetUserKpiSettingByAppGoodResponse.Info:type_name -> cloud.hashing.inspire.v1.UserKpiSetting
	110, // 76: cloud.hashing.inspire.v1.UpdateUserKpiSettingRequest.Info:type_name -> cloud.hashing.inspire.v1.UserKpiSetting
	110, // 77: cloud.hashing.inspire.v1.UpdateUserKpiSettingResponse.Info:type_name -> cloud.hashing.inspire.v1.UserKpiSetting
	72,  // 78: cloud.hashing.inspire.v1.AgencySettingDetail.RegistrationCoupon:type_name -> cloud.hashing.inspire.v1.CouponPool
	72,  // 79: cloud.hashing.inspire.v1.AgencySettingDetail.KycCoupon:type_name -> cloud.hashing.inspire.v1.CouponPool
	119, // 80: cloud.hashing.inspire.v1.GetAgencySettingDetailResponse.Info:type_name -> cloud.hashing.inspire.v1.AgencySettingDetail
	119, // 81: cloud.hashing.inspire.v1.GetAgencySettingDetailByAppResponse.Info:type_name -> cloud.hashing.inspire.v1.AgencySettingDetail
	72,  // 82: cloud.hashing.inspire.v1.CouponAllocatedDetail.Coupon:type_name -> cloud.hashing.inspire.v1.CouponPool
	131, // 83: cloud.hashing.inspire.v1.CouponAllocatedDetail.Discount:type_name -> cloud.hashing.inspire.v1.DiscountPool
	124, // 84: cloud.hashing.inspire.v1.GetCouponAllocatedDetailResponse.Info:type_name -> cloud.hashing.inspire.v1.CouponAllocatedDetail
	124, // 85: cloud.hashing.inspire.v1.GetCouponsAllocatedDetailByAppResponse.Infos:type_name -> cloud.hashing.inspire.v1.CouponAllocatedDetail
	124, // 86: cloud.hashing.inspire.v1.GetCouponsAllocatedDetailByAppUserResponse.Infos:type_name -> cloud.hashing.inspire.v1.CouponAllocatedDetail
	131, // 87: cloud.hashing.inspire.v1.CreateDiscountPoolRequest.Info:type_name -> cloud.hashing.inspire.v1.DiscountPool
	131, // 88: cloud.hashing.inspire.v1.CreateDiscountPoolResponse.Info:type_name -> cloud.hashing.inspire.v1.DiscountPool
	131, // 89: cloud.hashing.inspire.v1.UpdateDiscountPoolRequest.Info:type_name -> cloud.hashing.inspire.v1.DiscountPool
	131, // 90: cloud.hashing.inspire.v1.UpdateDiscountPoolResponse.Info:type_name -> cloud.hashing.inspire.v1.DiscountPool
	131, // 91: cloud.hashing.inspire.v1.GetDiscountPoolResponse.Info:type_name -> cloud.hashing.inspire.v1.DiscountPool
	131, // 92: cloud.hashing.inspire.v1.GetDiscountPoolsByAppResponse.Infos:type_name -> cloud.hashing.inspire.v1.DiscountPool
	131, // 93: cloud.hashing.inspire.v1.GetDiscountPoolsByAppReleaserResponse.Infos:type_name -> cloud.hashing.inspire.v1.DiscountPool
	142, // 94: cloud.hashing.inspire.v1.CreateUserSpecialReductionRequest.Info:type_name -> cloud.hashing.inspire.v1.UserSpecialReduction
	142, // 95: cloud.hashing.inspire.v1.CreateUserSpecialReductionResponse.Info:type_name -> cloud.hashing.inspire.v1.UserSpecialReduction
	142, // 96: cloud.hashing.inspire.v1.GetUserSpecialReductionResponse.Info:type_name -> cloud.hashing.inspire.v1.UserSpecialReduction
	142, // 97: cloud.hashing.inspire.v1.GetUserSpecialReductionsByAppResponse.Infos:type_name -> cloud.hashing.inspire.v1.UserSpecialReduction
	142, // 98: cloud.hashing.inspire.v1.GetUserSpecialReductionsByAppUserResponse.Infos:type_name -> cloud.hashing.inspire.v1.UserSpecialReduction
	142, // 99: cloud.hashing.inspire.v1.UpdateUserSpecialReductionRequest.Info:type_name -> cloud.hashing.inspire.v1.UserSpecialReduction
	142, // 100: cloud.hashing.inspire.v1.UpdateUserSpecialReductionResponse.Info:type_name -> cloud.hashing.inspire.v1.UserSpecialReduction
	142, // 101: cloud.hashing.inspire.v1.GetUserSpecialReductionsByAppReleaserResponse.Infos:type_name -> cloud.hashing.inspire.v1.UserSpecialReduction
	155, // 102: cloud.hashing.inspire.v1.CreateActivityRequest.Info:type_name -> cloud.hashing.inspire.v1.Activity
	155, // 103: cloud.hashing.inspire.v1.CreateActivityResponse.Info:type_name -> cloud.hashing.inspire.v1.Activity
	155, // 104: cloud.hashing.inspire.v1.UpdateActivityRequest.Info:type_name -> cloud.hashing.inspire.v1.Activity
	155, // 105: cloud.hashing.inspire.v1.UpdateActivityResponse.Info:type_name -> cloud.hashing.inspire.v1.Activity
	155, // 106: cloud.hashing.inspire.v1.CreateActivityForOtherAppRequest.Info:type_name -> cloud.hashing.inspire.v1.Activity
	155, // 107: cloud.hashing.inspire.v1.CreateActivityForOtherAppResponse.Info:type_name -> cloud.hashing.inspire.v1.Activity
	155, // 108: cloud.hashing.inspire.v1.GetActivityResponse.Info:type_name -> cloud.hashing.inspire.v1.Activity
	155, // 109: cloud.hashing.inspire.v1.GetActivityByAppNameResponse.Info:type_name -> cloud.hashing.inspire.v1.Activity
	155, // 110: cloud.hashing.inspire.v1.GetActivitiesByAppResponse.Infos:type_name -> cloud.hashing.inspire.v1.Activity
	155, // 111: cloud.hashing.inspire.v1.GetActivitiesByOtherAppResponse.Infos:type_name -> cloud.hashing.inspire.v1.Activity
	170, // 112: cloud.hashing.inspire.v1.CreateEventCouponRequest.Info:type_name -> cloud.hashing.inspire.v1.EventCoupon
	170, // 113: cloud.hashing.inspire.v1.CreateEventCouponResponse.Info:type_name -> cloud.hashing.inspire.v1.EventCoupon
	170, // 114: cloud.hashing.inspire.v1.CreateEventCouponForOtherAppRequest.Info:type_name -> cloud.hashing.inspire.v1.EventCoupon
	170, // 115: cloud.hashing.inspire.v1.CreateEventCouponForOtherAppResponse.Info:type_name -> cloud.hashing.inspire.v1.EventCoupon
	170, // 116: cloud.hashing.inspire.v1.UpdateEventCouponRequest.Info:type_name -> cloud.hashing.inspire.v1.EventCoupon
	170, // 117: cloud.hashing.inspire.v1.UpdateEventCouponResponse.Info:type_name -> cloud.hashing.inspire.v1.EventCoupon
	170, // 118: cloud.hashing.inspire.v1.GetEventCouponResponse.Info:type_name -> cloud.hashing.inspire.v1.EventCoupon
	170, // 119: cloud.hashing.inspire.v1.GetEventCouponsByAppActivityEventResponse.Infos:type_name -> cloud.hashing.inspire.v1.EventCoupon
	170, // 120: cloud.hashing.inspire.v1.GetEventCouponsByAppResponse.Infos:type_name -> cloud.hashing.inspire.v1.EventCoupon
	170, // 121: cloud.hashing.inspire.v1.GetEventCouponsByOtherAppResponse.Infos:type_name -> cloud.hashing.inspire.v1.EventCoupon
	185, // 122: cloud.hashing.inspire.v1.CloudHashingInspire.Version:input_type -> google.protobuf.Empty
	1,   // 123: cloud.hashing.inspire.v1.CloudHashingInspire.CreateNewUserRewardSetting:input_type -> cloud.hashing.inspire.v1.CreateNewUserRewardSettingRequest
	3,   // 124: cloud.hashing.inspire.v1.CloudHashingInspire.GetNewUserRewardSetting:input_type -> cloud.hashing.inspire.v1.GetNewUserRewardSettingRequest
	90,  // 125: cloud.hashing.inspire.v1.CloudHashingInspire.GetNewUserRewardSettingDetail:input_type -> cloud.hashing.inspire.v1.GetNewUserRewardSettingDetailRequest
	5,   // 126: cloud.hashing.inspire.v1.CloudHashingInspire.GetNewUserRewardSettingByApp:input_type -> cloud.hashing.inspire.v1.GetNewUserRewardSettingByAppRequest
	7,   // 127: cloud.hashing.inspire.v1.CloudHashingInspire.UpdateNewUserRewardSetting:input_type -> cloud.hashing.inspire.v1.UpdateNewUserRewardSettingRequest
	10,  // 128: cloud.hashing.inspire.v1.CloudHashingInspire.CreateAgencySetting:input_type -> cloud.hashing.inspire.v1.CreateAgencySettingRequest
	12,  // 129: cloud.hashing.inspire.v1.CloudHashingInspire.GetAgencySetting:input_type -> cloud.hashing.inspire.v1.GetAgencySettingRequest
	14,  // 130: cloud.hashing.inspire.v1.CloudHashingInspire.GetAgencySettingByApp:input_type -> cloud.hashing.inspire.v1.GetAgencySettingByAppRequest
	16,  // 131: cloud.hashing.inspire.v1.CloudHashingInspire.UpdateAgencySetting:input_type -> cloud.hashing.inspire.v1.UpdateAgencySettingRequest
	120, // 132: cloud.hashing.inspire.v1.CloudHashingInspire.GetAgencySettingDetail:input_type -> cloud.hashing.inspire.v1.GetAgencySettingDetailRequest
	122, // 133: cloud.hashing.inspire.v1.CloudHashingInspire.GetAgencySettingDetailByApp:input_type -> cloud.hashing.inspire.v1.GetAgencySettingDetailByAppRequest
	19,  // 134: cloud.hashing.inspire.v1.CloudHashingInspire.CreatePurchaseInvitation:input_type -> cloud.hashing.inspire.v1.CreatePurchaseInvitationRequest
	21,  // 135: cloud.hashing.inspire.v1.CloudHashingInspire.UpdatePurchaseInvitation:input_type -> cloud.hashing.inspire.v1.UpdatePurchaseInvitationRequest
	23,  // 136: cloud.hashing.inspire.v1.CloudHashingInspire.GetPurchaseInvitation:input_type -> cloud.hashing.inspire.v1.GetPurchaseInvitationRequest
	25,  // 137: cloud.hashing.inspire.v1.CloudHashingInspire.GetPurchaseInvitationsByApp:input_type -> cloud.hashing.inspire.v1.GetPurchaseInvitationsByAppRequest
	27,  // 138: cloud.hashing.inspire.v1.CloudHashingInspire.GetPurchaseInvitationByAppOrder:input_type -> cloud.hashing.inspire.v1.GetPurchaseInvitationByAppOrderRequest
	30,  // 139: cloud.hashing.inspire.v1.CloudHashingInspire.CreateRegistrationInvitation:input_type -> cloud.hashing.inspire.v1.CreateRegistrationInvitationRequest
	32,  // 140: cloud.hashing.inspire.v1.CloudHashingInspire.UpdateRegistrationInvitation:input_type -> cloud.hashing.inspire.v1.UpdateRegistrationInvitationRequest
	34,  // 141: cloud.hashing.inspire.v1.CloudHashingInspire.GetRegistrationInvitation:input_type -> cloud.hashing.inspire.v1.GetRegistrationInvitationRequest
	36,  // 142: cloud.hashing.inspire.v1.CloudHashingInspire.GetRegistrationInvitationsByApp:input_type -> cloud.hashing.inspire.v1.GetRegistrationInvitationsByAppRequest
	38,  // 143: cloud.hashing.inspire.v1.CloudHashingInspire.GetRegistrationInvitationsByAppInviter:input_type -> cloud.hashing.inspire.v1.GetRegistrationInvitationsByAppInviterRequest
	40,  // 144: cloud.hashing.inspire.v1.CloudHashingInspire.GetRegistrationInvitationByAppInvitee:input_type -> cloud.hashing.inspire.v1.GetRegistrationInvitationByAppInviteeRequest
	43,  // 145: cloud.hashing.inspire.v1.CloudHashingInspire.CreateUserInvitationCode:input_type -> cloud.hashing.inspire.v1.CreateUserInvitationCodeRequest
	45,  // 146: cloud.hashing.inspire.v1.CloudHashingInspire.CreateUserInvitationCodeForOtherAppUser:input_type -> cloud.hashing.inspire.v1.CreateUserInvitationCodeForOtherAppUserRequest
	47,  // 147: cloud.hashing.inspire.v1.CloudHashingInspire.CreateUserInvitationCodeForAppOtherUser:input_type -> cloud.hashing.inspire.v1.CreateUserInvitationCodeForAppOtherUserRequest
	49,  // 148: cloud.hashing.inspire.v1.CloudHashingInspire.GetUserInvitationCode:input_type -> cloud.hashing.inspire.v1.GetUserInvitationCodeRequest
	51,  // 149: cloud.hashing.inspire.v1.CloudHashingInspire.GetUserInvitationCodeByAppUser:input_type -> cloud.hashing.inspire.v1.GetUserInvitationCodeByAppUserRequest
	53,  // 150: cloud.hashing.inspire.v1.CloudHashingInspire.GetUserInvitationCodes:input_type -> cloud.hashing.inspire.v1.GetUserInvitationCodesRequest
	55,  // 151: cloud.hashing.inspire.v1.CloudHashingInspire.GetUserInvitationCodesByApp:input_type -> cloud.hashing.inspire.v1.GetUserInvitationCodesByAppRequest
	57,  // 152: cloud.hashing.inspire.v1.CloudHashingInspire.GetUserInvitationCodesByOtherApp:input_type -> cloud.hashing.inspire.v1.GetUserInvitationCodesByOtherAppRequest
	59,  // 153: cloud.hashing.inspire.v1.CloudHashingInspire.GetUserInvitationCodeByCode:input_type -> cloud.hashing.inspire.v1.GetUserInvitationCodeByCodeRequest
	62,  // 154: cloud.hashing.inspire.v1.CloudHashingInspire.CreateCouponAllocated:input_type -> cloud.hashing.inspire.v1.CreateCouponAllocatedRequest
	64,  // 155: cloud.hashing.inspire.v1.CloudHashingInspire.GetCouponAllocated:input_type -> cloud.hashing.inspire.v1.GetCouponAllocatedRequest
	66,  // 156: cloud.hashing.inspire.v1.CloudHashingInspire.GetCouponsAllocatedByApp:input_type -> cloud.hashing.inspire.v1.GetCouponsAllocatedByAppRequest
	68,  // 157: cloud.hashing.inspire.v1.CloudHashingInspire.GetCouponsAllocatedByAppUser:input_type -> cloud.hashing.inspire.v1.GetCouponsAllocatedByAppUserRequest
	70,  // 158: cloud.hashing.inspire.v1.CloudHashingInspire.UpdateCouponAllocated:input_type -> cloud.hashing.inspire.v1.UpdateCouponAllocatedRequest
	125, // 159: cloud.hashing.inspire.v1.CloudHashingInspire.GetCouponAllocatedDetail:input_type -> cloud.hashing.inspire.v1.GetCouponAllocatedDetailRequest
	127, // 160: cloud.hashing.inspire.v1.CloudHashingInspire.GetCouponsAllocatedDetailByApp:input_type -> cloud.hashing.inspire.v1.GetCouponsAllocatedDetailByAppRequest
	129, // 161: cloud.hashing.inspire.v1.CloudHashingInspire.GetCouponsAllocatedDetailByAppUser:input_type -> cloud.hashing.inspire.v1.GetCouponsAllocatedDetailByAppUserRequest
	73,  // 162: cloud.hashing.inspire.v1.CloudHashingInspire.CreateCouponPool:input_type -> cloud.hashing.inspire.v1.CreateCouponPoolRequest
	75,  // 163: cloud.hashing.inspire.v1.CloudHashingInspire.CreateCouponPoolForOtherApp:input_type -> cloud.hashing.inspire.v1.CreateCouponPoolForOtherAppRequest
	77,  // 164: cloud.hashing.inspire.v1.CloudHashingInspire.UpdateCouponPool:input_type -> cloud.hashing.inspire.v1.UpdateCouponPoolRequest
	79,  // 165: cloud.hashing.inspire.v1.CloudHashingInspire.GetCouponPool:input_type -> cloud.hashing.inspire.v1.GetCouponPoolRequest
	81,  // 166: cloud.hashing.inspire.v1.CloudHashingInspire.GetCouponPoolsByApp:input_type -> cloud.hashing.inspire.v1.GetCouponPoolsByAppRequest
	83,  // 167: cloud.hashing.inspire.v1.CloudHashingInspire.GetCouponPoolsByOtherApp:input_type -> cloud.hashing.inspire.v1.GetCouponPoolsByOtherAppRequest
	85,  // 168: cloud.hashing.inspire.v1.CloudHashingInspire.GetCouponPoolsByAppReleaser:input_type -> cloud.hashing.inspire.v1.GetCouponPoolsByAppReleaserRequest
	87,  // 169: cloud.hashing.inspire.v1.CloudHashingInspire.GetCouponPoolsByOtherAppReleaser:input_type -> cloud.hashing.inspire.v1.GetCouponPoolsByOtherAppReleaserRequest
	132, // 170: cloud.hashing.inspire.v1.CloudHashingInspire.CreateDiscountPool:input_type -> cloud.hashing.inspire.v1.CreateDiscountPoolRequest
	134, // 171: cloud.hashing.inspire.v1.CloudHashingInspire.UpdateDiscountPool:input_type -> cloud.hashing.inspire.v1.UpdateDiscountPoolRequest
	136, // 172: cloud.hashing.inspire.v1.CloudHashingInspire.GetDiscountPool:input_type -> cloud.hashing.inspire.v1.GetDiscountPoolRequest
	138, // 173: cloud.hashing.inspire.v1.CloudHashingInspire.GetDiscountPoolsByApp:input_type -> cloud.hashing.inspire.v1.GetDiscountPoolsByAppRequest
	140, // 174: cloud.hashing.inspire.v1.CloudHashingInspire.GetDiscountPoolsByAppReleaser:input_type -> cloud.hashing.inspire.v1.GetDiscountPoolsByAppReleaserRequest
	93,  // 175: cloud.hashing.inspire.v1.CloudHashingInspire.CreateAppCouponSetting:input_type -> cloud.hashing.inspire.v1.CreateAppCouponSettingRequest
	95,  // 176: cloud.hashing.inspire.v1.CloudHashingInspire.GetAppCouponSetting:input_type -> cloud.hashing.inspire.v1.GetAppCouponSettingRequest
	97,  // 177: cloud.hashing.inspire.v1.CloudHashingInspire.GetAppCouponSettingByApp:input_type -> cloud.hashing.inspire.v1.GetAppCouponSettingByAppRequest
	99,  // 178: cloud.hashing.inspire.v1.CloudHashingInspire.UpdateAppCouponSetting:input_type -> cloud.hashing.inspire.v1.UpdateAppCouponSettingRequest
	102, // 179: cloud.hashing.inspire.v1.CloudHashingInspire.CreateDefaultKpiSetting:input_type -> cloud.hashing.inspire.v1.CreateDefaultKpiSettingRequest
	104, // 180: cloud.hashing.inspire.v1.CloudHashingInspire.GetDefaultKpiSetting:input_type -> cloud.hashing.inspire.v1.GetDefaultKpiSettingRequest
	106, // 181: cloud.hashing.inspire.v1.CloudHashingInspire.GetDefaultKpiSettingByAppGood:input_type -> cloud.hashing.inspire.v1.GetDefaultKpiSettingByAppGoodRequest
	108, // 182: cloud.hashing.inspire.v1.CloudHashingInspire.UpdateDefaultKpiSetting:input_type -> cloud.hashing.inspire.v1.UpdateDefaultKpiSettingRequest
	111, // 183: cloud.hashing.inspire.v1.CloudHashingInspire.CreateUserKpiSetting:input_type -> cloud.hashing.inspire.v1.CreateUserKpiSettingRequest
	113, // 184: cloud.hashing.inspire.v1.CloudHashingInspire.GetUserKpiSetting:input_type -> cloud.hashing.inspire.v1.GetUserKpiSettingRequest
	115, // 185: cloud.hashing.inspire.v1.CloudHashingInspire.GetUserKpiSettingByAppGood:input_type -> cloud.hashing.inspire.v1.GetUserKpiSettingByAppGoodRequest
	117, // 186: cloud.hashing.inspire.v1.CloudHashingInspire.UpdateUserKpiSetting:input_type -> cloud.hashing.inspire.v1.UpdateUserKpiSettingRequest
	143, // 187: cloud.hashing.inspire.v1.CloudHashingInspire.CreateUserSpecialReduction:input_type -> cloud.hashing.inspire.v1.CreateUserSpecialReductionRequest
	145, // 188: cloud.hashing.inspire.v1.CloudHashingInspire.GetUserSpecialReduction:input_type -> cloud.hashing.inspire.v1.GetUserSpecialReductionRequest
	147, // 189: cloud.hashing.inspire.v1.CloudHashingInspire.GetUserSpecialReductionsByApp:input_type -> cloud.hashing.inspire.v1.GetUserSpecialReductionsByAppRequest
	153, // 190: cloud.hashing.inspire.v1.CloudHashingInspire.GetUserSpecialReductionsByAppReleaser:input_type -> cloud.hashing.inspire.v1.GetUserSpecialReductionsByAppReleaserRequest
	149, // 191: cloud.hashing.inspire.v1.CloudHashingInspire.GetUserSpecialReductionsByAppUser:input_type -> cloud.hashing.inspire.v1.GetUserSpecialReductionsByAppUserRequest
	151, // 192: cloud.hashing.inspire.v1.CloudHashingInspire.UpdateUserSpecialReduction:input_type -> cloud.hashing.inspire.v1.UpdateUserSpecialReductionRequest
	156, // 193: cloud.hashing.inspire.v1.CloudHashingInspire.CreateActivity:input_type -> cloud.hashing.inspire.v1.CreateActivityRequest
	160, // 194: cloud.hashing.inspire.v1.CloudHashingInspire.CreateActivityForOtherApp:input_type -> cloud.hashing.inspire.v1.CreateActivityForOtherAppRequest
	158, // 195: cloud.hashing.inspire.v1.CloudHashingInspire.UpdateActivity:input_type -> cloud.hashing.inspire.v1.UpdateActivityRequest
	162, // 196: cloud.hashing.inspire.v1.CloudHashingInspire.GetActivity:input_type -> cloud.hashing.inspire.v1.GetActivityRequest
	164, // 197: cloud.hashing.inspire.v1.CloudHashingInspire.GetActivityByAppName:input_type -> cloud.hashing.inspire.v1.GetActivityByAppNameRequest
	166, // 198: cloud.hashing.inspire.v1.CloudHashingInspire.GetActivitiesByApp:input_type -> cloud.hashing.inspire.v1.GetActivitiesByAppRequest
	168, // 199: cloud.hashing.inspire.v1.CloudHashingInspire.GetActivitiesByOtherApp:input_type -> cloud.hashing.inspire.v1.GetActivitiesByOtherAppRequest
	171, // 200: cloud.hashing.inspire.v1.CloudHashingInspire.CreateEventCoupon:input_type -> cloud.hashing.inspire.v1.CreateEventCouponRequest
	173, // 201: cloud.hashing.inspire.v1.CloudHashingInspire.CreateEventCouponForOtherApp:input_type -> cloud.hashing.inspire.v1.CreateEventCouponForOtherAppRequest
	175, // 202: cloud.hashing.inspire.v1.CloudHashingInspire.UpdateEventCoupon:input_type -> cloud.hashing.inspire.v1.UpdateEventCouponRequest
	177, // 203: cloud.hashing.inspire.v1.CloudHashingInspire.GetEventCoupon:input_type -> cloud.hashing.inspire.v1.GetEventCouponRequest
	179, // 204: cloud.hashing.inspire.v1.CloudHashingInspire.GetEventCouponsByAppActivityEvent:input_type -> cloud.hashing.inspire.v1.GetEventCouponsByAppActivityEventRequest
	181, // 205: cloud.hashing.inspire.v1.CloudHashingInspire.GetEventCouponsByApp:input_type -> cloud.hashing.inspire.v1.GetEventCouponsByAppRequest
	183, // 206: cloud.hashing.inspire.v1.CloudHashingInspire.GetEventCouponsByOtherApp:input_type -> cloud.hashing.inspire.v1.GetEventCouponsByOtherAppRequest
	186, // 207: cloud.hashing.inspire.v1.CloudHashingInspire.Version:output_type -> npool.v1.VersionResponse
	2,   // 208: cloud.hashing.inspire.v1.CloudHashingInspire.CreateNewUserRewardSetting:output_type -> cloud.hashing.inspire.v1.CreateNewUserRewardSettingResponse
	4,   // 209: cloud.hashing.inspire.v1.CloudHashingInspire.GetNewUserRewardSetting:output_type -> cloud.hashing.inspire.v1.GetNewUserRewardSettingResponse
	91,  // 210: cloud.hashing.inspire.v1.CloudHashingInspire.GetNewUserRewardSettingDetail:output_type -> cloud.hashing.inspire.v1.GetNewUserRewardSettingDetailResponse
	6,   // 211: cloud.hashing.inspire.v1.CloudHashingInspire.GetNewUserRewardSettingByApp:output_type -> cloud.hashing.inspire.v1.GetNewUserRewardSettingByAppResponse
	8,   // 212: cloud.hashing.inspire.v1.CloudHashingInspire.UpdateNewUserRewardSetting:output_type -> cloud.hashing.inspire.v1.UpdateNewUserRewardSettingResponse
	11,  // 213: cloud.hashing.inspire.v1.CloudHashingInspire.CreateAgencySetting:output_type -> cloud.hashing.inspire.v1.CreateAgencySettingResponse
	13,  // 214: cloud.hashing.inspire.v1.CloudHashingInspire.GetAgencySetting:output_type -> cloud.hashing.inspire.v1.GetAgencySettingResponse
	15,  // 215: cloud.hashing.inspire.v1.CloudHashingInspire.GetAgencySettingByApp:output_type -> cloud.hashing.inspire.v1.GetAgencySettingByAppResponse
	17,  // 216: cloud.hashing.inspire.v1.CloudHashingInspire.UpdateAgencySetting:output_type -> cloud.hashing.inspire.v1.UpdateAgencySettingResponse
	121, // 217: cloud.hashing.inspire.v1.CloudHashingInspire.GetAgencySettingDetail:output_type -> cloud.hashing.inspire.v1.GetAgencySettingDetailResponse
	123, // 218: cloud.hashing.inspire.v1.CloudHashingInspire.GetAgencySettingDetailByApp:output_type -> cloud.hashing.inspire.v1.GetAgencySettingDetailByAppResponse
	20,  // 219: cloud.hashing.inspire.v1.CloudHashingInspire.CreatePurchaseInvitation:output_type -> cloud.hashing.inspire.v1.CreatePurchaseInvitationResponse
	22,  // 220: cloud.hashing.inspire.v1.CloudHashingInspire.UpdatePurchaseInvitation:output_type -> cloud.hashing.inspire.v1.UpdatePurchaseInvitationResponse
	24,  // 221: cloud.hashing.inspire.v1.CloudHashingInspire.GetPurchaseInvitation:output_type -> cloud.hashing.inspire.v1.GetPurchaseInvitationResponse
	26,  // 222: cloud.hashing.inspire.v1.CloudHashingInspire.GetPurchaseInvitationsByApp:output_type -> cloud.hashing.inspire.v1.GetPurchaseInvitationsByAppResponse
	28,  // 223: cloud.hashing.inspire.v1.CloudHashingInspire.GetPurchaseInvitationByAppOrder:output_type -> cloud.hashing.inspire.v1.GetPurchaseInvitationByAppOrderResponse
	31,  // 224: cloud.hashing.inspire.v1.CloudHashingInspire.CreateRegistrationInvitation:output_type -> cloud.hashing.inspire.v1.CreateRegistrationInvitationResponse
	33,  // 225: cloud.hashing.inspire.v1.CloudHashingInspire.UpdateRegistrationInvitation:output_type -> cloud.hashing.inspire.v1.UpdateRegistrationInvitationResponse
	35,  // 226: cloud.hashing.inspire.v1.CloudHashingInspire.GetRegistrationInvitation:output_type -> cloud.hashing.inspire.v1.GetRegistrationInvitationResponse
	37,  // 227: cloud.hashing.inspire.v1.CloudHashingInspire.GetRegistrationInvitationsByApp:output_type -> cloud.hashing.inspire.v1.GetRegistrationInvitationsByAppResponse
	39,  // 228: cloud.hashing.inspire.v1.CloudHashingInspire.GetRegistrationInvitationsByAppInviter:output_type -> cloud.hashing.inspire.v1.GetRegistrationInvitationsByAppInviterResponse
	41,  // 229: cloud.hashing.inspire.v1.CloudHashingInspire.GetRegistrationInvitationByAppInvitee:output_type -> cloud.hashing.inspire.v1.GetRegistrationInvitationByAppInviteeResponse
	44,  // 230: cloud.hashing.inspire.v1.CloudHashingInspire.CreateUserInvitationCode:output_type -> cloud.hashing.inspire.v1.CreateUserInvitationCodeResponse
	46,  // 231: cloud.hashing.inspire.v1.CloudHashingInspire.CreateUserInvitationCodeForOtherAppUser:output_type -> cloud.hashing.inspire.v1.CreateUserInvitationCodeForOtherAppUserResponse
	48,  // 232: cloud.hashing.inspire.v1.CloudHashingInspire.CreateUserInvitationCodeForAppOtherUser:output_type -> cloud.hashing.inspire.v1.CreateUserInvitationCodeForAppOtherUserResponse
	50,  // 233: cloud.hashing.inspire.v1.CloudHashingInspire.GetUserInvitationCode:output_type -> cloud.hashing.inspire.v1.GetUserInvitationCodeResponse
	52,  // 234: cloud.hashing.inspire.v1.CloudHashingInspire.GetUserInvitationCodeByAppUser:output_type -> cloud.hashing.inspire.v1.GetUserInvitationCodeByAppUserResponse
	54,  // 235: cloud.hashing.inspire.v1.CloudHashingInspire.GetUserInvitationCodes:output_type -> cloud.hashing.inspire.v1.GetUserInvitationCodesResponse
	56,  // 236: cloud.hashing.inspire.v1.CloudHashingInspire.GetUserInvitationCodesByApp:output_type -> cloud.hashing.inspire.v1.GetUserInvitationCodesByAppResponse
	58,  // 237: cloud.hashing.inspire.v1.CloudHashingInspire.GetUserInvitationCodesByOtherApp:output_type -> cloud.hashing.inspire.v1.GetUserInvitationCodesByOtherAppResponse
	60,  // 238: cloud.hashing.inspire.v1.CloudHashingInspire.GetUserInvitationCodeByCode:output_type -> cloud.hashing.inspire.v1.GetUserInvitationCodeByCodeResponse
	63,  // 239: cloud.hashing.inspire.v1.CloudHashingInspire.CreateCouponAllocated:output_type -> cloud.hashing.inspire.v1.CreateCouponAllocatedResponse
	65,  // 240: cloud.hashing.inspire.v1.CloudHashingInspire.GetCouponAllocated:output_type -> cloud.hashing.inspire.v1.GetCouponAllocatedResponse
	67,  // 241: cloud.hashing.inspire.v1.CloudHashingInspire.GetCouponsAllocatedByApp:output_type -> cloud.hashing.inspire.v1.GetCouponsAllocatedByAppResponse
	69,  // 242: cloud.hashing.inspire.v1.CloudHashingInspire.GetCouponsAllocatedByAppUser:output_type -> cloud.hashing.inspire.v1.GetCouponsAllocatedByAppUserResponse
	71,  // 243: cloud.hashing.inspire.v1.CloudHashingInspire.UpdateCouponAllocated:output_type -> cloud.hashing.inspire.v1.UpdateCouponAllocatedResponse
	126, // 244: cloud.hashing.inspire.v1.CloudHashingInspire.GetCouponAllocatedDetail:output_type -> cloud.hashing.inspire.v1.GetCouponAllocatedDetailResponse
	128, // 245: cloud.hashing.inspire.v1.CloudHashingInspire.GetCouponsAllocatedDetailByApp:output_type -> cloud.hashing.inspire.v1.GetCouponsAllocatedDetailByAppResponse
	130, // 246: cloud.hashing.inspire.v1.CloudHashingInspire.GetCouponsAllocatedDetailByAppUser:output_type -> cloud.hashing.inspire.v1.GetCouponsAllocatedDetailByAppUserResponse
	74,  // 247: cloud.hashing.inspire.v1.CloudHashingInspire.CreateCouponPool:output_type -> cloud.hashing.inspire.v1.CreateCouponPoolResponse
	76,  // 248: cloud.hashing.inspire.v1.CloudHashingInspire.CreateCouponPoolForOtherApp:output_type -> cloud.hashing.inspire.v1.CreateCouponPoolForOtherAppResponse
	78,  // 249: cloud.hashing.inspire.v1.CloudHashingInspire.UpdateCouponPool:output_type -> cloud.hashing.inspire.v1.UpdateCouponPoolResponse
	80,  // 250: cloud.hashing.inspire.v1.CloudHashingInspire.GetCouponPool:output_type -> cloud.hashing.inspire.v1.GetCouponPoolResponse
	82,  // 251: cloud.hashing.inspire.v1.CloudHashingInspire.GetCouponPoolsByApp:output_type -> cloud.hashing.inspire.v1.GetCouponPoolsByAppResponse
	84,  // 252: cloud.hashing.inspire.v1.CloudHashingInspire.GetCouponPoolsByOtherApp:output_type -> cloud.hashing.inspire.v1.GetCouponPoolsByOtherAppResponse
	86,  // 253: cloud.hashing.inspire.v1.CloudHashingInspire.GetCouponPoolsByAppReleaser:output_type -> cloud.hashing.inspire.v1.GetCouponPoolsByAppReleaserResponse
	88,  // 254: cloud.hashing.inspire.v1.CloudHashingInspire.GetCouponPoolsByOtherAppReleaser:output_type -> cloud.hashing.inspire.v1.GetCouponPoolsByOtherAppReleaserResponse
	133, // 255: cloud.hashing.inspire.v1.CloudHashingInspire.CreateDiscountPool:output_type -> cloud.hashing.inspire.v1.CreateDiscountPoolResponse
	135, // 256: cloud.hashing.inspire.v1.CloudHashingInspire.UpdateDiscountPool:output_type -> cloud.hashing.inspire.v1.UpdateDiscountPoolResponse
	137, // 257: cloud.hashing.inspire.v1.CloudHashingInspire.GetDiscountPool:output_type -> cloud.hashing.inspire.v1.GetDiscountPoolResponse
	139, // 258: cloud.hashing.inspire.v1.CloudHashingInspire.GetDiscountPoolsByApp:output_type -> cloud.hashing.inspire.v1.GetDiscountPoolsByAppResponse
	141, // 259: cloud.hashing.inspire.v1.CloudHashingInspire.GetDiscountPoolsByAppReleaser:output_type -> cloud.hashing.inspire.v1.GetDiscountPoolsByAppReleaserResponse
	94,  // 260: cloud.hashing.inspire.v1.CloudHashingInspire.CreateAppCouponSetting:output_type -> cloud.hashing.inspire.v1.CreateAppCouponSettingResponse
	96,  // 261: cloud.hashing.inspire.v1.CloudHashingInspire.GetAppCouponSetting:output_type -> cloud.hashing.inspire.v1.GetAppCouponSettingResponse
	98,  // 262: cloud.hashing.inspire.v1.CloudHashingInspire.GetAppCouponSettingByApp:output_type -> cloud.hashing.inspire.v1.GetAppCouponSettingByAppResponse
	100, // 263: cloud.hashing.inspire.v1.CloudHashingInspire.UpdateAppCouponSetting:output_type -> cloud.hashing.inspire.v1.UpdateAppCouponSettingResponse
	103, // 264: cloud.hashing.inspire.v1.CloudHashingInspire.CreateDefaultKpiSetting:output_type -> cloud.hashing.inspire.v1.CreateDefaultKpiSettingResponse
	105, // 265: cloud.hashing.inspire.v1.CloudHashingInspire.GetDefaultKpiSetting:output_type -> cloud.hashing.inspire.v1.GetDefaultKpiSettingResponse
	107, // 266: cloud.hashing.inspire.v1.CloudHashingInspire.GetDefaultKpiSettingByAppGood:output_type -> cloud.hashing.inspire.v1.GetDefaultKpiSettingByAppGoodResponse
	109, // 267: cloud.hashing.inspire.v1.CloudHashingInspire.UpdateDefaultKpiSetting:output_type -> cloud.hashing.inspire.v1.UpdateDefaultKpiSettingResponse
	112, // 268: cloud.hashing.inspire.v1.CloudHashingInspire.CreateUserKpiSetting:output_type -> cloud.hashing.inspire.v1.CreateUserKpiSettingResponse
	114, // 269: cloud.hashing.inspire.v1.CloudHashingInspire.GetUserKpiSetting:output_type -> cloud.hashing.inspire.v1.GetUserKpiSettingResponse
	116, // 270: cloud.hashing.inspire.v1.CloudHashingInspire.GetUserKpiSettingByAppGood:output_type -> cloud.hashing.inspire.v1.GetUserKpiSettingByAppGoodResponse
	118, // 271: cloud.hashing.inspire.v1.CloudHashingInspire.UpdateUserKpiSetting:output_type -> cloud.hashing.inspire.v1.UpdateUserKpiSettingResponse
	144, // 272: cloud.hashing.inspire.v1.CloudHashingInspire.CreateUserSpecialReduction:output_type -> cloud.hashing.inspire.v1.CreateUserSpecialReductionResponse
	146, // 273: cloud.hashing.inspire.v1.CloudHashingInspire.GetUserSpecialReduction:output_type -> cloud.hashing.inspire.v1.GetUserSpecialReductionResponse
	148, // 274: cloud.hashing.inspire.v1.CloudHashingInspire.GetUserSpecialReductionsByApp:output_type -> cloud.hashing.inspire.v1.GetUserSpecialReductionsByAppResponse
	154, // 275: cloud.hashing.inspire.v1.CloudHashingInspire.GetUserSpecialReductionsByAppReleaser:output_type -> cloud.hashing.inspire.v1.GetUserSpecialReductionsByAppReleaserResponse
	150, // 276: cloud.hashing.inspire.v1.CloudHashingInspire.GetUserSpecialReductionsByAppUser:output_type -> cloud.hashing.inspire.v1.GetUserSpecialReductionsByAppUserResponse
	152, // 277: cloud.hashing.inspire.v1.CloudHashingInspire.UpdateUserSpecialReduction:output_type -> cloud.hashing.inspire.v1.UpdateUserSpecialReductionResponse
	157, // 278: cloud.hashing.inspire.v1.CloudHashingInspire.CreateActivity:output_type -> cloud.hashing.inspire.v1.CreateActivityResponse
	161, // 279: cloud.hashing.inspire.v1.CloudHashingInspire.CreateActivityForOtherApp:output_type -> cloud.hashing.inspire.v1.CreateActivityForOtherAppResponse
	159, // 280: cloud.hashing.inspire.v1.CloudHashingInspire.UpdateActivity:output_type -> cloud.hashing.inspire.v1.UpdateActivityResponse
	163, // 281: cloud.hashing.inspire.v1.CloudHashingInspire.GetActivity:output_type -> cloud.hashing.inspire.v1.GetActivityResponse
	165, // 282: cloud.hashing.inspire.v1.CloudHashingInspire.GetActivityByAppName:output_type -> cloud.hashing.inspire.v1.GetActivityByAppNameResponse
	167, // 283: cloud.hashing.inspire.v1.CloudHashingInspire.GetActivitiesByApp:output_type -> cloud.hashing.inspire.v1.GetActivitiesByAppResponse
	169, // 284: cloud.hashing.inspire.v1.CloudHashingInspire.GetActivitiesByOtherApp:output_type -> cloud.hashing.inspire.v1.GetActivitiesByOtherAppResponse
	172, // 285: cloud.hashing.inspire.v1.CloudHashingInspire.CreateEventCoupon:output_type -> cloud.hashing.inspire.v1.CreateEventCouponResponse
	174, // 286: cloud.hashing.inspire.v1.CloudHashingInspire.CreateEventCouponForOtherApp:output_type -> cloud.hashing.inspire.v1.CreateEventCouponForOtherAppResponse
	176, // 287: cloud.hashing.inspire.v1.CloudHashingInspire.UpdateEventCoupon:output_type -> cloud.hashing.inspire.v1.UpdateEventCouponResponse
	178, // 288: cloud.hashing.inspire.v1.CloudHashingInspire.GetEventCoupon:output_type -> cloud.hashing.inspire.v1.GetEventCouponResponse
	180, // 289: cloud.hashing.inspire.v1.CloudHashingInspire.GetEventCouponsByAppActivityEvent:output_type -> cloud.hashing.inspire.v1.GetEventCouponsByAppActivityEventResponse
	182, // 290: cloud.hashing.inspire.v1.CloudHashingInspire.GetEventCouponsByApp:output_type -> cloud.hashing.inspire.v1.GetEventCouponsByAppResponse
	184, // 291: cloud.hashing.inspire.v1.CloudHashingInspire.GetEventCouponsByOtherApp:output_type -> cloud.hashing.inspire.v1.GetEventCouponsByOtherAppResponse
	207, // [207:292] is the sub-list for method output_type
	122, // [122:207] is the sub-list for method input_type
	122, // [122:122] is the sub-list for extension type_name
	122, // [122:122] is the sub-list for extension extendee
	0,   // [0:122] is the sub-list for field type_name
}

func init() { file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_init() }
func file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_init() {
	if File_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewUserRewardSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNewUserRewardSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNewUserRewardSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewUserRewardSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewUserRewardSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewUserRewardSettingByAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewUserRewardSettingByAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNewUserRewardSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNewUserRewardSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgencySetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAgencySettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAgencySettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAgencySettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAgencySettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAgencySettingByAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAgencySettingByAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAgencySettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAgencySettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurchaseInvitation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePurchaseInvitationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePurchaseInvitationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePurchaseInvitationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePurchaseInvitationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPurchaseInvitationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPurchaseInvitationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPurchaseInvitationsByAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPurchaseInvitationsByAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPurchaseInvitationByAppOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPurchaseInvitationByAppOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistrationInvitation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRegistrationInvitationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRegistrationInvitationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRegistrationInvitationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRegistrationInvitationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRegistrationInvitationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRegistrationInvitationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRegistrationInvitationsByAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRegistrationInvitationsByAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRegistrationInvitationsByAppInviterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRegistrationInvitationsByAppInviterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRegistrationInvitationByAppInviteeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRegistrationInvitationByAppInviteeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInvitationCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserInvitationCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserInvitationCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserInvitationCodeForOtherAppUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserInvitationCodeForOtherAppUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserInvitationCodeForAppOtherUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserInvitationCodeForAppOtherUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInvitationCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInvitationCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInvitationCodeByAppUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInvitationCodeByAppUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInvitationCodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInvitationCodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInvitationCodesByAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInvitationCodesByAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInvitationCodesByOtherAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInvitationCodesByOtherAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInvitationCodeByCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInvitationCodeByCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CouponAllocated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCouponAllocatedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCouponAllocatedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCouponAllocatedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCouponAllocatedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCouponsAllocatedByAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCouponsAllocatedByAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCouponsAllocatedByAppUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCouponsAllocatedByAppUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCouponAllocatedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCouponAllocatedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CouponPool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCouponPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCouponPoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCouponPoolForOtherAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCouponPoolForOtherAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCouponPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCouponPoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCouponPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCouponPoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCouponPoolsByAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCouponPoolsByAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCouponPoolsByOtherAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCouponPoolsByOtherAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCouponPoolsByAppReleaserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCouponPoolsByAppReleaserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCouponPoolsByOtherAppReleaserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCouponPoolsByOtherAppReleaserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewUserRewardSettingDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewUserRewardSettingDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewUserRewardSettingDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppCouponSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAppCouponSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAppCouponSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppCouponSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppCouponSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppCouponSettingByAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppCouponSettingByAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAppCouponSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAppCouponSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefaultKpiSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDefaultKpiSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDefaultKpiSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDefaultKpiSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDefaultKpiSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDefaultKpiSettingByAppGoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDefaultKpiSettingByAppGoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDefaultKpiSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDefaultKpiSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserKpiSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserKpiSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserKpiSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserKpiSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserKpiSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserKpiSettingByAppGoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserKpiSettingByAppGoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserKpiSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserKpiSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgencySettingDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAgencySettingDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAgencySettingDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAgencySettingDetailByAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAgencySettingDetailByAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CouponAllocatedDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCouponAllocatedDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCouponAllocatedDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCouponsAllocatedDetailByAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCouponsAllocatedDetailByAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCouponsAllocatedDetailByAppUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCouponsAllocatedDetailByAppUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscountPool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDiscountPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDiscountPoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDiscountPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDiscountPoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDiscountPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDiscountPoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDiscountPoolsByAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDiscountPoolsByAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDiscountPoolsByAppReleaserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDiscountPoolsByAppReleaserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSpecialReduction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserSpecialReductionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserSpecialReductionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserSpecialReductionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserSpecialReductionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserSpecialReductionsByAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserSpecialReductionsByAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserSpecialReductionsByAppUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserSpecialReductionsByAppUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserSpecialReductionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserSpecialReductionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserSpecialReductionsByAppReleaserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserSpecialReductionsByAppReleaserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Activity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateActivityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateActivityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateActivityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateActivityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateActivityForOtherAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateActivityForOtherAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActivityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActivityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActivityByAppNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActivityByAppNameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActivitiesByAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActivitiesByAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActivitiesByOtherAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActivitiesByOtherAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventCoupon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEventCouponRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEventCouponResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEventCouponForOtherAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEventCouponForOtherAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateEventCouponRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateEventCouponResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEventCouponRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEventCouponResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEventCouponsByAppActivityEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEventCouponsByAppActivityEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEventCouponsByAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEventCouponsByAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEventCouponsByOtherAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEventCouponsByOtherAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   185,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_goTypes,
		DependencyIndexes: file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_depIdxs,
		MessageInfos:      file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_msgTypes,
	}.Build()
	File_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto = out.File
	file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_rawDesc = nil
	file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_goTypes = nil
	file_npool_cloud_hashing_inspire_cloud_hashing_inspire_proto_depIdxs = nil
}
